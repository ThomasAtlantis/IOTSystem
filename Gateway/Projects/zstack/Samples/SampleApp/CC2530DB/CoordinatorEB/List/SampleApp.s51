///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              18/Jul/2019  23:04:42
// Copyright 2004-2018 IAR Systems AB.
// PC-locked license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    Command line       =  
//        -f C:\Users\MAC\AppData\Local\Temp\EW7C67.tmp
//        (F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//        -D HAL_LCD=FALSE -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
//        xMT_ZDO_FUNC -D HAL_UART_DMA=1 -D HAL_UART_ISR=2 -lC
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
//        -lA
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ohz --no_code_motion)
//    Locale             =  Chinese (Simplified)_CHN.936
//    List file          =  
//        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__iar_require _formatted_write", "unknown"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        PUBLIC `??SampleApp_HandleKeys::?relay`
        FUNCTION `??SampleApp_HandleKeys::?relay`,0203H
        PUBLIC `??SampleApp_Init::?relay`
        FUNCTION `??SampleApp_Init::?relay`,0203H
        PUBLIC `??SampleApp_MessageMSGCB::?relay`
        FUNCTION `??SampleApp_MessageMSGCB::?relay`,0203H
        PUBLIC `??SampleApp_ProcessEvent::?relay`
        FUNCTION `??SampleApp_ProcessEvent::?relay`,0203H
        PUBLIC `??SampleApp_SendFlashMessage::?relay`
        FUNCTION `??SampleApp_SendFlashMessage::?relay`,0203H
        PUBLIC `??SampleApp_SendPeriodicMessage::?relay`
        FUNCTION `??SampleApp_SendPeriodicMessage::?relay`,0203H
        PUBLIC `??WiFiRecv::?relay`
        FUNCTION `??WiFiRecv::?relay`,0203H
        PUBLIC `??_UARTRead::?relay`
        FUNCTION `??_UARTRead::?relay`,0203H
        PUBLIC `??_UARTSend::?relay`
        FUNCTION `??_UARTSend::?relay`,0203H
        PUBLIC `??_delay_ms::?relay`
        FUNCTION `??_delay_ms::?relay`,0203H
        PUBLIC `??_delay_us::?relay`
        FUNCTION `??_delay_us::?relay`,0203H
        PUBLIC `??exit_send::?relay`
        FUNCTION `??exit_send::?relay`,0203H
        PUBLIC `??wait_for::?relay`
        FUNCTION `??wait_for::?relay`,0203H
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,0a1203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC WiFiRecv
        FUNCTION WiFiRecv,0a1203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 68, STACK
        PUBWEAK _A_P0
        PUBLIC _UARTRead
        FUNCTION _UARTRead,0a1203H
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC _UARTSend
        FUNCTION _UARTSend,0a1203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 78, STACK
        PUBLIC _delay_ms
        FUNCTION _delay_ms,021203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC _delay_us
        FUNCTION _delay_us,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC exit_send
        FUNCTION exit_send,021203H
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC wait_for
        FUNCTION wait_for,0a1203H
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 68, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
HalLedBlink         SYMBOL "HalLedBlink"
`??HalLedBlink::?relay` SYMBOL "?relay", HalLedBlink
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
`??HalUARTWrite::?relay` SYMBOL "?relay", HalUARTWrite
MT_UartInit         SYMBOL "MT_UartInit"
`??MT_UartInit::?relay` SYMBOL "?relay", MT_UartInit
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
`??MT_UartRegisterTaskID::?relay` SYMBOL "?relay", MT_UartRegisterTaskID
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
osal_memcmp         SYMBOL "osal_memcmp"
`??osal_memcmp::?relay` SYMBOL "?relay", osal_memcmp
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
strcmp              SYMBOL "strcmp"
`??strcmp::?relay`  SYMBOL "?relay", strcmp
strcpy              SYMBOL "strcpy"
`??strcpy::?relay`  SYMBOL "?relay", strcpy
strlen              SYMBOL "strlen"
`??strlen::?relay`  SYMBOL "?relay", strlen
vsprintf            SYMBOL "vsprintf"
`??vsprintf::?relay` SYMBOL "?relay", vsprintf
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
`??SampleApp_HandleKeys::?relay` SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
`??SampleApp_Init::?relay` SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
`??SampleApp_MessageMSGCB::?relay` SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
`??SampleApp_ProcessEvent::?relay` SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
`??SampleApp_SendFlashMessage::?relay` SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
`??SampleApp_SendPeriodicMessage::?relay` SYMBOL "?relay", SampleApp_SendPeriodicMessage
WiFiRecv            SYMBOL "WiFiRecv"
`??WiFiRecv::?relay` SYMBOL "?relay", WiFiRecv
_UARTRead           SYMBOL "_UARTRead"
`??_UARTRead::?relay` SYMBOL "?relay", _UARTRead
_UARTSend           SYMBOL "_UARTSend"
`??_UARTSend::?relay` SYMBOL "?relay", _UARTSend
_delay_ms           SYMBOL "_delay_ms"
`??_delay_ms::?relay` SYMBOL "?relay", _delay_ms
_delay_us           SYMBOL "_delay_us"
`??_delay_us::?relay` SYMBOL "?relay", _delay_us
exit_send           SYMBOL "exit_send"
`??exit_send::?relay` SYMBOL "?relay", exit_send
wait_for            SYMBOL "wait_for"
`??wait_for::?relay` SYMBOL "?relay", wait_for

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??HalLedBlink::?relay`
        FUNCTION `??HalLedBlink::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??HalUARTWrite::?relay`
        FUNCTION `??HalUARTWrite::?relay`,00H
        EXTERN `??MT_UartInit::?relay`
        FUNCTION `??MT_UartInit::?relay`,00H
        EXTERN `??MT_UartRegisterTaskID::?relay`
        FUNCTION `??MT_UartRegisterTaskID::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??osal_memcmp::?relay`
        FUNCTION `??osal_memcmp::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??strcmp::?relay`
        FUNCTION `??strcmp::?relay`,00H
        EXTERN `??strcpy::?relay`
        FUNCTION `??strcpy::?relay`,00H
        EXTERN `??strlen::?relay`
        FUNCTION `??strlen::?relay`,00H
        EXTERN `??vsprintf::?relay`
        FUNCTION `??vsprintf::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcmp
        FUNCTION osal_memcmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcmp
        FUNCTION strcmp,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN vsprintf
        FUNCTION vsprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /*********************************************************************
//    2     This application isn't intended to do anything useful, it is
//    3     intended to be a simple example of an application's structure.
//    4 
//    5     This application sends it's messages either as broadcast or
//    6     broadcast filtered group messages.    The other (more normal)
//    7     message addressing is unicast.    Most of the other sample
//    8     applications are written to support the unicast message model.
//    9 
//   10     Key control:
//   11         SW1:    Sends a flash command to all devices in Group 1.
//   12         SW2:    Adds/Removes (toggles) this device in and out
//   13                 of Group 1.    This will enable and disable the
//   14                 reception of the flash command.
//   15 *********************************************************************/
//   16 
//   17 #include "OSAL.h"
//   18 #include "OSAL_Nv.h"
//   19 #include "ZGlobals.h"
//   20 #include "AF.h"
//   21 #include "aps_groups.h"
//   22 #include "ZDApp.h"
//   23 
//   24 #include "SampleApp.h"
//   25 #include "SampleAppHw.h"
//   26 
//   27 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1
//   28 
//   29 /* HAL */
//   30 #include "hal_lcd.h"
//   31 #include "hal_led.h"
//   32 #include "hal_key.h"
//   33 #include "hal_uart.h"
//   34 #include "MT_UART.h"
//   35 
//   36 /* SYS */
//   37 #include <string.h>
//   38 #include <stdio.h>
//   39 #include <stdarg.h>
//   40 
//   41 #define UartDefaultRxLen 50
//   42 #define UartDefaultTxLen 64
//   43 #define Key_S1 P0_0
//   44 #define Key_S2 P0_1
//   45 #define Key_Active 0
//   46 #define LED_RED P1_0
//   47 #define LED_YELLOW P1_1
//   48 #define LED_ORANGE P1_4
//   49 #define ZD_NV_SSID_ID 0x0401
//   50 #define ZD_NV_PSWD_ID 0x0402
//   51 
//   52 #define isPressed(x) (x == Key_Active)
//   53 #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
//   54 #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
//   55 #define debug_and_print(x,...) do{\ 
//   56     _UARTSend(0,x,##__VA_ARGS__);\ 
//   57     _UARTSend(1,x,##__VA_ARGS__);\ 
//   58 }while(0)
//   59 
//   60 void _UARTSend(uint8 port, uint8 *fmt, ...);
//   61 void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
//   62 void _delay_us(uint16 n);
//   63 void _delay_ms(uint16 n);
//   64 uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
//   65 void exit_send(void);
//   66 uint16 WiFiRecv(uint8 *buff);
//   67 
//   68 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   69 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   70 {
//   71     SAMPLEAPP_PERIODIC_CLUSTERID,
//   72     SAMPLEAPP_FLASH_CLUSTERID
//   73 };
//   74 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   75 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   76 {
//   77     SAMPLEAPP_ENDPOINT,                //    int    Endpoint;
//   78     SAMPLEAPP_PROFID,                  //    uint16 AppProfId[2];
//   79     SAMPLEAPP_DEVICEID,                //    uint16 AppDeviceId[2];
//   80     SAMPLEAPP_DEVICE_VERSION,          //    int    AppDevVer:4;
//   81     SAMPLEAPP_FLAGS,                   //    int    AppFlags:4;
//   82     SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
//   83     (cId_t *)SampleApp_ClusterList,    //    uint8  *pAppInClusterList;
//   84     SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
//   85     (cId_t *)SampleApp_ClusterList     //    uint8  *pAppInClusterList;
//   86 };
//   87 
//   88 // This is the Endpoint/Interface description.    It is defined here, but
//   89 // filled-in in SampleApp_Init().    Another way to go would be to fill
//   90 // in the structure here and make it a "const" (in code space).    The
//   91 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 /*********************************************************************
//   95  * EXTERNAL VARIABLES
//   96  */
//   97 
//   98 /*********************************************************************
//   99  * EXTERNAL FUNCTIONS
//  100  */
//  101 
//  102 /*********************************************************************
//  103  * LOCAL VARIABLES
//  104  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 uint8 SampleApp_TaskID;     // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  106                             // This variable will be received when
//  107                             // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  108 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  109 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  110 uint8 SampleApp_TransID;    // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  111 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  112 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  114 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  115 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  116 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  117 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  118 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  119 
//  120 /*********************************************************************
//  121  * LOCAL FUNCTIONS
//  122  */
//  123 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  124 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  125 void SampleApp_SendPeriodicMessage( void );
//  126 void SampleApp_SendFlashMessage( uint16 flashTime );
//  127 
//  128 /*********************************************************************
//  129  * NETWORK LAYER CALLBACKS
//  130  */
//  131 
//  132 /*********************************************************************
//  133  * PUBLIC FUNCTIONS
//  134  */
//  135 
//  136 /*********************************************************************
//  137  * @fn            SampleApp_Init
//  138  *
//  139  * @brief     Initialization function for the Generic App Task.
//  140  *            This is called during initialization and should contain
//  141  *            any application specific initialization (ie. hardware
//  142  *            initialization/setup, table initialization, power up
//  143  *            notificaiton ... ).
//  144  *
//  145  * @param     task_id - the ID assigned by OSAL.    This ID should be
//  146  *            used to send messages and set timers.
//  147  *
//  148  * @return    none
//  149  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  150 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SampleApp_Init
        CODE
//  151 {
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV       A,R1
        MOV       R6,A
//  152     SampleApp_TaskID = task_id;
        MOV       DPTR,#SampleApp_TaskID
        MOVX      @DPTR,A
//  153     SampleApp_NwkState = DEV_INIT;
        MOV       DPTR,#SampleApp_NwkState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  154     SampleApp_TransID = 0;
        MOV       DPTR,#SampleApp_TransID
        CLR       A
        MOVX      @DPTR,A
//  155     
//  156     MT_UartInit();
        ; Setup parameters for call to function MT_UartInit
        LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
//  157     MT_UartRegisterTaskID(task_id);
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV       A,R6
        MOV       R1,A
        LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
//  158     
//  159     // Device hardware initialization can be added here or in main() (Zmain.c).
//  160     // If the hardware is application specific - add it here.
//  161     // If the hardware is other parts of the device add it in main().
//  162 
//  163  #if defined ( BUILD_ALL_DEVICES )
//  164     // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  165     // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  166     // together - if they are - we will start up a coordinator. Otherwise,
//  167     // the device will start as a router.
//  168     if ( readCoordinatorJumper() )
//  169         zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  170     else
//  171         zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  172 #endif // BUILD_ALL_DEVICES
//  173 
//  174 #if defined ( HOLD_AUTO_START )
//  175     // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  176     //    from starting the device and wait for the application to
//  177     //    start the device.
//  178     ZDOInitDevice(0);
//  179 #endif
//  180 
//  181     // Setup for the periodic message's destination address
//  182     // Broadcast to everyone
//  183     SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  184     SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  185     SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV       DPTR,#SampleApp_Periodic_DstAddr
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  186 
//  187     // Setup for the flash command's destination address - Group 1
//  188     SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV       DPTR,#SampleApp_Flash_DstAddr + 8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  189     SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  190     SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV       DPTR,#SampleApp_Flash_DstAddr
        LCALL     ?Subroutine3 & 0xFFFF
//  191 
//  192     // Fill out the endpoint description.
//  193     SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
??CrossCallReturnLabel_49:
        MOV       DPTR,#SampleApp_epDesc
        MOV       A,#0x14
        MOVX      @DPTR,A
//  194     SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC       DPTR
        MOV       A,#SampleApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  195     SampleApp_epDesc.simpleDesc
//  196         = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC       DPTR
        MOV       A,#SampleApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
        LCALL     ??Subroutine20_0 & 0xFFFF
//  197     SampleApp_epDesc.latencyReq = noLatencyReqs;
//  198 
//  199     // Register the endpoint description with the AF
//  200     afRegister( &SampleApp_epDesc );
??CrossCallReturnLabel_45:
        ; Setup parameters for call to function afRegister
        MOV       R2,#SampleApp_epDesc & 0xff
        MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
//  201 
//  202     // Register for all key events - This app will handle all key events
//  203     RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  204 
//  205     // By default, all devices start out in Group 1
//  206     SampleApp_Group.ID = 0x0001;
        MOV       DPTR,#SampleApp_Group
        LCALL     ?Subroutine3 & 0xFFFF
//  207     osal_memcpy(SampleApp_Group.name, "Group 1", 7);
??CrossCallReturnLabel_50:
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Group 1">` & 0xff
        MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV       ?V2,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       R4,#0x7
        MOV       R5,#0x0
        MOV       R2,#(SampleApp_Group + 2) & 0xff
        MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  208     aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
        ; Setup parameters for call to function aps_AddGroup
        MOV       R2,#SampleApp_Group & 0xff
        MOV       R3,#(SampleApp_Group >> 8) & 0xff
        MOV       R1,#0x14
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
//  209 
//  210 #if defined ( LCD_SUPPORTED )
//  211     HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
//  212 #endif
//  213     osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x2
        LCALL     ??Subroutine19_0 & 0xFFFF
//  214 }
??CrossCallReturnLabel_42:
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0
//  215 
//  216 /*********************************************************************
//  217  * @fn        SampleApp_ProcessEvent
//  218  *
//  219  * @brief     Generic Application Task event processor.    This function
//  220  *            is called to process all events for the task.    Events
//  221  *            include timers, messages and any other user defined events.
//  222  *
//  223  * @param     task_id    - The OSAL assigned task ID.
//  224  * @param     events - events to process.    This is a bit map and can
//  225  *            contain more than one event.
//  226  *
//  227  * @return    none
//  228  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  229 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
        CODE
//  230 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, exit_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, WiFiRecv
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_memcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 112, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 112, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, exit_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 113, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 113, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, wait_for
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 111, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 111, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 109, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 109, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 95
        MOV       A,#-0x5f
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  231     afIncomingMSGPacket_t *MSGpkt;
//  232     halUARTCfg_t uartConfig;
//  233     uint8 _buffer[UartDefaultRxLen];
//  234     uint8 InitNVStatus, readNVStatus, writeNVStatus;
//  235     uint8 SSID[8], PSWD[8];
//  236     uint16 length, nv_id;
//  237     (void)task_id;    // Intentionally unreferenced parameter
//  238     if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JZ        ??SampleApp_ProcessEvent_0
//  239     {
//  240         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??SampleApp_ProcessEvent_1
//  241         while ( MSGpkt )
//  242         {
//  243             switch ( MSGpkt->hdr.event )
//  244             {
//  245                 // Received when a key is pressed
//  246                 case KEY_CHANGE:
//  247                     SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state,
//  248                         ((keyChange_t *)MSGpkt)->keys );
//  249                     break;
//  250 
//  251                 // Received when a messages is received (OTA) for this endpoint
//  252                 case AF_INCOMING_MSG_CMD:
//  253                     SampleApp_MessageMSGCB( MSGpkt );
//  254                     break;
//  255 
//  256                 // Received whenever the device changes state in the network
//  257                 case ZDO_STATE_CHANGE:
//  258                     SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#SampleApp_NwkState
        MOVX      @DPTR,A
//  259                     if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  260                             || (SampleApp_NwkState == DEV_ROUTER)
//  261                             || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL       A,#0x9
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??CrossCallReturnLabel_37
//  262                     {
//  263                         // Start sending the periodic message in a regular interval.
//  264                         osal_start_timerEx( SampleApp_TaskID,
//  265                             SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  266                             SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x78
        MOV       R5,#0x13
        LCALL     ?Subroutine7 & 0xFFFF
//  267                     }
//  268                     else
//  269                     {
//  270                         // Device is no longer in the network
//  271                     }
//  272                     break;
//  273 
//  274                 default:
//  275                     break;
//  276             }
//  277 
//  278             // Release the memory
//  279             osal_msg_deallocate( (uint8 *)MSGpkt );
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  280 
//  281             // Next - if one is available
//  282             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??SampleApp_ProcessEvent_4
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??SampleApp_ProcessEvent_5
        ADD       A,#0x49
        JZ        ??SampleApp_ProcessEvent_2
        SJMP      ??CrossCallReturnLabel_37
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
        SJMP      ??CrossCallReturnLabel_37
//  283         }
//  284 
//  285         // return unprocessed events
//  286         return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        LJMP      ??SampleApp_ProcessEvent_6 & 0xFFFF
//  287     }
//  288 
//  289     // Send a message out - This event is generated by a timer
//  290     //    (setup in SampleApp_Init()).
//  291     if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??SampleApp_ProcessEvent_7
//  292     {
//  293         // Send the periodic message
//  294         SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
//  295         // Setup to send message again in normal period (+ a little jitter)
//  296         osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  297                 (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ADD       A,#-0x78
        MOV       R4,A
        CLR       A
        ADDC      A,#0x13
        MOV       R5,A
        LCALL     ?Subroutine7 & 0xFFFF
//  298 
//  299         // return unprocessed events
//  300         return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
??CrossCallReturnLabel_38:
        MOV       A,R6
        XRL       A,#0x1
        LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
//  301     }
//  302     
//  303     if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
??SampleApp_ProcessEvent_7:
        ANL       A,#0x2
        JNZ       $+5
        LJMP      ??SampleApp_ProcessEvent_9 & 0xFFFF
//  304 
//  305         // initialize uart_1
//  306         uartConfig.configured           = TRUE;
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  307         uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
        MOV       A,#0x11
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x4
        MOVX      @DPTR,A
//  308         uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
//  309         uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
        MOV       A,#0x13
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x40
        LCALL     ??Subroutine20_0 & 0xFFFF
//  310         uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
??CrossCallReturnLabel_46:
        MOV       A,#0x1a
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        LCALL     ??Subroutine20_0 & 0xFFFF
//  311         uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
??CrossCallReturnLabel_47:
        MOV       A,#0x22
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        LCALL     ??Subroutine20_0 & 0xFFFF
//  312         uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
??CrossCallReturnLabel_48:
        MOV       A,#0x15
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x6
        MOVX      @DPTR,A
//  313         uartConfig.intEnable            = TRUE;
        MOV       A,#0x26
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  314         uartConfig.callBackFunc         = NULL;
        MOV       A,#0x2b
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  315         HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       A,#0x10
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x1
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  316         debug("UART_1 INITIALIZED!\r\n");
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  317 
//  318         if (isPressed(Key_S1)) {
        MOV       C,0x80.0
        JC        ??SampleApp_ProcessEvent_10
//  319             debug("Enter AP Mode\r\n");
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  320             osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x10
        SJMP      ??SampleApp_ProcessEvent_11
//  321         } else {
//  322             debug("Enter STA Mode\r\n");
??SampleApp_ProcessEvent_10:
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  323             osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x4
//  324         }
??SampleApp_ProcessEvent_11:
        LCALL     ??Subroutine19_0 & 0xFFFF
//  325         return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
??CrossCallReturnLabel_43:
        MOV       A,R6
        XRL       A,#0x2
        LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
//  326     }
//  327 
//  328     if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
??SampleApp_ProcessEvent_9:
        MOV       A,R2
        ANL       A,#0x10
        JNZ       $+5
        LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
//  329         exit_send();
        ; Setup parameters for call to function exit_send
        LCALL     `??exit_send::?relay`; Banked call to: exit_send
//  330         do debug_and_print("AT+CWMODE=2\r\n");
??SampleApp_ProcessEvent_13:
        MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  331         while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_2:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_13
//  332         do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n");
??SampleApp_ProcessEvent_14:
        MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  333         while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_3:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
//  334         do debug_and_print("AT+CIPMODE=0\r\n");
??SampleApp_ProcessEvent_15:
        MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  335         while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_4:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
//  336         do debug_and_print("AT+CIPMUX=1\r\n");
??SampleApp_ProcessEvent_16:
        MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  337         while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
??CrossCallReturnLabel_5:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
//  338         do debug_and_print("AT+CIPSERVER=1,8266\r\n");
??SampleApp_ProcessEvent_17:
        MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  339         while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_6:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
//  340         while (1) {
//  341             length = WiFiRecv(_buffer);
??SampleApp_ProcessEvent_18:
        ; Setup parameters for call to function WiFiRecv
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
        MOV       ?V4,R2
        MOV       ?V5,R3
//  342             if (length > 6 && length <= 25) { // min: SSIDx\r\n 允许19位长度
        MOV       A,R2
        ADD       A,#-0x7
        MOV       R0,A
        MOV       A,R3
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R0
        SUBB      A,#0x13
        MOV       A,R1
        SUBB      A,#0x0
        JC        $+5
        LJMP      ??SampleApp_ProcessEvent_19 & 0xFFFF
//  343                 if (osal_memcmp(_buffer, (uint8 *) "SSID", 4)) {
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V0,#`?<Constant "SSID">` & 0xff
        MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 112)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x30
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        ??SampleApp_ProcessEvent_20
//  344                     nv_id = ZD_NV_SSID_ID;
        MOV       ?V0,#0x1
        SJMP      ??SampleApp_ProcessEvent_21
//  345                 } else 
//  346                 if (osal_memcmp(_buffer, (uint8 *) "PSWD", 4)) {
??SampleApp_ProcessEvent_20:
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V0,#`?<Constant "PSWD">` & 0xff
        MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 112)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x30
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        ??SampleApp_ProcessEvent_18
//  347                     nv_id = ZD_NV_PSWD_ID;
        MOV       ?V0,#0x2
??SampleApp_ProcessEvent_21:
        MOV       ?V1,#0x4
        SJMP      ??SampleApp_ProcessEvent_22
//  348                 } else continue;
//  349                 while (length < 26) _buffer[length ++] = '\0';
??SampleApp_ProcessEvent_23:
        MOV       A,#0x2d
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,?V4
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,?V5
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       ?V4
        MOV       A,?V4
        JNZ       ??SampleApp_ProcessEvent_22
        INC       ?V5
??SampleApp_ProcessEvent_22:
        CLR       C
        MOV       A,?V4
        SUBB      A,#0x1a
        MOV       A,?V5
        SUBB      A,#0x0
        JC        ??SampleApp_ProcessEvent_23
//  350                 InitNVStatus = osal_nv_item_init(nv_id, 20, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
//  351                 writeNVStatus = osal_nv_write(nv_id, 0, 20, _buffer + 4);
        ; Setup parameters for call to function osal_nv_write
        MOV       A,#0x31
        LCALL     ?XSTACK_DISP0_8
        MOV       ?V2,DPL
        MOV       ?V3,DPH
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       ?V2,#0x14
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 113)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
//  352                 (void) writeNVStatus;
        LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
//  353             } else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
??SampleApp_ProcessEvent_19:
        MOV       A,#0x4
        XRL       A,R2
        ORL       A,R3
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
        ; Setup parameters for call to function osal_memcmp
        MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
        MOV       ?V2,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 112)
        MOV       R4,#0x4
        MOV       R5,#0x0
        MOV       A,#0x30
        LCALL     ?XSTACK_DISP0_8
        MOV       R1,DPL
        MOV       R2,DPH
        MOV       R3,#0x0
        LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JNZ       $+5
        LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
//  354                 do debug_and_print("AT+RST\r\n");
??SampleApp_ProcessEvent_24:
        MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  355                 while (wait_for("ready\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_7:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
        MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
        LCALL     ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_24
//  356                 break;
//  357             }
//  358         }
//  359         osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine4 & 0xFFFF
//  360         return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
??CrossCallReturnLabel_40:
        MOV       A,R6
        XRL       A,#0x10
        LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
//  361     }
//  362 
//  363     if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
??SampleApp_ProcessEvent_12:
        MOV       A,R2
        ANL       A,#0x4
        JNZ       $+5
        LJMP      ??SampleApp_ProcessEvent_25 & 0xFFFF
//  364         // initialize esp8266
//  365         do {
//  366             exit_send();
??SampleApp_ProcessEvent_26:
        ; Setup parameters for call to function exit_send
        LCALL     `??exit_send::?relay`; Banked call to: exit_send
//  367             InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, 20, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x4
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        MOV       ?V0,A
//  368             readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, 20, SSID);
//  369             if (readNVStatus == SUCCESS && InitNVStatus == SUCCESS) {
        ; Setup parameters for call to function osal_nv_read
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       ?V2,#0x14
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 113)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x1
        MOV       R3,#0x4
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_27 & 0xFFFF
        MOV       A,?V0
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_27 & 0xFFFF
//  370                 HalUARTWrite(0, SSID, 20);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       A,#0x8
        LCALL     ?XSTACK_DISP101_8
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  371             } else {
//  372                 debug("Read Flash Failed\r\n");
//  373                 return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
//  374             }
//  375             InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, 20, NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR       A
        MOV       ?V0,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        MOV       ?V0,A
//  376             readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, 20, PSWD);
//  377             if (readNVStatus == SUCCESS && InitNVStatus == SUCCESS) {
        ; Setup parameters for call to function osal_nv_read
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V2,R0
        MOV       ?V3,R1
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       ?V2,#0x14
        MOV       ?V3,#0x0
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 113)
        MOV       R4,#0x0
        MOV       R5,#0x0
        MOV       R2,#0x2
        MOV       R3,#0x4
        LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV       A,#0x4
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_27 & 0xFFFF
        MOV       A,?V0
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_27 & 0xFFFF
//  378                 HalUARTWrite(0, PSWD, 20);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x14
        MOV       R5,#0x0
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  379             } else {
//  380                 debug("Read Flash Failed\r\n");
//  381                 return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
//  382             }
//  383             do debug_and_print("AT+CWMODE=1\r\n");
??SampleApp_ProcessEvent_28:
        MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  384             while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_8:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_28
//  385             do debug_and_print("AT+CWJAP=\"liuchen\",\"liuchen88\"\r\n");
??SampleApp_ProcessEvent_29:
        MOV       ?V0,#`?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  386             // do debug_and_print("AT+CWJAP=\"Atlantis\",\"21396878335\"\r\n");
//  387             while (wait_for("OK\r\n", "FAIL\r\n", 0));
??CrossCallReturnLabel_9:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
        LCALL     ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_32:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_29
//  388             do debug_and_print("AT+CIPMUX=0\r\n");
??SampleApp_ProcessEvent_30:
        MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  389             while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_10:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_30
//  390             do debug_and_print("AT+CIPMODE=1\r\n");
??SampleApp_ProcessEvent_31:
        MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  391             while (wait_for("OK\r\n", "ERROR\r\n", 0));
??CrossCallReturnLabel_11:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        LCALL     ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_31
//  392             // do debug_and_print("AT+CIPSTART=\"TCP\",\"192.168.43.2\",8000\r\n");
//  393             do debug_and_print("AT+CIPSTART=\"TCP\",\"192.168.1.109\",8000\r\n");
??SampleApp_ProcessEvent_32:
        MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  394             while (wait_for("OK\r\n", "CLOSED\r\n", 0));
??CrossCallReturnLabel_12:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
        LCALL     ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        CJNE      R1,#0x0,??SampleApp_ProcessEvent_32
//  395             debug_and_print("AT+CIPSEND\r\n");
        MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine8 & 0xFFFF
//  396         } while (wait_for(">", "ERROR\r\n", 0));
??CrossCallReturnLabel_13:
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
        MOV       R2,#`?<Constant ">">` & 0xff
        MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
        LCALL     ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        $+5
        LJMP      ??SampleApp_ProcessEvent_26 & 0xFFFF
//  397         
//  398         // drive initial events
//  399         _delay_ms(50);
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x32
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
//  400         osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV       R2,#0x8
        LCALL     ??Subroutine19_0 & 0xFFFF
//  401         return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
??CrossCallReturnLabel_44:
        SJMP      ??SampleApp_ProcessEvent_33
??SampleApp_ProcessEvent_27:
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
??SampleApp_ProcessEvent_33:
        MOV       A,R6
        XRL       A,#0x4
        SJMP      ??SampleApp_ProcessEvent_8
//  402     }
//  403 
//  404     if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
??SampleApp_ProcessEvent_25:
        MOV       A,R2
        ANL       A,#0x8
        JZ        ??SampleApp_ProcessEvent_34
//  405         debug_and_print("heart beat\r\n");
        MOV       ?V0,#`?<Constant "heart beat\\r\\n">` & 0xff
        MOV       ?V1,#(`?<Constant "heart beat\\r\\n">` >> 8) & 0xff
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine15 & 0xFFFF
//  406         if (wait_for("received\r\n", "ERROR\r\n", 200)) {
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function wait_for
        MOV       ?V0,#-0x38
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 111)
        MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
        MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
        LCALL     ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_36:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 109)
        MOV       A,R1
        JZ        ??SampleApp_ProcessEvent_35
//  407             debug("WIFI RESET\r\n");
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  408             osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
        ; Setup parameters for call to function osal_set_event
        LCALL     ?Subroutine4 & 0xFFFF
//  409         } else {
??CrossCallReturnLabel_41:
        SJMP      ??CrossCallReturnLabel_39
//  410             osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
??SampleApp_ProcessEvent_35:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x30
        MOV       R5,#0x7
        MOV       R2,#0x8
        LCALL     ??Subroutine18_0 & 0xFFFF
//  411         }
//  412         return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
??CrossCallReturnLabel_39:
        MOV       A,R6
        XRL       A,#0x8
??SampleApp_ProcessEvent_8:
        MOV       R2,A
        MOV       A,R7
??SampleApp_ProcessEvent_6:
        MOV       R3,A
        SJMP      ??SampleApp_ProcessEvent_36
//  413     }
//  414 
//  415     // Discard unknown events
//  416     return 0;
??SampleApp_ProcessEvent_34:
        MOV       R2,#0x0
        MOV       R3,#0x0
??SampleApp_ProcessEvent_36:
        MOV       A,#0x5f
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0
//  417 }

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 109)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Valid
        MOV       R7,#0x6
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond3 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function SampleApp_ProcessEvent
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond4) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function SampleApp_ProcessEvent
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function SampleApp_ProcessEvent
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function SampleApp_ProcessEvent
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function SampleApp_ProcessEvent
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond8) CFA_SP SP+-2
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function SampleApp_ProcessEvent
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function SampleApp_ProcessEvent
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function SampleApp_ProcessEvent
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function SampleApp_ProcessEvent
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function SampleApp_ProcessEvent
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function SampleApp_ProcessEvent
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function SampleApp_ProcessEvent
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+-2
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function SampleApp_ProcessEvent
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-2
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function SampleApp_ProcessEvent
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function SampleApp_ProcessEvent
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function SampleApp_ProcessEvent
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine17_0:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function SampleApp_ProcessEvent
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function SampleApp_ProcessEvent
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function SampleApp_ProcessEvent
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function SampleApp_ProcessEvent
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function SampleApp_ProcessEvent
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function SampleApp_ProcessEvent
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function SampleApp_ProcessEvent
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function SampleApp_ProcessEvent
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function SampleApp_ProcessEvent
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function SampleApp_ProcessEvent
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function SampleApp_ProcessEvent
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function SampleApp_ProcessEvent
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 111)
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        LCALL     `??wait_for::?relay`; Banked call to: wait_for
        MOV       A,#0x2
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond37 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function SampleApp_ProcessEvent
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function SampleApp_ProcessEvent
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-2
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function SampleApp_ProcessEvent
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-2
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function SampleApp_ProcessEvent
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function SampleApp_ProcessEvent
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function SampleApp_ProcessEvent
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-2
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function SampleApp_ProcessEvent
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function SampleApp_ProcessEvent
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function SampleApp_ProcessEvent
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-2
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function SampleApp_ProcessEvent
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+-2
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function SampleApp_ProcessEvent
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+-2
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        LCALL     ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        ; Setup parameters for call to function wait_for
        CLR       A
        MOV       ?V0,A
        MOV       ?V1,A
        MOV       R0,#?V0
        RET
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function SampleApp_ProcessEvent
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_2
          CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond51) CFA_SP SP+-4
          CFI (cfiCond51) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function SampleApp_ProcessEvent
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_3
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-4
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function SampleApp_ProcessEvent
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_4
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-4
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function SampleApp_ProcessEvent
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_5
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-4
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function SampleApp_ProcessEvent
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_6
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function SampleApp_ProcessEvent
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_7
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function SampleApp_ProcessEvent
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_8
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function SampleApp_ProcessEvent
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_9
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-4
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function SampleApp_ProcessEvent
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_10
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-4
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function SampleApp_ProcessEvent
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_11
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-4
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function SampleApp_ProcessEvent
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_12
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-4
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function SampleApp_ProcessEvent
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_23, ??CrossCallReturnLabel_13
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        ; Setup parameters for call to function _UARTSend
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,#0x1
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
        RET
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function SampleApp_ProcessEvent
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV       R2,#0x1
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
        REQUIRE ??Subroutine18_0
        ; // Fall through to label ??Subroutine18_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine18_0:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function SampleApp_ProcessEvent
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function SampleApp_ProcessEvent
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        RET
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function SampleApp_ProcessEvent
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        MOV       R2,#0x4
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73
        REQUIRE ??Subroutine19_0
        ; // Fall through to label ??Subroutine19_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine19_0:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function SampleApp_Init
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function SampleApp_ProcessEvent
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function SampleApp_ProcessEvent
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-2
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function SampleApp_ProcessEvent
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-2
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function SampleApp_ProcessEvent
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
        RET
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function SampleApp_Init
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function SampleApp_Init
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-2
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOV       A,#0x1
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine20_0:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function SampleApp_Init
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function SampleApp_ProcessEvent
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function SampleApp_ProcessEvent
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function SampleApp_ProcessEvent
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 109)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function SampleApp_Init
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function SampleApp_Init
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89
//  418 
//  419 /*********************************************************************
//  420  * Event Generation Functions
//  421  */
//  422 /*********************************************************************
//  423  * @fn            SampleApp_HandleKeys
//  424  *
//  425  * @brief     Handles all key events for this device.
//  426  *
//  427  * @param     shift - true if in shift/alt.
//  428  * @param     keys - bit field for key events. Valid entries:
//  429  *                                 HAL_KEY_SW_2
//  430  *                                 HAL_KEY_SW_1
//  431  *
//  432  * @return    none
//  433  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  434 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
          CFI Block cfiBlock90 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
        CODE
//  435 {
        ; Saved register size: 0
        ; Auto size: 0
//  436     (void)shift;    // Intentionally unreferenced parameter
//  437     
//  438     if ( keys & HAL_KEY_SW_6 ) { // S1
//  439     }
//  440 
//  441     if ( keys & HAL_KEY_SW_7 ) { // S2
//  442     }
//  443 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock90
//  444 
//  445 /*********************************************************************
//  446  * @fn            SampleApp_MessageMSGCB
//  447  *
//  448  * @brief     Data message processor callback.    This function processes
//  449  *                    any incoming data - probably from other devices.    So, based
//  450  *                    on cluster ID, perform the intended action.
//  451  *
//  452  * @param     none
//  453  *
//  454  * @return    none
//  455  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  456 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
          CFI Block cfiBlock91 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
        CODE
//  457 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  458     uint16 flashTime;
//  459 
//  460     switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V1,A
        MOV       R0,#?V0
        LCALL     ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  461     {
//  462         case SAMPLEAPP_PERIODIC_CLUSTERID:
//  463             HalUARTWrite(0,"I get data\n",11);
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xb
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "I get data\\n">` & 0xff
        MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  464             HalUARTWrite(0, &pkt->cmd.Data[0],10);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0xa
        MOV       R5,#0x0
        MOV       A,R6
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX      A,@DPTR
        MOV       R2,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R3,A
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  465             HalUARTWrite(0,"\n",1);
        ; Setup parameters for call to function HalUARTWrite
        MOV       R4,#0x1
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  466             break;
        SJMP      ??SampleApp_MessageMSGCB_0
??SampleApp_MessageMSGCB_2:
        MOV       A,R2
        LCALL     ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function HalLedBlink
        MOV       DPL,R0
        MOV       DPH,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R2,A
        MOV       DPL,R0
        MOV       DPH,R1
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R0,A
        CLR       A
        XCH       A,R0
        MOV       R1,A
        MOV       A,R2
        ADD       A,R0
        MOV       ?V0,A
        CLR       A
        ADDC      A,R1
        MOV       ?V1,A
        MOV       A,#0x2
        MOV       R0,#?V0
        LCALL     ?US_SHR
        MOV       R4,?V0
        MOV       R5,?V1
        MOV       R3,#0x32
        MOV       R2,#0x4
        MOV       R1,#0x8
//  467 
//  468         case SAMPLEAPP_FLASH_CLUSTERID:
//  469             flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  470             HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
        LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
//  471             break;
//  472     }
//  473 }
??SampleApp_MessageMSGCB_0:
        LJMP      ??Subroutine21_0 & 0xFFFF
          CFI EndBlock cfiBlock91

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function SampleApp_MessageMSGCB
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        ADD       A,#0x22
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94
//  474 
//  475 /*********************************************************************
//  476  * @fn            SampleApp_SendPeriodicMessage
//  477  *
//  478  * @brief     Send the periodic message.
//  479  *
//  480  * @param     none
//  481  *
//  482  * @return    none
//  483  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  484 void SampleApp_SendPeriodicMessage( void ) {
SampleApp_SendPeriodicMessage:
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function SampleApp_SendPeriodicMessage
        CODE
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV       A,#-0xa
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  485     uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};
        MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0xa
        LCALL     ?MOVE_LONG8_XDATA_XDATA
//  486     if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc, SAMPLEAPP_PERIODIC_CLUSTERID,
//  487         10, data, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       ?V0,#0xa
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  488     } else {
//  489         // Error occurred in request to send.
//  490     }
//  491 }
        MOV       A,#0xa
        LJMP      ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock95
//  492 
//  493 /*********************************************************************
//  494  * @fn            SampleApp_SendFlashMessage
//  495  *
//  496  * @brief     Send the flash message to group 1.
//  497  *
//  498  * @param     flashTime - in milliseconds
//  499  *
//  500  * @return    none
//  501  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  502 void SampleApp_SendFlashMessage( uint16 flashTime ) {
SampleApp_SendFlashMessage:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function SampleApp_SendFlashMessage
        CODE
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  503     uint8 buffer[3];
//  504     buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  505     buffer[1] = LO_UINT16( flashTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  506     buffer[2] = HI_UINT16( flashTime );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R3
        MOVX      @DPTR,A
//  507 
//  508     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc, 
//  509         SAMPLEAPP_FLASH_CLUSTERID, 3, buffer, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x3
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Flash_DstAddr & 0xff
        MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  510     } else {
//  511         // Error occurred in request to send.
//  512     }
//  513 }
        MOV       A,#0x3
        SJMP      ?Subroutine1
          CFI EndBlock cfiBlock96
//  514 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  515 void _UARTSend(uint8 port, uint8 *fmt, ...) {
_UARTSend:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function _UARTSend
        CODE
        FUNCALL _UARTSend, vsprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL _UARTSend, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 76, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 76, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 66
        MOV       A,#-0x42
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       A,R1
        MOV       R6,A
//  516     va_list arg_ptr;
//  517     uint8 _buffer[UartDefaultTxLen], cnt;
//  518     uint16 length = 0;
//  519     for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
//  520         _buffer[cnt] = 0x00;
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        CLR       A
        MOV       R0,#0x40
??_UARTSend_0:
        MOVX      @DPTR,A
        INC       DPTR
        DJNZ      R0,??_UARTSend_0
//  521     va_start(arg_ptr, fmt);
        MOV       A,#0x4c
        LCALL     ?XSTACK_DISP100_8
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,R0
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R1
        MOVX      @DPTR,A
//  522     length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
        ; Setup parameters for call to function vsprintf
        MOV       R0,?XSP + 0
        MOV       R1,?XSP + 1
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 78)
        MOV       A,R2
        MOV       R4,A
        MOV       A,R3
        MOV       R5,A
        MOV       A,#0x4
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 76)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  523     va_end(arg_ptr);
//  524     HalUARTWrite(port, (uint8 *)_buffer, length);
        ; Setup parameters for call to function HalUARTWrite
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        MOV       A,R6
        MOV       R1,A
        LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
//  525 }
        MOV       A,#0x42
          CFI EndBlock cfiBlock97
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock98
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock99
//  526 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  527 void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
_UARTRead:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function _UARTRead
        CODE
        FUNCALL _UARTRead, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       ?V0,R1
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  528     for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
        MOV       DPL,R4
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  529         _buffer[*length] = 0x00;
??_UARTRead_0:
        MOV       DPL,R4
        MOV       DPH,R5
        LCALL     ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_52:
        MOV       A,R2
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R3
        ADDC      A,R1
        MOV       DPH,A
        CLR       A
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        MOVX      A,@DPTR
        ADD       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#0x0
        MOVX      @DPTR,A
        MOV       DPL,R4
        MOV       DPH,R5
        CLR       C
        MOVX      A,@DPTR
        SUBB      A,#0x32
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JC        ??_UARTRead_0
//  530     *length = HalUARTRead(port, _buffer, UartDefaultRxLen);
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,#0x32
        MOV       R5,#0x0
        MOV       R1,?V0
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV       DPL,R6
        MOV       DPH,R7
        MOV       A,R2
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,R3
        MOVX      @DPTR,A
//  531 }
          CFI EndBlock cfiBlock100
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV       R7,#0x1
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function WiFiRecv
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function WiFiRecv
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function _UARTRead
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function WiFiRecv
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function WiFiRecv
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker109 Using cfiCommon1
          CFI (cfiPicker109) NoFunction
          CFI (cfiPicker109) Picker
        MOVX      A,@DPTR
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R1,A
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiPicker109
//  532 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  533 void _delay_ms(uint16 timeout) {
_delay_ms:
          CFI Block cfiBlock110 Using cfiCommon0
          CFI Function _delay_ms
        CODE
        FUNCALL _delay_ms, _delay_us
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
        SJMP      ??_delay_ms_0
//  534     while (timeout --) {
//  535        _delay_us(1000);
??_delay_ms_1:
        ; Setup parameters for call to function _delay_us
        MOV       R2,#-0x18
        MOV       R3,#0x3
        LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
//  536     }
??_delay_ms_0:
        MOV       A,R6
        MOV       R0,A
        MOV       A,R7
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R6
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R7,A
        MOV       A,R0
        ORL       A,R1
        JNZ       ??_delay_ms_1
//  537 }
        SJMP      ?Subroutine2
          CFI EndBlock cfiBlock110
//  538 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  539 void _delay_us(uint16 timeout) {
_delay_us:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI Function _delay_us
        CODE
        ; Saved register size: 0
        ; Auto size: 0
//  540     uint8 cnt;
//  541     while (timeout --) {
??_delay_us_0:
        MOV       A,R2
        MOV       R0,A
        MOV       A,R3
        MOV       R1,A
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R2
        MOV       A,R1
        ADDC      A,#-0x1
        MOV       R3,A
        MOV       A,R0
        ORL       A,R1
        JZ        ??_delay_us_1
//  542         cnt = 32;
        MOV       R0,#0x20
//  543         while (cnt --) {
??_delay_us_2:
        MOV       A,R0
        MOV       R1,A
        MOV       A,#-0x1
        ADD       A,R1
        MOV       R0,A
        INC       A
        JZ        ??_delay_us_0
//  544             asm("NOP");
        NOP
        SJMP      ??_delay_us_2
//  545         }
//  546     }    
//  547 }
??_delay_us_1:
        LJMP      ?BRET
          CFI EndBlock cfiBlock111
//  548 
//  549 // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  550 uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
wait_for:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI Function wait_for
        CODE
        FUNCALL wait_for, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL wait_for, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL wait_for, _UARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL wait_for, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL wait_for, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL wait_for, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV       A,#-0x10
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 52
        MOV       A,#-0x34
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 68)
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,R4
        MOV       R6,A
        MOV       A,R5
        MOV       R7,A
//  551     uint16 wait_len, read_len, err_len;
//  552     int16 i, index;
//  553     uint8 buffer[UartDefaultRxLen], flag;
//  554     wait_len = strlen((char *)str);
        ; Setup parameters for call to function strlen
        LCALL     `??strlen::?relay`; Banked call to: strlen
        MOV       ?V6,R2
        MOV       ?V7,R3
//  555     err_len = strlen((char *)err);
        ; Setup parameters for call to function strlen
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        LCALL     `??strlen::?relay`; Banked call to: strlen
        MOV       ?V2,R2
        MOV       ?V3,R3
        MOV       A,#0x44
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       ?V4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       ?V5,A
//  556     while (1) {
//  557         _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
??wait_for_0:
        ; Setup parameters for call to function _UARTRead
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine11 & 0xFFFF
//  558         _delay_ms(1);
//  559         if (read_len > 2) { // at least 0x0D 0x0A
??CrossCallReturnLabel_14:
        SUBB      A,#0x3
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JNC       $+5
        LJMP      ??wait_for_1 & 0xFFFF
//  560             index = 0;
        MOV       R2,#0x0
        MOV       R3,#0x0
//  561             for (i = read_len - 1; i >= 0; i --) {
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        SJMP      ??wait_for_2
??wait_for_3:
        MOV       A,R0
        ADD       A,#-0x1
        DEC       R0
        MOV       A,R1
??wait_for_2:
        ADDC      A,#-0x1
        MOV       R1,A
        CLR       C
        MOV       A,R1
        SUBB      A,#0x0
        MOV       C,0xD0 /* PSW */.2
        XRL       A,PSW
        RLC       A
        JC        ??wait_for_4
//  562                 if (buffer[i] == 0x0A && i != read_len - 1) {
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0xa
        JNZ       ??wait_for_3
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        ADD       A,#-0x1
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        ADDC      A,#-0x1
        MOV       R5,A
        MOV       A,R4
        XRL       A,R0
        JNZ       ??wait_for_5
        MOV       A,R5
        XRL       A,R1
??wait_for_5:
        JZ        ??wait_for_3
//  563                     index = i + 1;
        MOV       A,R0
        ADD       A,#0x1
        MOV       R2,A
        CLR       A
        ADDC      A,R1
        MOV       R3,A
//  564                     break;
//  565                 }
//  566             }
//  567             
//  568             if (err_len == (read_len - index)) {
??wait_for_4:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        XRL       A,?V2
        JNZ       ??wait_for_6
        MOV       A,R1
        XRL       A,?V3
??wait_for_6:
        JNZ       ??wait_for_7
//  569                 flag = 1;
//  570                 for (i = 0; i < err_len; i ++) {
        MOV       R0,#0x0
        MOV       R1,#0x0
        SJMP      ??wait_for_8
//  571                     if (buffer[index + i] != err[i]) {
??wait_for_9:
        MOV       A,R2
        ADD       A,R0
        MOV       R4,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  572                         flag = 0;
//  573                         break;
//  574                     }
//  575                 }
??CrossCallReturnLabel_18:
        MOV       A,R6
        ADD       A,R0
        MOV       DPL,A
        MOV       A,R7
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??wait_for_7
        INC       R0
        MOV       A,R0
        JNZ       ??wait_for_8
        INC       R1
??wait_for_8:
        CLR       C
        MOV       A,R0
        SUBB      A,?V2
        MOV       A,R1
        SUBB      A,?V3
        JC        ??wait_for_9
//  576                 if (flag == 1) {
//  577                     debug(err);
        ; Setup parameters for call to function _UARTSend
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        MOV       R3,A
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  578                     return 1;
        MOV       R1,#0x1
        SJMP      ??wait_for_10
//  579                 }
//  580             }
//  581 
//  582             if (wait_len == (read_len - index)) {
??wait_for_7:
        LCALL     ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        XRL       A,?V6
        JNZ       ??wait_for_11
        MOV       A,R1
        XRL       A,?V7
??wait_for_11:
        JNZ       ??wait_for_1
//  583                 flag = 1;
//  584                 for (i = 0; i < wait_len; i ++) {
        MOV       R0,#0x0
        MOV       R1,#0x0
        SJMP      ??wait_for_12
//  585                     if (buffer[index + i] != str[i]) {
??wait_for_13:
        MOV       A,R2
        ADD       A,R0
        MOV       R4,A
        MOV       A,R3
        ADDC      A,R1
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine13 & 0xFFFF
//  586                         flag = 0;
//  587                         break;
//  588                     }
//  589                 }
??CrossCallReturnLabel_19:
        MOV       A,?V0
        ADD       A,R0
        MOV       DPL,A
        MOV       A,?V1
        ADDC      A,R1
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,R4
        JNZ       ??wait_for_1
        INC       R0
        MOV       A,R0
        JNZ       ??wait_for_12
        INC       R1
??wait_for_12:
        CLR       C
        MOV       A,R0
        SUBB      A,?V6
        MOV       A,R1
        SUBB      A,?V7
        JC        ??wait_for_13
//  590                 if (flag == 1) {
//  591                     debug(str);
        ; Setup parameters for call to function _UARTSend
        MOV       R2,?V0
        MOV       R3,?V1
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  592                     return 0;
        MOV       R1,#0x0
        SJMP      ??wait_for_10
//  593                 }
//  594             }
//  595         }
//  596         timeout --;
//  597         if (!timeout) return 2;
??wait_for_1:
        MOV       A,?V4
        ADD       A,#-0x1
        MOV       ?V4,A
        MOV       A,?V5
        ADDC      A,#-0x1
        MOV       ?V5,A
        MOV       A,?V4
        ORL       A,?V5
        JZ        $+5
        LJMP      ??wait_for_0 & 0xFFFF
        MOV       R1,#0x2
??wait_for_10:
        MOV       A,#0x34
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       R7,#0x8
        LJMP      ?BANKED_LEAVE_XDATA
//  598     }
//  599 }
          CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function wait_for
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 68)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function wait_for
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 68)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOV       A,DPL
        ADD       A,R4
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R5
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function wait_for
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 68)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function wait_for
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 68)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        CLR       C
        SUBB      A,R2
        MOV       R0,A
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,R3
        MOV       R1,A
        MOV       A,R0
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118
//  600 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  601 void exit_send() {
exit_send:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI Function exit_send
        CODE
        FUNCALL exit_send, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exit_send, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exit_send, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exit_send, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exit_send, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL exit_send, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV       A,#-0x9
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  602     print("+++");
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine10 & 0xFFFF
//  603     _delay_ms(10);
//  604     print("+++");
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function _UARTSend
        LCALL     ?Subroutine10 & 0xFFFF
//  605     _delay_ms(10);
//  606     print("\r\n");
??CrossCallReturnLabel_56:
        ; Setup parameters for call to function _UARTSend
        MOV       R2,#`?<Constant "\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        LCALL     ??Subroutine23_0 & 0xFFFF
//  607     _delay_ms(10);
//  608 }
??CrossCallReturnLabel_57:
        LJMP      ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock119

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond120 Using cfiCommon0
          CFI Function exit_send
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function exit_send
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-2
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker122 Using cfiCommon1
          CFI (cfiPicker122) NoFunction
          CFI (cfiPicker122) Picker
        MOV       R2,#`?<Constant "+++">` & 0xff
        MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiPicker122
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function exit_send
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function exit_send
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-2
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function exit_send
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-2
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker126 Using cfiCommon1
          CFI (cfiPicker126) NoFunction
          CFI (cfiPicker126) Picker
        MOV       R1,#0x1
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
        ; Setup parameters for call to function _delay_ms
        ; Setup parameters for call to function _delay_ms
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0xa
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
        RET
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiPicker126
//  609 
//  610 
//  611 // TODO: 整体要改

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  612 uint16 WiFiRecv(uint8 *buff) {
WiFiRecv:
          CFI Block cfiBlock127 Using cfiCommon0
          CFI Function WiFiRecv
        CODE
        FUNCALL WiFiRecv, _UARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiRecv, _delay_ms
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiRecv, strcmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiRecv, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiRecv, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 66, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 66, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL WiFiRecv, _UARTSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 68, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 68, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV       A,#-0xe
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 52
        MOV       A,#-0x34
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 66)
        MOV       ?V4,R2
        MOV       ?V5,R3
//  613     uint16 read_len, l_index, r_index;
//  614     uint8 buffer[UartDefaultRxLen];
//  615     while (1) {
//  616         _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
??WiFiRecv_0:
        ; Setup parameters for call to function _UARTRead
        MOV       R4,?XSP + 0
        MOV       R5,?XSP + 1
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine11 & 0xFFFF
//  617         _delay_ms(1);
//  618         if (read_len > 34) { // at least "0,CONNECT\r\n\r\n+IPD,0,2:\r\n0,CLOSED\r\n"
??CrossCallReturnLabel_15:
        SUBB      A,#0x23
        INC       DPTR
        MOVX      A,@DPTR
        SUBB      A,#0x0
        JC        ??WiFiRecv_0
//  619             l_index = 0;
        MOV       R6,#0x0
        MOV       R7,#0x0
??WiFiRecv_1:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R6
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        XRL       A,#0x3a
        JZ        ??WiFiRecv_2
//  620             while (l_index < read_len && buffer[l_index] != ':') {
//  621                 l_index ++;
        INC       R6
        MOV       A,R6
        JNZ       ??WiFiRecv_3
        INC       R7
//  622             }
??WiFiRecv_3:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_53:
        CLR       C
        MOV       A,R6
        SUBB      A,R0
        MOV       A,R7
        SUBB      A,R1
        JC        ??WiFiRecv_1
//  623             if (l_index == read_len) continue;
??WiFiRecv_2:
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,R6
        JNZ       ??WiFiRecv_4
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,R7
??WiFiRecv_4:
        JZ        ??WiFiRecv_0
//  624             r_index = ++ l_index;
        INC       R6
        MOV       A,R6
        JNZ       ??WiFiRecv_5
        INC       R7
??WiFiRecv_5:
        MOV       ?V0,R6
        MOV       ?V1,R7
        SJMP      ??WiFiRecv_6
//  625             while (r_index < read_len && buffer[r_index] != '\n') {
??WiFiRecv_7:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX      A,@DPTR
        XRL       A,#0xa
        JZ        ??WiFiRecv_8
//  626                 r_index ++;
        INC       ?V0
        MOV       A,?V0
        JNZ       ??WiFiRecv_6
        INC       ?V1
//  627             }
??WiFiRecv_6:
        LCALL     ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_54:
        CLR       C
        MOV       A,?V0
        SUBB      A,R0
        MOV       A,?V1
        SUBB      A,R1
        JC        ??WiFiRecv_7
//  628             if (r_index == read_len) continue;
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      A,@DPTR
        XRL       A,?V0
        JNZ       ??WiFiRecv_9
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,?V1
??WiFiRecv_9:
        JNZ       $+5
        LJMP      ??WiFiRecv_0 & 0xFFFF
//  629             buffer[++ r_index] = '\0';
??WiFiRecv_8:
        INC       ?V0
        MOV       A,?V0
        JNZ       ??WiFiRecv_10
        INC       ?V1
??WiFiRecv_10:
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        LCALL     ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        CLR       A
        MOVX      @DPTR,A
//  630             // TODO: 这里有个bug，当连接数较多时，可能出现
//  631             if (strcmp((char *)(buffer + r_index + 1), ",CLOSED\r\n") == 0) {
        ; Setup parameters for call to function strcmp
        MOV       R4,#`?<Constant ",CLOSED\\r\\n">` & 0xff
        MOV       R5,#(`?<Constant ",CLOSED\\r\\n">` >> 8) & 0xff
        INC       DPTR
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     `??strcmp::?relay`; Banked call to: strcmp
        MOV       A,R2
        ORL       A,R3
        JZ        $+5
        LJMP      ??WiFiRecv_0 & 0xFFFF
//  632                 debug(buffer + l_index);
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,DPL
        ADD       A,R6
        MOV       ?V2,A
        MOV       A,DPH
        ADDC      A,R7
        MOV       ?V3,A
        ; Setup parameters for call to function _UARTSend
        MOV       R2,?V2
        MOV       R3,A
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
//  633                 strcpy((char *)buff, (char *)(buffer + l_index));
        ; Setup parameters for call to function strcpy
        MOV       R4,?V2
        MOV       R5,?V3
        MOV       R2,?V4
        MOV       R3,?V5
        LCALL     `??strcpy::?relay`; Banked call to: strcpy
//  634                 debug("%d\r\n", r_index + 1 - l_index);
        ; Setup parameters for call to function _UARTSend
        MOV       A,?V0
        ADD       A,#0x1
        MOV       R0,A
        CLR       A
        ADDC      A,?V1
        MOV       R1,A
        MOV       A,R0
        CLR       C
        SUBB      A,R6
        MOV       ?V2,A
        MOV       A,R1
        SUBB      A,R7
        MOV       ?V3,A
        MOV       R0,#?V2
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 68)
        MOV       R2,#`?<Constant "%d\\r\\n">` & 0xff
        MOV       R3,#(`?<Constant "%d\\r\\n">` >> 8) & 0xff
        MOV       R1,#0x0
        LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 66)
//  635                 return (r_index - l_index);
        MOV       A,?V0
        CLR       C
        SUBB      A,R6
        MOV       R2,A
        MOV       A,?V1
        SUBB      A,R7
        MOV       R3,A
        MOV       A,#0x34
        LJMP      ?Subroutine0 & 0xFFFF
//  636             }
//  637         }
//  638     }
//  639 }
          CFI EndBlock cfiBlock127

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond128 Using cfiCommon0
          CFI Function WiFiRecv
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 66)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function WiFiRecv
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-2
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOV       A,DPL
        ADD       A,?V0
        MOV       DPL,A
        MOV       A,DPH
        ADDC      A,?V1
        MOV       DPH,A
        RET
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond131 Using cfiCommon0
          CFI Function wait_for
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 68)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function WiFiRecv
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 66)
          CFI Block cfiPicker133 Using cfiCommon1
          CFI (cfiPicker133) NoFunction
          CFI (cfiPicker133) Picker
        MOV       R1,#0x1
        LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
        ; Setup parameters for call to function _delay_ms
        ; Setup parameters for call to function _delay_ms
        MOV       R2,#0x1
        MOV       R3,#0x0
        LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        CLR       C
        MOVX      A,@DPTR
        RET
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiPicker133

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendPeriodicMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendFlashMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_UARTSend::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _UARTSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_UARTRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _UARTRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_delay_ms::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _delay_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??_delay_us::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    _delay_us

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??wait_for::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    wait_for

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??exit_send::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    exit_send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??WiFiRecv::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    WiFiRecv

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UART_1 INITIALIZED!\\r\\n">`:
        DB "UART_1 INITIALIZED!\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter AP Mode\\r\\n">`:
        DB "Enter AP Mode\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Enter STA Mode\\r\\n">`:
        DB "Enter STA Mode\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=2\\r\\n">`:
        DB "AT+CWMODE=2\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK\\r\\n">`:
        DB "OK\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ERROR\\r\\n">`:
        DB "ERROR\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
        DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=0\\r\\n">`:
        DB "AT+CIPMODE=0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=1\\r\\n">`:
        DB "AT+CIPMUX=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
        DB "AT+CIPSERVER=1,8266\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SSID">`:
        DB "SSID"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PSWD">`:
        DB "PSWD"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+RST\\r\\n">`:
        DB "AT+RST\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ready\\r\\n">`:
        DB "ready\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Read Flash Failed\\r\\n">`:
        DB "Read Flash Failed\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=1\\r\\n">`:
        DB "AT+CWMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">`:
        DB "AT+CWJAP=\"liuchen\",\"liuchen88\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "FAIL\\r\\n">`:
        DB "FAIL\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=0\\r\\n">`:
        DB "AT+CIPMUX=0\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMODE=1\\r\\n">`:
        DB "AT+CIPMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">`:
        DB "AT+CIPSTART=\"TCP\",\"192.168.1.109\",8000\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CLOSED\\r\\n">`:
        DB "CLOSED\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND\\r\\n">`:
        DB "AT+CIPSEND\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ">">`:
        DB ">"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "heart beat\\r\\n">`:
        DB "heart beat\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "received\\r\\n">`:
        DB "received\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "WIFI RESET\\r\\n">`:
        DB "WIFI RESET\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "I get data\\n">`:
        DB "I get data\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "\\n">`:
        DB "\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
        DB 48
        DB 49
        DB 50
        DB 51
        DB 52
        DB 53
        DB 54
        DB 55
        DB 56
        DB 57

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "+++">`:
        DB "+++"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ",CLOSED\\r\\n">`:
        DB ",CLOSED\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%d\\r\\n">`:
        DB "%d\015\012"

        END
// 
// 2 745 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//     1 byte  in segment SFR_AN
//   470 bytes in segment XDATA_ROM_C
//    53 bytes in segment XDATA_Z
// 
//    78 bytes of CODE     memory
//   470 bytes of CONST    memory
//     0 bytes of DATA     memory (+ 1 byte shared)
// 2 745 bytes of HUGECODE memory
//    53 bytes of XDATA    memory
//
//Errors: none
//Warnings: none
