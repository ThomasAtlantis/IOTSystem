###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               14/Jul/2019  16:36:13
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\uart_ext.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EW1694.tmp
#        (F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\uart_ext.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        LCD_SUPPORTED=FALSE -lC
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\uart_ext.lst
#    Object file        =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\uart_ext.r51
#
###############################################################################

F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\uart_ext.c
      1          #include "uart_ext.h"

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf8
   \   union <unnamed> volatile __sfr _A_U1CSR
   \                     _A_U1CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf9
   \   unsigned char volatile __sfr U1DBUF
   \                     U1DBUF:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfa
   \   unsigned char volatile __sfr U1BAUD
   \                     U1BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfb
   \   unsigned char volatile __sfr U1UCR
   \                     U1UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfc
   \   unsigned char volatile __sfr U1GCR
   \                     U1GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartISRCfg_t isrCfg
   \                     isrCfg:
   \   000000                DS 265
   \   000109                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTReadISR(uint8 *, uint16)
   \                     HalUARTReadISR:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   7800         MOV       R0,#0x0
   \   000007   7900         MOV       R1,#0x0
   \   000009   8027         SJMP      ??HalUARTReadISR_0
   \                     ??HalUARTReadISR_1:
   \   00000B   74..         MOV       A,#isrCfg & 0xff
   \   00000D   2E           ADD       A,R6
   \   00000E   F582         MOV       DPL,A
   \   000010   E4           CLR       A
   \   000011   34..         ADDC      A,#(isrCfg >> 8) & 0xff
   \   000013   F583         MOV       DPH,A
   \   000015   E0           MOVX      A,@DPTR
   \   000016   8A82         MOV       DPL,R2
   \   000018   8B83         MOV       DPH,R3
   \   00001A   F0           MOVX      @DPTR,A
   \   00001B   90....       MOV       DPTR,#isrCfg + 128
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   04           INC       A
   \   000020   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000023   C3           CLR       C
   \   000024   9480         SUBB      A,#-0x80
   \   000026   4005         JC        ??HalUARTReadISR_2
   \   000028   90....       MOV       DPTR,#isrCfg + 128
   \   00002B   E4           CLR       A
   \   00002C   F0           MOVX      @DPTR,A
   \                     ??HalUARTReadISR_2:
   \   00002D   08           INC       R0
   \   00002E   E8           MOV       A,R0
   \   00002F   7001         JNZ       ??HalUARTReadISR_0
   \   000031   09           INC       R1
   \                     ??HalUARTReadISR_0:
   \   000032   90....       MOV       DPTR,#isrCfg + 128
   \   000035   E0           MOVX      A,@DPTR
   \   000036   FE           MOV       R6,A
   \   000037   A3           INC       DPTR
   \   000038   E0           MOVX      A,@DPTR
   \   000039   6E           XRL       A,R6
   \   00003A   6007         JZ        ??HalUARTReadISR_3
   \   00003C   C3           CLR       C
   \   00003D   E8           MOV       A,R0
   \   00003E   9C           SUBB      A,R4
   \   00003F   E9           MOV       A,R1
   \   000040   9D           SUBB      A,R5
   \   000041   40C8         JC        ??HalUARTReadISR_1
   \                     ??HalUARTReadISR_3:
   \   000043   E8           MOV       A,R0
   \   000044   FA           MOV       R2,A
   \   000045   E9           MOV       A,R1
   \   000046   FB           MOV       R3,A
   \   000047                REQUIRE ?Subroutine0
   \   000047                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   8A82         MOV       DPL,R2
   \   000003   8B83         MOV       DPH,R3
   \   000005   A3           INC       DPTR
   \   000006   AA82         MOV       R2,DPL
   \   000008   AB83         MOV       R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant uint16 HalUARTWriteISR(uint8 *, uint16)
   \                     HalUARTWriteISR:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   90....       MOV       DPTR,#isrCfg + 260
   \   000008   12....       LCALL     ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000B   90....       MOV       DPTR,#isrCfg + 260
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F8           MOV       R0,A
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   FE           MOV       R6,A
   \   000013   E8           MOV       A,R0
   \   000014   5018         JNC       ??HalUARTWriteISR_0
   \   000016   C3           CLR       C
   \   000017   9E           SUBB      A,R6
   \   000018   F8           MOV       R0,A
   \   000019   95E0         SUBB      A,0xE0 /* A   */
   \   00001B   F9           MOV       R1,A
   \   00001C   E8           MOV       A,R0
   \   00001D   24FF         ADD       A,#-0x1
   \   00001F   18           DEC       R0
   \   000020   E9           MOV       A,R1
   \   000021   34FF         ADDC      A,#-0x1
   \   000023   F9           MOV       R1,A
   \   000024   E8           MOV       A,R0
   \   000025   49           ORL       A,R1
   \   000026   7018         JNZ       ??HalUARTWriteISR_1
   \                     ??HalUARTWriteISR_2:
   \   000028   7800         MOV       R0,#0x0
   \   00002A   7900         MOV       R1,#0x0
   \   00002C   8023         SJMP      ??HalUARTWriteISR_3
   \                     ??HalUARTWriteISR_0:
   \   00002E   C3           CLR       C
   \   00002F   9E           SUBB      A,R6
   \   000030   F8           MOV       R0,A
   \   000031   95E0         SUBB      A,0xE0 /* A   */
   \   000033   F9           MOV       R1,A
   \   000034   E8           MOV       A,R0
   \   000035   247F         ADD       A,#0x7f
   \   000037   5001         JNC       ??HalUARTWriteISR_4
   \   000039   09           INC       R1
   \                     ??HalUARTWriteISR_4:
   \   00003A   C3           CLR       C
   \   00003B   9C           SUBB      A,R4
   \   00003C   E9           MOV       A,R1
   \   00003D   9D           SUBB      A,R5
   \   00003E   50E8         JNC       ??HalUARTWriteISR_2
   \                     ??HalUARTWriteISR_1:
   \   000040   7A00         MOV       R2,#0x0
   \   000042   7B00         MOV       R3,#0x0
   \   000044   8042         SJMP      ??HalUARTWriteISR_5
   \                     ??HalUARTWriteISR_6:
   \   000046   E0           MOVX      A,@DPTR
   \   000047   04           INC       A
   \                     ??HalUARTWriteISR_7:
   \   000048   F0           MOVX      @DPTR,A
   \   000049   439A08       ORL       0x9a,#0x8
   \   00004C   08           INC       R0
   \   00004D   E8           MOV       A,R0
   \   00004E   7001         JNZ       ??HalUARTWriteISR_3
   \   000050   09           INC       R1
   \                     ??HalUARTWriteISR_3:
   \   000051   C3           CLR       C
   \   000052   E8           MOV       A,R0
   \   000053   9C           SUBB      A,R4
   \   000054   E9           MOV       A,R1
   \   000055   9D           SUBB      A,R5
   \   000056   502C         JNC       ??HalUARTWriteISR_8
   \   000058   8A82         MOV       DPL,R2
   \   00005A   8B83         MOV       DPH,R3
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   C0E0         PUSH      A
   \   00005F   90....       MOV       DPTR,#isrCfg + 261
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FE           MOV       R6,A
   \   000064   74..         MOV       A,#(isrCfg + 132) & 0xff
   \   000066   2E           ADD       A,R6
   \   000067   F582         MOV       DPL,A
   \   000069   E4           CLR       A
   \   00006A   34..         ADDC      A,#((isrCfg + 132) >> 8) & 0xff
   \   00006C   F583         MOV       DPH,A
   \   00006E   D0E0         POP       A
   \   000070   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000073   90....       MOV       DPTR,#isrCfg + 262
   \   000076   E4           CLR       A
   \   000077   F0           MOVX      @DPTR,A
   \   000078   90....       MOV       DPTR,#isrCfg + 261
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   C3           CLR       C
   \   00007D   947F         SUBB      A,#0x7f
   \   00007F   40C5         JC        ??HalUARTWriteISR_6
   \   000081   E4           CLR       A
   \   000082   80C4         SJMP      ??HalUARTWriteISR_7
   \                     ??HalUARTWriteISR_8:
   \   000084   E8           MOV       A,R0
   \   000085   FA           MOV       R2,A
   \   000086   E9           MOV       A,R1
   \   000087   FB           MOV       R3,A
   \                     ??HalUARTWriteISR_5:
   \   000088   02....       LJMP      ?Subroutine0 & 0xFFFF
   \   00008B                REQUIRE IEN2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   C3           CLR       C
   \   000005   98           SUBB      A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollISR(void)
   \                     HalUARTPollISR:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   90....       MOV       DPTR,#isrCfg + 263
   \   000007   E0           MOVX      A,@DPTR
   \   000008   F8           MOV       R0,A
   \   000009   A3           INC       DPTR
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   F9           MOV       R1,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   6077         JZ        ??HalUARTPollISR_0
   \   000010   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000013   4008         JC        ??HalUARTPollISR_1
   \   000015   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000018   F8           MOV       R0,A
   \   000019   95E0         SUBB      A,0xE0 /* A   */
   \   00001B   8006         SJMP      ??HalUARTPollISR_2
   \                     ??HalUARTPollISR_1:
   \   00001D   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000020   F8           MOV       R0,A
   \   000021   E4           CLR       A
   \   000022   39           ADDC      A,R1
   \                     ??HalUARTPollISR_2:
   \   000023   F9           MOV       R1,A
   \   000024   7A00         MOV       R2,#0x0
   \   000026   90....       MOV       DPTR,#isrCfg + 130
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6019         JZ        ??HalUARTPollISR_3
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   FB           MOV       R3,A
   \   00002F   E595         MOV       A,0x95
   \   000031   C3           CLR       C
   \   000032   9B           SUBB      A,R3
   \   000033   FB           MOV       R3,A
   \   000034   90....       MOV       DPTR,#isrCfg + 130
   \   000037   E0           MOVX      A,@DPTR
   \   000038   FC           MOV       R4,A
   \   000039   EB           MOV       A,R3
   \   00003A   C3           CLR       C
   \   00003B   9C           SUBB      A,R4
   \   00003C   5005         JNC       ??HalUARTPollISR_4
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   C3           CLR       C
   \   000040   9B           SUBB      A,R3
   \   000041   8001         SJMP      ??HalUARTPollISR_5
   \                     ??HalUARTPollISR_4:
   \   000043   E4           CLR       A
   \                     ??HalUARTPollISR_5:
   \   000044   F0           MOVX      @DPTR,A
   \                     ??HalUARTPollISR_3:
   \   000045   E595         MOV       A,0x95
   \   000047   A3           INC       DPTR
   \   000048   F0           MOVX      @DPTR,A
   \   000049   C3           CLR       C
   \   00004A   E8           MOV       A,R0
   \   00004B   947F         SUBB      A,#0x7f
   \   00004D   E9           MOV       A,R1
   \   00004E   9400         SUBB      A,#0x0
   \   000050   4004         JC        ??HalUARTPollISR_6
   \   000052   7A01         MOV       R2,#0x1
   \   000054   8019         SJMP      ??HalUARTPollISR_7
   \                     ??HalUARTPollISR_6:
   \   000056   C3           CLR       C
   \   000057   E8           MOV       A,R0
   \   000058   9430         SUBB      A,#0x30
   \   00005A   E9           MOV       A,R1
   \   00005B   9400         SUBB      A,#0x0
   \   00005D   4004         JC        ??HalUARTPollISR_8
   \   00005F   7A02         MOV       R2,#0x2
   \   000061   800C         SJMP      ??HalUARTPollISR_7
   \                     ??HalUARTPollISR_8:
   \   000063   E8           MOV       A,R0
   \   000064   49           ORL       A,R1
   \   000065   6008         JZ        ??HalUARTPollISR_7
   \   000067   90....       MOV       DPTR,#isrCfg + 130
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   7002         JNZ       ??HalUARTPollISR_7
   \   00006D   7A04         MOV       R2,#0x4
   \                     ??HalUARTPollISR_7:
   \   00006F   90....       MOV       DPTR,#isrCfg + 262
   \   000072   E0           MOVX      A,@DPTR
   \   000073   6006         JZ        ??HalUARTPollISR_9
   \   000075   E4           CLR       A
   \   000076   F0           MOVX      @DPTR,A
   \   000077   EA           MOV       A,R2
   \   000078   D2E4         SETB      0xE0 /* A   */.4
   \   00007A   FA           MOV       R2,A
   \                     ??HalUARTPollISR_9:
   \   00007B   EA           MOV       A,R2
   \   00007C   6009         JZ        ??HalUARTPollISR_0
   \   00007E                ; Setup parameters for indirect call
   \   00007E   79FF         MOV       R1,#-0x1
   \   000080   A3           INC       DPTR
   \   000081   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000084   12....       LCALL     ?CALL_IND
   \                     ??HalUARTPollISR_0:
   \   000087   02....       LJMP      ?Subroutine1 & 0xFFFF
   \   00008A                REQUIRE ST0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV       DPTR,#isrCfg + 128
   \   000003                REQUIRE ??Subroutine16_0
   \   000003                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F583         MOV       DPH,A
   \   000006   8882         MOV       DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   02....       LJMP      ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7480         MOV       A,#-0x80
   \   000002   C3           CLR       C
   \   000003   98           SUBB      A,R0
   \   000004   F8           MOV       R0,A
   \   000005   95E0         SUBB      A,0xE0 /* A   */
   \   000007   F9           MOV       R1,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   FA           MOV       R2,A
   \   00000A   E8           MOV       A,R0
   \   00000B   2A           ADD       A,R2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   90....       MOV       DPTR,#isrCfg + 128
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FA           MOV       R2,A
   \   000007   E8           MOV       A,R0
   \   000008   C3           CLR       C
   \   000009   9A           SUBB      A,R2
   \   00000A   22           RET

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart1RxIsr(void)
   \                     halUart1RxIsr:
   \   000000   C0E0         PUSH      A
   \   000002   C0D0         PUSH      PSW
   \   000004   E8           MOV       A,R0
   \   000005   C0E0         PUSH      A
   \   000007   E9           MOV       A,R1
   \   000008   C0E0         PUSH      A
   \   00000A   C082         PUSH      DPL
   \   00000C   C083         PUSH      DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   A8F9         MOV       R0,0xf9+0x0
   \   000010   E8           MOV       A,R0
   \   000011   C0E0         PUSH      A
   \   000013   90....       MOV       DPTR,#isrCfg + 129
   \   000016   E0           MOVX      A,@DPTR
   \   000017   F8           MOV       R0,A
   \   000018   74..         MOV       A,#isrCfg & 0xff
   \   00001A   28           ADD       A,R0
   \   00001B   F582         MOV       DPL,A
   \   00001D   E4           CLR       A
   \   00001E   34..         ADDC      A,#(isrCfg >> 8) & 0xff
   \   000020   F583         MOV       DPH,A
   \   000022   D0E0         POP       A
   \   000024   F0           MOVX      @DPTR,A
   \   000025   90....       MOV       DPTR,#isrCfg + 128
   \   000028   E0           MOVX      A,@DPTR
   \   000029   F8           MOV       R0,A
   \   00002A   A3           INC       DPTR
   \   00002B   E0           MOVX      A,@DPTR
   \   00002C   68           XRL       A,R0
   \   00002D   7006         JNZ       ??halUart1RxIsr_0
   \   00002F   E595         MOV       A,0x95
   \   000031   90....       MOV       DPTR,#isrCfg + 131
   \   000034   F0           MOVX      @DPTR,A
   \                     ??halUart1RxIsr_0:
   \   000035   90....       MOV       DPTR,#isrCfg + 129
   \   000038   E0           MOVX      A,@DPTR
   \   000039   04           INC       A
   \   00003A   F0           MOVX      @DPTR,A
   \   00003B   C3           CLR       C
   \   00003C   9480         SUBB      A,#-0x80
   \   00003E   4002         JC        ??halUart1RxIsr_1
   \   000040   E4           CLR       A
   \   000041   F0           MOVX      @DPTR,A
   \                     ??halUart1RxIsr_1:
   \   000042   A3           INC       DPTR
   \   000043   74C6         MOV       A,#-0x3a
   \   000045   F0           MOVX      @DPTR,A
   \   000046                REQUIRE ?Subroutine2
   \   000046                REQUIRE U1DBUF
   \   000046                REQUIRE ST0
   \   000046                ; // Fall through to label ?Subroutine2

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP       DPH
   \   000002   D082         POP       DPL
   \   000004   D0E0         POP       A
   \   000006   F9           MOV       R1,A
   \   000007   D0E0         POP       A
   \   000009   F8           MOV       R0,A
   \   00000A   D0D0         POP       PSW
   \   00000C   D0E0         POP       A
   \   00000E   32           RETI

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \   __near_func __xdata_reentrant __interrupt void halUart1TxIsr(void)
   \                     halUart1TxIsr:
   \   000000   C0E0         PUSH      A
   \   000002   C0D0         PUSH      PSW
   \   000004   E8           MOV       A,R0
   \   000005   C0E0         PUSH      A
   \   000007   E9           MOV       A,R1
   \   000008   C0E0         PUSH      A
   \   00000A   C082         PUSH      DPL
   \   00000C   C083         PUSH      DPH
   \   00000E                ; Saved register size: 6
   \   00000E                ; Auto size: 0
   \   00000E   90....       MOV       DPTR,#isrCfg + 260
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F8           MOV       R0,A
   \   000013   A3           INC       DPTR
   \   000014   E0           MOVX      A,@DPTR
   \   000015   68           XRL       A,R0
   \   000016   7008         JNZ       ??halUart1TxIsr_0
   \   000018   539AF7       ANL       0x9a,#0xf7
   \   00001B   A3           INC       DPTR
   \   00001C   7401         MOV       A,#0x1
   \   00001E   8022         SJMP      ??halUart1TxIsr_1
   \                     ??halUart1TxIsr_0:
   \   000020   C2EA         CLR       0xe8.2
   \   000022   90....       MOV       DPTR,#isrCfg + 260
   \   000025   E0           MOVX      A,@DPTR
   \   000026   F8           MOV       R0,A
   \   000027   7401         MOV       A,#0x1
   \   000029   28           ADD       A,R0
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   74..         MOV       A,#(isrCfg + 132) & 0xff
   \   00002D   28           ADD       A,R0
   \   00002E   F582         MOV       DPL,A
   \   000030   E4           CLR       A
   \   000031   34..         ADDC      A,#((isrCfg + 132) >> 8) & 0xff
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   F5F9         MOV       0xf9,A
   \   000038   90....       MOV       DPTR,#isrCfg + 260
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   C3           CLR       C
   \   00003D   9480         SUBB      A,#-0x80
   \   00003F   4002         JC        ??halUart1TxIsr_2
   \   000041   E4           CLR       A
   \                     ??halUart1TxIsr_1:
   \   000042   F0           MOVX      @DPTR,A
   \                     ??halUart1TxIsr_2:
   \   000043   80..         SJMP      ?Subroutine2
   \   000045                REQUIRE IEN2
   \   000045                REQUIRE _A_IRCON2
   \   000045                REQUIRE U1DBUF
      2          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      3          byte App_TaskID_Ext;
   \                     App_TaskID_Ext:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      4          uint8  stateExt;
   \                     stateExt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      5          uint8  CMD_Token_Ext[2];
   \                     CMD_Token_Ext:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      6          uint8  LEN_Token_Ext;
   \                     LEN_Token_Ext:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      7          uint8  FSC_Token_Ext;
   \                     FSC_Token_Ext:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          mtOSALSerialDataExt_t  *pMsgExt;
   \                     pMsgExt:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          uint8  tempDataLenExt;
   \                     tempDataLenExt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     10          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     11          void MT_UartInit_Ext ( void ) {
   \                     MT_UartInit_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV       A,#-0x1d
   \   000006   12....       LCALL     ?ALLOC_XSTACK8
     12            halUARTCfg_t uartConfig;
     13            App_TaskID_Ext = 0;
   \   000009   90....       MOV       DPTR,#App_TaskID_Ext
   \   00000C   E4           CLR       A
   \   00000D   F0           MOVX      @DPTR,A
     14            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   04           INC       A
   \   000015   F0           MOVX      @DPTR,A
     15            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE_EXT;
   \   000016   12....       LCALL     ?XSTACK_DISP0_8
   \   000019   7404         MOV       A,#0x4
   \   00001B   F0           MOVX      @DPTR,A
     16            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW_EXT;
   \   00001C   7402         MOV       A,#0x2
   \   00001E   12....       LCALL     ?XSTACK_DISP0_8
   \   000021   E4           CLR       A
   \   000022   F0           MOVX      @DPTR,A
     17            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD_EXT;
   \   000023   7403         MOV       A,#0x3
   \   000025   12....       LCALL     ?XSTACK_DISP0_8
   \   000028   7440         MOV       A,#0x40
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   E4           CLR       A
   \   00002D   F0           MOVX      @DPTR,A
     18            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF_EXT;
   \   00002E   740A         MOV       A,#0xa
   \   000030   12....       LCALL     ?XSTACK_DISP0_8
   \   000033   7480         MOV       A,#-0x80
   \   000035   F0           MOVX      @DPTR,A
   \   000036   A3           INC       DPTR
   \   000037   E4           CLR       A
   \   000038   F0           MOVX      @DPTR,A
     19            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF_EXT;
   \   000039   7412         MOV       A,#0x12
   \   00003B   12....       LCALL     ?XSTACK_DISP0_8
   \   00003E   7480         MOV       A,#-0x80
   \   000040   F0           MOVX      @DPTR,A
   \   000041   A3           INC       DPTR
   \   000042   E4           CLR       A
   \   000043   F0           MOVX      @DPTR,A
     20            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT_EXT;
   \   000044   7405         MOV       A,#0x5
   \   000046   12....       LCALL     ?XSTACK_DISP0_8
   \   000049   7406         MOV       A,#0x6
   \   00004B   F0           MOVX      @DPTR,A
     21            uartConfig.intEnable            = TRUE;
   \   00004C   7416         MOV       A,#0x16
   \   00004E   12....       LCALL     ?XSTACK_DISP0_8
   \   000051   7401         MOV       A,#0x1
   \   000053   F0           MOVX      @DPTR,A
     22            uartConfig.callBackFunc         = NULL;
   \   000054   741B         MOV       A,#0x1b
   \   000056   12....       LCALL     ?XSTACK_DISP0_8
   \   000059   E4           CLR       A
   \   00005A   F0           MOVX      @DPTR,A
   \   00005B   A3           INC       DPTR
   \   00005C   F0           MOVX      @DPTR,A
     23            HalUARTOpen_Ext (&uartConfig);
   \   00005D                ; Setup parameters for call to function HalUARTOpen_Ext
   \   00005D   AA..         MOV       R2,?XSP + 0
   \   00005F   AB..         MOV       R3,?XSP + 1
   \   000061   12....       LCALL     `??HalUARTOpen_Ext::?relay`; Banked call to: HalUARTOpen_Ext
     24          }
   \   000064   741D         MOV       A,#0x1d
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
   \   000069   02....       LJMP      ?Subroutine1 & 0xFFFF
     25          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     26          void MT_UartRegisterTaskID_Ext( byte taskID ) {
   \                     MT_UartRegisterTaskID_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     27            App_TaskID_Ext = taskID;
   \   000004   E9           MOV       A,R1
   \   000005   90....       MOV       DPTR,#App_TaskID_Ext
   \   000008   F0           MOVX      @DPTR,A
     28          }
   \   000009   02....       LJMP      ?Subroutine1 & 0xFFFF
     29          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     30          byte MT_UartCalcFCS_Ext( uint8 *msg_ptr, uint8 len ) {
   \                     MT_UartCalcFCS_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV       A,R1
   \   000005   FC           MOV       R4,A
     31            byte x;
     32            byte xorResult;
     33          
     34            xorResult = 0;
   \   000006   7900         MOV       R1,#0x0
     35          
     36            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV       R0,#0x0
   \   00000A   800E         SJMP      ??MT_UartCalcFCS_Ext_0
     37              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_Ext_1:
   \   00000C   8A82         MOV       DPL,R2
   \   00000E   8B83         MOV       DPH,R3
   \   000010   E0           MOVX      A,@DPTR
   \   000011   C9           XCH       A,R1
   \   000012   69           XRL       A,R1
   \   000013   F9           MOV       R1,A
   \   000014   08           INC       R0
   \   000015   A3           INC       DPTR
   \   000016   AA82         MOV       R2,DPL
   \   000018   AB83         MOV       R3,DPH
   \                     ??MT_UartCalcFCS_Ext_0:
   \   00001A   E8           MOV       A,R0
   \   00001B   C3           CLR       C
   \   00001C   9C           SUBB      A,R4
   \   00001D   40ED         JC        ??MT_UartCalcFCS_Ext_1
     38          
     39            return ( xorResult );
   \   00001F   02....       LJMP      ?Subroutine1 & 0xFFFF
     40          }
     41          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     42          void MT_UartProcessZToolData_Ext( uint8 port, uint8 event ) {
   \                     MT_UartProcessZToolData_Ext:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
     43            uint8  ch;
     44            uint8  bytesInRxBuffer;
     45            
     46            (void)event;  // Intentionally unreferenced parameter
   \   00000C   8029         SJMP      ??MT_UartProcessZToolData_Ext_0
     47          
     48            while (Hal_UART_RxBufLen(port))
     49            {
     50              HalUARTRead (port, &ch, 1);
     51          
     52              switch (stateExt)
     53              {
     54                case SOP_STATE_EXT:
     55                  if (ch == MT_UART_SOF_EXT)
     56                    stateExt = LEN_STATE_EXT;
     57                  break;
     58          
     59                case LEN_STATE_EXT:
     60                  LEN_Token_Ext = ch;
     61          
     62                  tempDataLenExt = 0;
     63          
     64                  /* Allocate memory for the data */
     65                  pMsgExt = (mtOSALSerialDataExt_t *)osal_msg_allocate( sizeof ( mtOSALSerialDataExt_t ) +
     66                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token_Ext );
     67          
     68                  if (pMsgExt)
     69                  {
     70                    /* Fill up what we can */
     71                    pMsgExt->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_Ext_1:
   \   00000E   E0           MOVX      A,@DPTR
   \   00000F   F583         MOV       DPH,A
   \   000011   8A82         MOV       DPL,R2
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
     72                    pMsgExt->msg = (uint8*)(pMsgExt+1);
   \   000016   90....       MOV       DPTR,#pMsgExt
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   2404         ADD       A,#0x4
   \   00001C   F8           MOV       R0,A
   \   00001D   A3           INC       DPTR
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   3400         ADDC      A,#0x0
   \   000021   F9           MOV       R1,A
   \   000022   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000025   E8           MOV       A,R0
   \   000026   F0           MOVX      @DPTR,A
   \   000027   A3           INC       DPTR
   \   000028   E9           MOV       A,R1
   \   000029   12....       LCALL     ?Subroutine10 & 0xFFFF
     73                    pMsgExt->msg[MT_RPC_POS_LEN] = LEN_Token_Ext;
   \                     ??CrossCallReturnLabel_12:
   \   00002C   8882         MOV       DPL,R0
   \   00002E   8983         MOV       DPH,R1
   \   000030   F0           MOVX      @DPTR,A
     74                    stateExt = CMD_STATE1_EXT;
   \   000031   90....       MOV       DPTR,#stateExt
   \   000034   7401         MOV       A,#0x1
   \                     ??MT_UartProcessZToolData_Ext_2:
   \   000036   F0           MOVX      @DPTR,A
     75                  }
     76                  else
     77                  {
     78                    stateExt = SOP_STATE_EXT;
     79                    return;
     80                  }
     81                  break;
   \                     ??MT_UartProcessZToolData_Ext_0:
   \   000037                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000037   EE           MOV       A,R6
   \   000038   F9           MOV       R1,A
   \   000039   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   00003C   EA           MOV       A,R2
   \   00003D   4B           ORL       A,R3
   \   00003E   7003         JNZ       $+5
   \   000040   02....       LJMP      ??MT_UartProcessZToolData_Ext_3 & 0xFFFF
   \   000043                ; Setup parameters for call to function HalUARTRead
   \   000043   7C01         MOV       R4,#0x1
   \   000045   7D00         MOV       R5,#0x0
   \   000047   AA..         MOV       R2,?XSP + 0
   \   000049   AB..         MOV       R3,?XSP + 1
   \   00004B   EE           MOV       A,R6
   \   00004C   F9           MOV       R1,A
   \   00004D   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000050   90....       MOV       DPTR,#stateExt
   \   000053   E0           MOVX      A,@DPTR
   \   000054   6017         JZ        ??MT_UartProcessZToolData_Ext_4
   \   000056   14           DEC       A
   \   000057   605A         JZ        ??MT_UartProcessZToolData_Ext_5
   \   000059   14           DEC       A
   \   00005A   606E         JZ        ??MT_UartProcessZToolData_Ext_6
   \   00005C   14           DEC       A
   \   00005D   6020         JZ        ??MT_UartProcessZToolData_Ext_7
   \   00005F   14           DEC       A
   \   000060   7003         JNZ       $+5
   \   000062   02....       LJMP      ??MT_UartProcessZToolData_Ext_8 & 0xFFFF
   \   000065   14           DEC       A
   \   000066   7003         JNZ       $+5
   \   000068   02....       LJMP      ??MT_UartProcessZToolData_Ext_9 & 0xFFFF
   \   00006B   80CA         SJMP      ??MT_UartProcessZToolData_Ext_0
   \                     ??MT_UartProcessZToolData_Ext_4:
   \   00006D   85..82       MOV       DPL,?XSP + 0
   \   000070   85..83       MOV       DPH,?XSP + 1
   \   000073   E0           MOVX      A,@DPTR
   \   000074   64FE         XRL       A,#0xfe
   \   000076   70BF         JNZ       ??MT_UartProcessZToolData_Ext_0
   \   000078   90....       MOV       DPTR,#stateExt
   \   00007B   7403         MOV       A,#0x3
   \   00007D   80B7         SJMP      ??MT_UartProcessZToolData_Ext_2
   \                     ??MT_UartProcessZToolData_Ext_7:
   \   00007F   85..82       MOV       DPL,?XSP + 0
   \   000082   85..83       MOV       DPH,?XSP + 1
   \   000085   E0           MOVX      A,@DPTR
   \   000086   90....       MOV       DPTR,#LEN_Token_Ext
   \   000089   F0           MOVX      @DPTR,A
   \   00008A   90....       MOV       DPTR,#tempDataLenExt
   \   00008D   E4           CLR       A
   \   00008E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000091   2407         ADD       A,#0x7
   \   000093   FA           MOV       R2,A
   \   000094   E4           CLR       A
   \   000095   3400         ADDC      A,#0x0
   \   000097   FB           MOV       R3,A
   \   000098   12....       LCALL     `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00009B   90....       MOV       DPTR,#pMsgExt
   \   00009E   EA           MOV       A,R2
   \   00009F   F0           MOVX      @DPTR,A
   \   0000A0   A3           INC       DPTR
   \   0000A1   EB           MOV       A,R3
   \   0000A2   F0           MOVX      @DPTR,A
   \   0000A3   F9           MOV       R1,A
   \   0000A4   EA           MOV       A,R2
   \   0000A5   49           ORL       A,R1
   \   0000A6   6003         JZ        $+5
   \   0000A8   02....       LJMP      ??MT_UartProcessZToolData_Ext_1 & 0xFFFF
   \   0000AB   90....       MOV       DPTR,#stateExt
   \   0000AE   E4           CLR       A
   \   0000AF   F0           MOVX      @DPTR,A
   \   0000B0   02....       LJMP      ??MT_UartProcessZToolData_Ext_3 & 0xFFFF
     82          
     83                case CMD_STATE1_EXT:
     84                  pMsgExt->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_Ext_5:
   \   0000B3   85..82       MOV       DPL,?XSP + 0
   \   0000B6   85..83       MOV       DPH,?XSP + 1
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   C0E0         PUSH      A
   \   0000BC   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000BF   D0E0         POP       A
   \   0000C1   F0           MOVX      @DPTR,A
     85                  stateExt = CMD_STATE2_EXT;
   \   0000C2   90....       MOV       DPTR,#stateExt
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   02....       LJMP      ??MT_UartProcessZToolData_Ext_2 & 0xFFFF
     86                  break;
     87          
     88                case CMD_STATE2_EXT:
     89                  pMsgExt->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_Ext_6:
   \   0000CA   85..82       MOV       DPL,?XSP + 0
   \   0000CD   85..83       MOV       DPH,?XSP + 1
   \   0000D0   E0           MOVX      A,@DPTR
   \   0000D1   C0E0         PUSH      A
   \   0000D3   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000D6   A3           INC       DPTR
   \   0000D7   D0E0         POP       A
   \   0000D9   12....       LCALL     ?Subroutine10 & 0xFFFF
     90                  /* If there is no data, skip to FCS stateExt */
     91                  if (LEN_Token_Ext)
   \                     ??CrossCallReturnLabel_14:
   \   0000DC   607F         JZ        ??MT_UartProcessZToolData_Ext_10
     92                  {
     93                    stateExt = DATA_STATE_EXT;
   \   0000DE   90....       MOV       DPTR,#stateExt
   \   0000E1   7404         MOV       A,#0x4
   \   0000E3   02....       LJMP      ??MT_UartProcessZToolData_Ext_2 & 0xFFFF
     94                  }
     95                  else
     96                  {
     97                    stateExt = FCS_STATE_EXT;
     98                  }
     99                  break;
    100          
    101                case DATA_STATE_EXT:
    102          
    103                  /* Fill in the buffer the first byte of the data */
    104                  pMsgExt->msg[MT_RPC_FRAME_HDR_SZ + tempDataLenExt++] = ch;
   \                     ??MT_UartProcessZToolData_Ext_8:
   \   0000E6   85..82       MOV       DPL,?XSP + 0
   \   0000E9   85..83       MOV       DPH,?XSP + 1
   \   0000EC   E0           MOVX      A,@DPTR
   \   0000ED   C0E0         PUSH      A
   \   0000EF   90....       MOV       DPTR,#tempDataLenExt
   \   0000F2   E0           MOVX      A,@DPTR
   \   0000F3   F8           MOV       R0,A
   \   0000F4   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000F7   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000FA   D0E0         POP       A
   \   0000FC   F0           MOVX      @DPTR,A
   \   0000FD   90....       MOV       DPTR,#tempDataLenExt
   \   000100   E0           MOVX      A,@DPTR
   \   000101   04           INC       A
   \   000102   F0           MOVX      @DPTR,A
    105          
    106                  /* Check number of bytes left in the Rx buffer */
    107                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   000103                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000103   EE           MOV       A,R6
   \   000104   F9           MOV       R1,A
   \   000105   12....       LCALL     `??Hal_UART_RxBufLen::?relay`; Banked call to: Hal_UART_RxBufLen
   \   000108   EA           MOV       A,R2
   \   000109   FF           MOV       R7,A
    108          
    109                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    110                  if (bytesInRxBuffer <= LEN_Token_Ext - tempDataLenExt)
   \   00010A   90....       MOV       DPTR,#LEN_Token_Ext
   \   00010D   E0           MOVX      A,@DPTR
   \   00010E   F8           MOV       R0,A
   \   00010F   90....       MOV       DPTR,#tempDataLenExt
   \   000112   E0           MOVX      A,@DPTR
   \   000113   FA           MOV       R2,A
   \   000114   E8           MOV       A,R0
   \   000115   C3           CLR       C
   \   000116   9A           SUBB      A,R2
   \   000117   F8           MOV       R0,A
   \   000118   95E0         SUBB      A,0xE0 /* A   */
   \   00011A   F9           MOV       R1,A
   \   00011B   EF           MOV       A,R7
   \   00011C   FA           MOV       R2,A
   \   00011D   C3           CLR       C
   \   00011E   E8           MOV       A,R0
   \   00011F   9A           SUBB      A,R2
   \   000120   E9           MOV       A,R1
   \   000121   9400         SUBB      A,#0x0
   \   000123   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000125   65D0         XRL       A,PSW
   \   000127   33           RLC       A
   \   000128   4010         JC        ??MT_UartProcessZToolData_Ext_11
    111                  {
    112                    HalUARTRead (port, &pMsgExt->msg[MT_RPC_FRAME_HDR_SZ + tempDataLenExt], bytesInRxBuffer);
   \   00012A                ; Setup parameters for call to function HalUARTRead
   \   00012A   EF           MOV       A,R7
   \   00012B   FC           MOV       R4,A
   \   00012C   7D00         MOV       R5,#0x0
   \   00012E   E0           MOVX      A,@DPTR
   \   00012F   F8           MOV       R0,A
   \   000130   12....       LCALL     ?Subroutine3 & 0xFFFF
    113                    tempDataLenExt += bytesInRxBuffer;
   \                     ??CrossCallReturnLabel_0:
   \   000133   90....       MOV       DPTR,#tempDataLenExt
   \   000136   E0           MOVX      A,@DPTR
   \   000137   2F           ADD       A,R7
   \   000138   8016         SJMP      ??MT_UartProcessZToolData_Ext_12
    114                  }
    115                  else
    116                  {
    117                    HalUARTRead (port, &pMsgExt->msg[MT_RPC_FRAME_HDR_SZ + tempDataLenExt], LEN_Token_Ext - tempDataLenExt);
   \                     ??MT_UartProcessZToolData_Ext_11:
   \   00013A   E0           MOVX      A,@DPTR
   \   00013B   F8           MOV       R0,A
   \   00013C                ; Setup parameters for call to function HalUARTRead
   \   00013C   90....       MOV       DPTR,#LEN_Token_Ext
   \   00013F   E0           MOVX      A,@DPTR
   \   000140   C3           CLR       C
   \   000141   98           SUBB      A,R0
   \   000142   FC           MOV       R4,A
   \   000143   95E0         SUBB      A,0xE0 /* A   */
   \   000145   FD           MOV       R5,A
   \   000146   12....       LCALL     ?Subroutine3 & 0xFFFF
    118                    tempDataLenExt += (LEN_Token_Ext - tempDataLenExt);
   \                     ??CrossCallReturnLabel_1:
   \   000149   90....       MOV       DPTR,#LEN_Token_Ext
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   90....       MOV       DPTR,#tempDataLenExt
   \                     ??MT_UartProcessZToolData_Ext_12:
   \   000150   F0           MOVX      @DPTR,A
    119                  }
    120          
    121                  /* If number of bytes read is equal to data length, time to move on to FCS */
    122                  if ( tempDataLenExt == LEN_Token_Ext )
   \   000151   E0           MOVX      A,@DPTR
   \   000152   F8           MOV       R0,A
   \   000153   90....       MOV       DPTR,#LEN_Token_Ext
   \   000156   E0           MOVX      A,@DPTR
   \   000157   68           XRL       A,R0
   \   000158   6003         JZ        $+5
   \   00015A   02....       LJMP      ??MT_UartProcessZToolData_Ext_0 & 0xFFFF
    123                      stateExt = FCS_STATE_EXT;
   \                     ??MT_UartProcessZToolData_Ext_10:
   \   00015D   90....       MOV       DPTR,#stateExt
   \   000160   7405         MOV       A,#0x5
   \   000162   02....       LJMP      ??MT_UartProcessZToolData_Ext_2 & 0xFFFF
    124          
    125                  break;
    126          
    127                case FCS_STATE_EXT:
    128          
    129                  FSC_Token_Ext = ch;
   \                     ??MT_UartProcessZToolData_Ext_9:
   \   000165   85..82       MOV       DPL,?XSP + 0
   \   000168   85..83       MOV       DPH,?XSP + 1
   \   00016B   E0           MOVX      A,@DPTR
   \   00016C   90....       MOV       DPTR,#FSC_Token_Ext
   \   00016F   12....       LCALL     ?Subroutine10 & 0xFFFF
    130          
    131                  /* Make sure it's correct */
    132                  if ((MT_UartCalcFCS_Ext ((uint8*)&pMsgExt->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token_Ext) == FSC_Token_Ext))
   \                     ??CrossCallReturnLabel_15:
   \   000172   2403         ADD       A,#0x3
   \   000174   F9           MOV       R1,A
   \   000175   90....       MOV       DPTR,#pMsgExt
   \   000178   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00017B   A3           INC       DPTR
   \   00017C   A3           INC       DPTR
   \   00017D   E0           MOVX      A,@DPTR
   \   00017E   FA           MOV       R2,A
   \   00017F   A3           INC       DPTR
   \   000180   E0           MOVX      A,@DPTR
   \   000181   FB           MOV       R3,A
   \   000182   12....       LCALL     `??MT_UartCalcFCS_Ext::?relay`; Banked call to: MT_UartCalcFCS_Ext
   \   000185   E9           MOV       A,R1
   \   000186   F8           MOV       R0,A
   \   000187   90....       MOV       DPTR,#FSC_Token_Ext
   \   00018A   E0           MOVX      A,@DPTR
   \   00018B   68           XRL       A,R0
   \   00018C   90....       MOV       DPTR,#pMsgExt
   \   00018F   700F         JNZ       ??MT_UartProcessZToolData_Ext_13
    133                  {
    134                    osal_msg_send( App_TaskID_Ext, (byte *)pMsgExt );
   \   000191                ; Setup parameters for call to function osal_msg_send
   \   000191   E0           MOVX      A,@DPTR
   \   000192   FA           MOV       R2,A
   \   000193   A3           INC       DPTR
   \   000194   E0           MOVX      A,@DPTR
   \   000195   FB           MOV       R3,A
   \   000196   90....       MOV       DPTR,#App_TaskID_Ext
   \   000199   E0           MOVX      A,@DPTR
   \   00019A   F9           MOV       R1,A
   \   00019B   12....       LCALL     `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00019E   8008         SJMP      ??MT_UartProcessZToolData_Ext_14
    135                  }
    136                  else
    137                  {
    138                    /* deallocate the msg */
    139                    osal_msg_deallocate ( (uint8 *)pMsgExt );
   \                     ??MT_UartProcessZToolData_Ext_13:
   \   0001A0                ; Setup parameters for call to function osal_msg_deallocate
   \   0001A0   E0           MOVX      A,@DPTR
   \   0001A1   FA           MOV       R2,A
   \   0001A2   A3           INC       DPTR
   \   0001A3   E0           MOVX      A,@DPTR
   \   0001A4   FB           MOV       R3,A
   \   0001A5   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    140                  }
    141          
    142                  /* Reset the stateExt, send or discard the buffers at this point */
    143                  stateExt = SOP_STATE_EXT;
   \                     ??MT_UartProcessZToolData_Ext_14:
   \   0001A8   90....       MOV       DPTR,#stateExt
   \   0001AB   E4           CLR       A
   \   0001AC   02....       LJMP      ??MT_UartProcessZToolData_Ext_2 & 0xFFFF
    144          
    145                  break;
    146          
    147                default:
    148                 break;
    149              }
    150            }
    151          }
   \                     ??MT_UartProcessZToolData_Ext_3:
   \   0001AF   7401         MOV       A,#0x1
   \   0001B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001B4   7F02         MOV       R7,#0x2
   \   0001B6   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_allocate
   \   000001                ; Setup parameters for call to function MT_UartCalcFCS_Ext
   \   000001   90....       MOV       DPTR,#LEN_Token_Ext
   \   000004   E0           MOVX      A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV       DPTR,#pMsgExt
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FA           MOV       R2,A
   \   000005   A3           INC       DPTR
   \   000006   E0           MOVX      A,@DPTR
   \   000007   F583         MOV       DPH,A
   \   000009   8A82         MOV       DPL,R2
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV       DPTR,#pMsgExt
   \   000003   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000006   A3           INC       DPTR
   \   000007   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   A3           INC       DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000006   AA82         MOV       R2,DPL
   \   000008   AB83         MOV       R3,DPH
   \   00000A   EE           MOV       A,R6
   \   00000B   F9           MOV       R1,A
   \   00000C   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   28           ADD       A,R0
   \   000002   FA           MOV       R2,A
   \   000003   A3           INC       DPTR
   \   000004   E0           MOVX      A,@DPTR
   \   000005   3400         ADDC      A,#0x0
   \   000007   8A82         MOV       DPL,R2
   \   000009   F583         MOV       DPH,A
   \   00000B   A3           INC       DPTR
   \   00000C   A3           INC       DPTR
   \   00000D   A3           INC       DPTR
   \   00000E   22           RET
    152          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void HalUARTInit_Ext(void) {
   \                     HalUARTInit_Ext:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    154            HalUARTInitISR();
   \   000000   53FF3F       ANL       0xff,#0x3f
   \   000003   85FFFF       MOV       0xff,0xff
   \   000006   43F102       ORL       0xf1,#0x2
   \   000009   43F4C0       ORL       0xf4,#0xc0
   \   00000C   53F23F       ANL       0xf2,#0x3f
   \   00000F   75F880       MOV       0xf8,#-0x80
   \   000012   75FB80       MOV       0xfb,#-0x80
    155          }
   \   000015   02....       LJMP      ?BRET
   \   000018                REQUIRE P2DIR
   \   000018                REQUIRE PERCFG
   \   000018                REQUIRE P1SEL
   \   000018                REQUIRE ADCCFG
   \   000018                REQUIRE _A_U1CSR
   \   000018                REQUIRE U1UCR
    156          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          uint8 HalUARTOpen_Ext(halUARTCfg_t *config) {
   \                     HalUARTOpen_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    158            HalUARTOpenISR(config);
   \   000004   EA           MOV       A,R2
   \   000005   241B         ADD       A,#0x1b
   \   000007   F582         MOV       DPL,A
   \   000009   E4           CLR       A
   \   00000A   3B           ADDC      A,R3
   \   00000B   F583         MOV       DPH,A
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   F8           MOV       R0,A
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   F9           MOV       R1,A
   \   000012   90....       MOV       DPTR,#isrCfg + 263
   \   000015   E8           MOV       A,R0
   \   000016   F0           MOVX      @DPTR,A
   \   000017   A3           INC       DPTR
   \   000018   E9           MOV       A,R1
   \   000019   F0           MOVX      @DPTR,A
   \   00001A   8A82         MOV       DPL,R2
   \   00001C   8B83         MOV       DPH,R3
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   6403         XRL       A,#0x3
   \   000022   600F         JZ        ??HalUARTOpen_Ext_0
   \   000024   8A82         MOV       DPL,R2
   \   000026   8B83         MOV       DPH,R3
   \   000028   A3           INC       DPTR
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   6404         XRL       A,#0x4
   \   00002C   6005         JZ        ??HalUARTOpen_Ext_0
   \   00002E   75FA3B       MOV       0xfa,#0x3b
   \   000031   8003         SJMP      ??HalUARTOpen_Ext_1
   \                     ??HalUARTOpen_Ext_0:
   \   000033   75FAD8       MOV       0xfa,#-0x28
   \                     ??HalUARTOpen_Ext_1:
   \   000036   8A82         MOV       DPL,R2
   \   000038   8B83         MOV       DPH,R3
   \   00003A   A3           INC       DPTR
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   6013         JZ        ??HalUARTOpen_Ext_2
   \   00003E   14           DEC       A
   \   00003F   600B         JZ        ??HalUARTOpen_Ext_3
   \   000041   14           DEC       A
   \   000042   6003         JZ        ??HalUARTOpen_Ext_4
   \   000044   14           DEC       A
   \   000045   700F         JNZ       ??HalUARTOpen_Ext_5
   \                     ??HalUARTOpen_Ext_4:
   \   000047   75FC0A       MOV       0xfc,#0xa
   \   00004A   800D         SJMP      ??HalUARTOpen_Ext_6
   \                     ??HalUARTOpen_Ext_3:
   \   00004C   75FC09       MOV       0xfc,#0x9
   \   00004F   8008         SJMP      ??HalUARTOpen_Ext_6
   \                     ??HalUARTOpen_Ext_2:
   \   000051   75FC08       MOV       0xfc,#0x8
   \   000054   8003         SJMP      ??HalUARTOpen_Ext_6
   \                     ??HalUARTOpen_Ext_5:
   \   000056   75FC0B       MOV       0xfc,#0xb
   \                     ??HalUARTOpen_Ext_6:
   \   000059   8A82         MOV       DPL,R2
   \   00005B   8B83         MOV       DPH,R3
   \   00005D   A3           INC       DPTR
   \   00005E   A3           INC       DPTR
   \   00005F   E0           MOVX      A,@DPTR
   \   000060   6008         JZ        ??HalUARTOpen_Ext_7
   \   000062   75FB42       MOV       0xfb,#0x42
   \   000065   43F430       ORL       0xf4,#0x30
   \   000068   8003         SJMP      ??HalUARTOpen_Ext_8
   \                     ??HalUARTOpen_Ext_7:
   \   00006A   75FB02       MOV       0xfb,#0x2
   \                     ??HalUARTOpen_Ext_8:
   \   00006D   D2FE         SETB      0xf8.6
   \   00006F   D2AB         SETB      0xa8.3
   \   000071   D2EA         SETB      0xe8.2
    159            return HAL_UART_SUCCESS_EXT;
   \   000073   7900         MOV       R1,#0x0
   \   000075                REQUIRE ?Subroutine1
   \   000075                REQUIRE U1BAUD
   \   000075                REQUIRE U1GCR
   \   000075                REQUIRE U1UCR
   \   000075                REQUIRE P1SEL
   \   000075                REQUIRE _A_U1CSR
   \   000075                REQUIRE _A_IEN0
   \   000075                REQUIRE _A_IRCON2
   \   000075                ; // Fall through to label ?Subroutine1
    160          }
    161          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          uint16 HalUARTRead_Ext(uint8 *buf, uint16 len) {
   \                     HalUARTRead_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    163            return HalUARTReadISR(buf, len);
   \   000004                ; Setup parameters for call to function HalUARTReadISR
   \   000004   12....       LCALL     `??HalUARTReadISR::?relay`; Banked call to: HalUARTReadISR
   \   000007   80..         SJMP      ?Subroutine1
    164          }
    165          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          uint16 HalUARTWrite_Ext(uint8 *buf, uint16 len) {
   \                     HalUARTWrite_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    167            return HalUARTWriteISR(buf, len);
   \   000004                ; Setup parameters for call to function HalUARTWriteISR
   \   000004   12....       LCALL     `??HalUARTWriteISR::?relay`; Banked call to: HalUARTWriteISR
   \   000007   80..         SJMP      ?Subroutine1
    168          }
    169          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          void HalUARTSuspend_Ext( void ) {
   \                     HalUARTSuspend_Ext:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    171            HalUARTSuspendISR();
   \   000000   C2FE         CLR       0xf8.6
    172          }
   \   000002   02....       LJMP      ?BRET
   \   000005                REQUIRE _A_U1CSR
    173          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          void HalUARTResume_Ext( void ) {
   \                     HalUARTResume_Ext:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    175            HalUARTResumeISR();
   \   000000   43FB80       ORL       0xfb,#0x80
   \   000003   D2FE         SETB      0xf8.6
    176          }
   \   000005   02....       LJMP      ?BRET
   \   000008                REQUIRE U1UCR
   \   000008                REQUIRE _A_U1CSR
    177          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void HalUARTPoll_Ext( void ) {
   \                     HalUARTPoll_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    179            HalUARTPollISR();
   \   000004                ; Setup parameters for call to function HalUARTPollISR
   \   000004   12....       LCALL     `??HalUARTPollISR::?relay`; Banked call to: HalUARTPollISR
    180          }
   \   000007   80..         SJMP      ?Subroutine1
    181          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          uint16 Hal_UART_RxBufLen_Ext( void ) {
   \                     Hal_UART_RxBufLen_Ext:
   \   000000   C082         PUSH      DPL
   \   000002   C083         PUSH      DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    183            return HalUARTRxAvailISR();
   \   000004   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000007   4008         JC        ??Hal_UART_RxBufLen_Ext_0
   \   000009   12....       LCALL     ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00000C   FA           MOV       R2,A
   \   00000D   95E0         SUBB      A,0xE0 /* A   */
   \   00000F   8006         SJMP      ??Hal_UART_RxBufLen_Ext_1
   \                     ??Hal_UART_RxBufLen_Ext_0:
   \   000011   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000014   FA           MOV       R2,A
   \   000015   E4           CLR       A
   \   000016   39           ADDC      A,R1
   \                     ??Hal_UART_RxBufLen_Ext_1:
   \   000017   FB           MOV       R3,A
   \   000018   80..         SJMP      ?Subroutine1
    184          }

   \                                 In  segment INTVEC, offset 0x1b, root
   \                     `??halUart1RxIsr::??INTVEC 27`:
   \   00001B   02....       LJMP       (halUart1RxIsr)

   \                                 In  segment INTVEC, offset 0x73, root
   \                     `??halUart1TxIsr::??INTVEC 115`:
   \   000073   02....       LJMP       (halUart1TxIsr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollISR::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollISR

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartInit_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartRegisterTaskID_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartCalcFCS_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_UartProcessZToolData_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll_Ext

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen_Ext::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen_Ext

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   HalUARTInit_Ext
      2     29   HalUARTOpen_Ext
      2      0   HalUARTPollISR
      2      0   HalUARTPoll_Ext
        2      0   -> HalUARTPollISR
      1      9   HalUARTReadISR
      2      0   HalUARTRead_Ext
        2      0   -> HalUARTReadISR
      0      0   HalUARTResume_Ext
      0      0   HalUARTSuspend_Ext
      1      9   HalUARTWriteISR
      2      0   HalUARTWrite_Ext
        2      0   -> HalUARTWriteISR
      2      0   Hal_UART_RxBufLen_Ext
      2     11   MT_UartCalcFCS_Ext
      2     29   MT_UartInit_Ext
        2     29   -> HalUARTOpen_Ext
      1     11   MT_UartProcessZToolData_Ext
        0     11   -> HalUARTRead
        0     11   -> Hal_UART_RxBufLen
        0     11   -> MT_UartCalcFCS_Ext
        0     11   -> osal_msg_allocate
        0     11   -> osal_msg_deallocate
        0     11   -> osal_msg_send
      2      0   MT_UartRegisterTaskID_Ext
      7      0   halUart1RxIsr
      6      0   halUart1TxIsr


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine16_0
       5  ?Subroutine0
       7  ?Subroutine1
       6  ?Subroutine10
      13  ?Subroutine11
      15  ?Subroutine12
      14  ?Subroutine13
       5  ?Subroutine14
       9  ?Subroutine15
      15  ?Subroutine2
      16  ?Subroutine3
      11  ?Subroutine4
      11  ?Subroutine5
       4  ?Subroutine6
       3  ?Subroutine7
       4  ?Subroutine8
      11  ?Subroutine9
       1  ADCCFG
       1  App_TaskID_Ext
       2  CMD_Token_Ext
       1  FSC_Token_Ext
      24  HalUARTInit_Ext
       6  HalUARTInit_Ext::?relay
     117  HalUARTOpen_Ext
       6  HalUARTOpen_Ext::?relay
     138  HalUARTPollISR
       6  HalUARTPollISR::?relay
       9  HalUARTPoll_Ext
       6  HalUARTPoll_Ext::?relay
      71  HalUARTReadISR
       6  HalUARTReadISR::?relay
       9  HalUARTRead_Ext
       6  HalUARTRead_Ext::?relay
       8  HalUARTResume_Ext
       6  HalUARTResume_Ext::?relay
       5  HalUARTSuspend_Ext
       6  HalUARTSuspend_Ext::?relay
     139  HalUARTWriteISR
       6  HalUARTWriteISR::?relay
       9  HalUARTWrite_Ext
       6  HalUARTWrite_Ext::?relay
      26  Hal_UART_RxBufLen_Ext
       6  Hal_UART_RxBufLen_Ext::?relay
       1  IEN2
       1  LEN_Token_Ext
      34  MT_UartCalcFCS_Ext
       6  MT_UartCalcFCS_Ext::?relay
     108  MT_UartInit_Ext
       6  MT_UartInit_Ext::?relay
     441  MT_UartProcessZToolData_Ext
       6  MT_UartProcessZToolData_Ext::?relay
      12  MT_UartRegisterTaskID_Ext
       6  MT_UartRegisterTaskID_Ext::?relay
       1  P1SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U1BAUD
       1  U1DBUF
       1  U1GCR
       1  U1UCR
       1  _A_IEN0
       1  _A_IRCON2
       1  _A_U1CSR
      70  halUart1RxIsr
       3  halUart1RxIsr::??INTVEC 27
      69  halUart1TxIsr
       3  halUart1TxIsr::??INTVEC 115
     265  isrCfg
       2  pMsgExt
       1  stateExt
       1  tempDataLenExt

 
 1 291 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     6 bytes in segment INTVEC
   154 bytes in segment NEAR_CODE
    13 bytes in segment SFR_AN
   274 bytes in segment XDATA_Z
 
   244 bytes of CODE     memory (+  6 bytes shared)
     0 bytes of DATA     memory (+ 13 bytes shared)
 1 291 bytes of HUGECODE memory
   274 bytes of XDATA    memory

Errors: none
Warnings: none
