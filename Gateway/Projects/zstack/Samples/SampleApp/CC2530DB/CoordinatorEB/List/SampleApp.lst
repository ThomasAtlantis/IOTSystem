###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               20/Jul/2019  16:33:16
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EW6D2F.tmp
#        (F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D HAL_LCD=FALSE -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D HAL_UART_DMA=1 -D HAL_UART_ISR=2 -lC
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2              This application isn't intended to do anything useful, it is
      3              intended to be a simple example of an application's structure.
      4          
      5              This application sends it's messages either as broadcast or
      6              broadcast filtered group messages.    The other (more normal)
      7              message addressing is unicast.    Most of the other sample
      8              applications are written to support the unicast message model.
      9          
     10              Key control:
     11                  SW1:    Sends a flash command to all devices in Group 1.
     12                  SW2:    Adds/Removes (toggles) this device in and out
     13                          of Group 1.    This will enable and disable the
     14                          reception of the flash command.
     15          *********************************************************************/
     16          
     17          #include "OSAL.h"
     18          #include "OSAL_Nv.h"
     19          #include "ZGlobals.h"
     20          #include "AF.h"
     21          #include "aps_groups.h"
     22          #include "ZDApp.h"
     23          
     24          #include "SampleApp.h"
     25          #include "SampleAppHw.h"
     26          
     27          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     28          
     29          /* HAL */
     30          #include "hal_lcd.h"
     31          #include "hal_led.h"
     32          #include "hal_key.h"
     33          #include "hal_uart.h"
     34          #include "MT_UART.h"
     35          
     36          /* SYS */
     37          #include <string.h>
     38          #include <stdio.h>
     39          #include <stdarg.h>
     40          
     41          #define UartDefaultRxLen 64
     42          #define UartDefaultTxLen 64
     43          #define Key_S1 P0_0
     44          #define Key_S2 P0_1
     45          #define Key_Active 0
     46          #define LED_RED P1_0
     47          #define LED_YELLOW P1_1
     48          #define LED_ORANGE P1_4
     49          
     50          // 可行范围：0x0401 — 0x0FFF
     51          #define ZD_NV_IP_ID 0x0440
     52          #define ZD_NV_PORT_ID 0x0430
     53          #define ZD_NV_SSID_ID 0x0420
     54          #define ZD_NV_PSWD_ID 0x0410
     55          
     56          // 长度定义，需为4的整数倍
     57          // 实际长度 <= LENGTH - 1
     58          #define SSID_MAX_LENGTH 20
     59          #define PSWD_MAX_LENGTH 20
     60          #define PORT_MAX_LENGTH 8
     61          #define IP_MAX_LENGTH   16
     62          
     63          #define isPressed(x) (x == Key_Active)
     64          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
     65          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
     66          #define debug_and_print(x,...) do{\
     67              _UARTSend(0,x,##__VA_ARGS__);\
     68              _UARTSend(1,x,##__VA_ARGS__);\
     69          }while(0)
     70          
     71          void _UARTSend(uint8 port, uint8 *fmt, ...);
     72          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
     73          void _delay_us(uint16 n);
     74          void _delay_ms(uint16 n);
     75          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
     76          void exit_send(void);
     77          uint16 WiFiRecv(uint8 *buff);
     78          uint8 WiFiSend(uint8 *fmt, ...);
     79          
     80          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     81          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     82          {
     83              SAMPLEAPP_PERIODIC_CLUSTERID,
     84              SAMPLEAPP_FLASH_CLUSTERID
     85          };
     86          

   \                                 In  segment XDATA_ROM_C, align 1
     87          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     88          {
     89              SAMPLEAPP_ENDPOINT,                //    int    Endpoint;
     90              SAMPLEAPP_PROFID,                  //    uint16 AppProfId[2];
     91              SAMPLEAPP_DEVICEID,                //    uint16 AppDeviceId[2];
     92              SAMPLEAPP_DEVICE_VERSION,          //    int    AppDevVer:4;
     93              SAMPLEAPP_FLAGS,                   //    int    AppFlags:4;
     94              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     95              (cId_t *)SampleApp_ClusterList,    //    uint8  *pAppInClusterList;
     96              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     97              (cId_t *)SampleApp_ClusterList     //    uint8  *pAppInClusterList;
     98          };
     99          
    100          // This is the Endpoint/Interface description.    It is defined here, but
    101          // filled-in in SampleApp_Init().    Another way to go would be to fill
    102          // in the structure here and make it a "const" (in code space).    The
    103          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    105          
    106          /*********************************************************************
    107           * EXTERNAL VARIABLES
    108           */
    109          
    110          /*********************************************************************
    111           * EXTERNAL FUNCTIONS
    112           */
    113          
    114          /*********************************************************************
    115           * LOCAL VARIABLES
    116           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 SampleApp_TaskID;     // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    118                                      // This variable will be received when
    119                                      // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    121          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 SampleApp_TransID;    // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    123          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    126          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    128          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131          
    132          /*********************************************************************
    133           * LOCAL FUNCTIONS
    134           */
    135          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    136          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    137          void SampleApp_SendPeriodicMessage( void );
    138          void SampleApp_SendFlashMessage( uint16 flashTime );
    139          
    140          /*********************************************************************
    141           * NETWORK LAYER CALLBACKS
    142           */
    143          
    144          /*********************************************************************
    145           * PUBLIC FUNCTIONS
    146           */
    147          
    148          /*********************************************************************
    149           * @fn            SampleApp_Init
    150           *
    151           * @brief     Initialization function for the Generic App Task.
    152           *            This is called during initialization and should contain
    153           *            any application specific initialization (ie. hardware
    154           *            initialization/setup, table initialization, power up
    155           *            notificaiton ... ).
    156           *
    157           * @param     task_id - the ID assigned by OSAL.    This ID should be
    158           *            used to send messages and set timers.
    159           *
    160           * @return    none
    161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    163          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    164              SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    165              SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    166              SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    167              
    168              MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    169              MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    170              
    171              // Device hardware initialization can be added here or in main() (Zmain.c).
    172              // If the hardware is application specific - add it here.
    173              // If the hardware is other parts of the device add it in main().
    174          
    175           #if defined ( BUILD_ALL_DEVICES )
    176              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    177              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    178              // together - if they are - we will start up a coordinator. Otherwise,
    179              // the device will start as a router.
    180              if ( readCoordinatorJumper() )
    181                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    182              else
    183                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    184          #endif // BUILD_ALL_DEVICES
    185          
    186          #if defined ( HOLD_AUTO_START )
    187              // HOLD_AUTO_START is a compile option that will surpress ZDApp
    188              //    from starting the device and wait for the application to
    189              //    start the device.
    190              ZDOInitDevice(0);
    191          #endif
    192          
    193              // Setup for the periodic message's destination address
    194              // Broadcast to everyone
    195              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    196              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    197              SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    198          
    199              // Setup for the flash command's destination address - Group 1
    200              SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    201              SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    202              SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine4 & 0xFFFF
    203          
    204              // Fill out the endpoint description.
    205              SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_60:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    206              SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    207              SampleApp_epDesc.simpleDesc
    208                  = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    209              SampleApp_epDesc.latencyReq = noLatencyReqs;
    210          
    211              // Register the endpoint description with the AF
    212              afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_56:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    213          
    214              // Register for all key events - This app will handle all key events
    215              RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    216          
    217              // By default, all devices start out in Group 1
    218              SampleApp_Group.ID = 0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine4 & 0xFFFF
    219              osal_memcpy(SampleApp_Group.name, "Group 1", 7);
   \                     ??CrossCallReturnLabel_61:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV       A,#0x3
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    220              aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \   00008A                ; Setup parameters for call to function aps_AddGroup
   \   00008A   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008C   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008E   7914         MOV       R1,#0x14
   \   000090   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    221          
    222          #if defined ( LCD_SUPPORTED )
    223              HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    224          #endif
    225              osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \   000093                ; Setup parameters for call to function osal_set_event
   \   000093   7A02         MOV       R2,#0x2
   \   000095   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    226          }
   \                     ??CrossCallReturnLabel_53:
   \   000098   7F03         MOV       R7,#0x3
   \   00009A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    227          
    228          /*********************************************************************
    229           * @fn        SampleApp_ProcessEvent
    230           *
    231           * @brief     Generic Application Task event processor.    This function
    232           *            is called to process all events for the task.    Events
    233           *            include timers, messages and any other user defined events.
    234           *
    235           * @param     task_id    - The OSAL assigned task ID.
    236           * @param     events - events to process.    This is a bit map and can
    237           *            contain more than one event.
    238           *
    239           * @return    none
    240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    242          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 159
   \   000005   7461         MOV       A,#0x61
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    243              afIncomingMSGPacket_t *MSGpkt;
    244              halUARTCfg_t uartConfig;
    245              uint8 _buffer[UartDefaultRxLen];
    246              uint8 InitNVStatus, readNVStatus, writeNVStatus;
    247              uint8 SSID[SSID_MAX_LENGTH], PSWD[PSWD_MAX_LENGTH];
    248              uint8 PORT[PORT_MAX_LENGTH], MYIP[IP_MAX_LENGTH];
    249              uint16 length, nv_id, nv_len, prefix_len;
    250              (void)task_id;    // Intentionally unreferenced parameter
    251              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6058         JZ        ??SampleApp_ProcessEvent_0
    252              {
    253                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8022         SJMP      ??SampleApp_ProcessEvent_1
    254                  while ( MSGpkt )
    255                  {
    256                      switch ( MSGpkt->hdr.event )
    257                      {
    258                          // Received when a key is pressed
    259                          case KEY_CHANGE:
    260                              SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state,
    261                                  ((keyChange_t *)MSGpkt)->keys );
    262                              break;
    263          
    264                          // Received when a messages is received (OTA) for this endpoint
    265                          case AF_INCOMING_MSG_CMD:
    266                              SampleApp_MessageMSGCB( MSGpkt );
    267                              break;
    268          
    269                          // Received whenever the device changes state in the network
    270                          case ZDO_STATE_CHANGE:
    271                              SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    272                              if ( (SampleApp_NwkState == DEV_ZB_COORD)
    273                                      || (SampleApp_NwkState == DEV_ROUTER)
    274                                      || (SampleApp_NwkState == DEV_END_DEVICE) ) {
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7007         JNZ       ??CrossCallReturnLabel_44
    275                                  // Start sending the periodic message in a regular interval.
    276                                  osal_start_timerEx( SampleApp_TaskID,
    277                                      SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    278                                      SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7C88         MOV       R4,#-0x78
   \   00002A   7D13         MOV       R5,#0x13
   \   00002C   12....       LCALL     ?Subroutine8 & 0xFFFF
    279                              } else {
    280                                  // Device is no longer in the network
    281                              }
    282                              break;
    283          
    284                          default:
    285                              break;
    286                      }
    287          
    288                      // Release the memory
    289                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_44:
   \   00002F                ; Setup parameters for call to function osal_msg_deallocate
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    290          
    291                      // Next - if one is available
    292                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000036                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000036   90....       MOV       DPTR,#SampleApp_TaskID
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   E5..         MOV       A,?V0
   \   000044   45..         ORL       A,?V1
   \   000046   601A         JZ        ??SampleApp_ProcessEvent_4
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   24E6         ADD       A,#-0x1a
   \   000051   6006         JZ        ??SampleApp_ProcessEvent_5
   \   000053   2449         ADD       A,#0x49
   \   000055   60BD         JZ        ??SampleApp_ProcessEvent_2
   \   000057   80D6         SJMP      ??CrossCallReturnLabel_44
   \                     ??SampleApp_ProcessEvent_5:
   \   000059                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000059   AA..         MOV       R2,?V0
   \   00005B   AB..         MOV       R3,?V1
   \   00005D   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000060   80CD         SJMP      ??CrossCallReturnLabel_44
    293                  }
    294          
    295                  // return unprocessed events
    296                  return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000062   EE           MOV       A,R6
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   6480         XRL       A,#0x80
   \   000067   02....       LJMP      ??SampleApp_ProcessEvent_6 & 0xFFFF
    297              }
    298          
    299              // Send a message out - This event is generated by a timer
    300              //    (setup in SampleApp_Init()).
    301              if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00006A   EA           MOV       A,R2
   \   00006B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006D   5017         JNC       ??SampleApp_ProcessEvent_7
    302              {
    303                  // Send the periodic message
    304                  SampleApp_SendPeriodicMessage();
   \   00006F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00006F   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    305                  // Setup to send message again in normal period (+ a little jitter)
    306                  osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    307                          (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000072                ; Setup parameters for call to function osal_rand
   \   000072   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000075                ; Setup parameters for call to function osal_start_timerEx
   \   000075   EA           MOV       A,R2
   \   000076   2488         ADD       A,#-0x78
   \   000078   FC           MOV       R4,A
   \   000079   E4           CLR       A
   \   00007A   3413         ADDC      A,#0x13
   \   00007C   FD           MOV       R5,A
   \   00007D   12....       LCALL     ?Subroutine8 & 0xFFFF
    308          
    309                  // return unprocessed events
    310                  return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_45:
   \   000080   EE           MOV       A,R6
   \   000081   6401         XRL       A,#0x1
   \   000083   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    311              }
    312              
    313              if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_7:
   \   000086   5402         ANL       A,#0x2
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??SampleApp_ProcessEvent_9 & 0xFFFF
    314          
    315                  // initialize uart_1
    316                  uartConfig.configured           = TRUE;
   \   00008D   740A         MOV       A,#0xa
   \   00008F   12....       LCALL     ?XSTACK_DISP0_8
   \   000092   7401         MOV       A,#0x1
   \   000094   F0           MOVX      @DPTR,A
    317                  uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000095   740B         MOV       A,#0xb
   \   000097   12....       LCALL     ?XSTACK_DISP0_8
   \   00009A   7404         MOV       A,#0x4
   \   00009C   F0           MOVX      @DPTR,A
    318                  uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00009D   740C         MOV       A,#0xc
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E4           CLR       A
   \   0000A3   F0           MOVX      @DPTR,A
    319                  uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000A4   740D         MOV       A,#0xd
   \   0000A6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A9   7440         MOV       A,#0x40
   \   0000AB   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    320                  uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_57:
   \   0000AE   7414         MOV       A,#0x14
   \   0000B0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B3   7480         MOV       A,#-0x80
   \   0000B5   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    321                  uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_58:
   \   0000B8   741C         MOV       A,#0x1c
   \   0000BA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BD   7480         MOV       A,#-0x80
   \   0000BF   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    322                  uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_59:
   \   0000C2   740F         MOV       A,#0xf
   \   0000C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C7   7406         MOV       A,#0x6
   \   0000C9   F0           MOVX      @DPTR,A
    323                  uartConfig.intEnable            = TRUE;
   \   0000CA   7420         MOV       A,#0x20
   \   0000CC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CF   7401         MOV       A,#0x1
   \   0000D1   F0           MOVX      @DPTR,A
    324                  uartConfig.callBackFunc         = NULL;
   \   0000D2   7425         MOV       A,#0x25
   \   0000D4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D7   E4           CLR       A
   \   0000D8   F0           MOVX      @DPTR,A
   \   0000D9   A3           INC       DPTR
   \   0000DA   F0           MOVX      @DPTR,A
    325                  HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000DB                ; Setup parameters for call to function HalUARTOpen
   \   0000DB   740A         MOV       A,#0xa
   \   0000DD   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E0   7901         MOV       R1,#0x1
   \   0000E2   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    326                  debug("UART_1 INITIALIZED!\r\n");
   \   0000E5                ; Setup parameters for call to function _UARTSend
   \   0000E5   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000E7   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000E9   7900         MOV       R1,#0x0
   \   0000EB   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    327          
    328                  if (isPressed(Key_S1)) {
   \   0000EE   A280         MOV       C,0x80.0
   \   0000F0   400D         JC        ??SampleApp_ProcessEvent_10
    329                      debug("Enter AP Mode\r\n");
   \   0000F2                ; Setup parameters for call to function _UARTSend
   \   0000F2   7A..         MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
   \   0000F4   7B..         MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
   \   0000F6   7900         MOV       R1,#0x0
   \   0000F8   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    330                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \   0000FB                ; Setup parameters for call to function osal_set_event
   \   0000FB   7A10         MOV       R2,#0x10
   \   0000FD   800B         SJMP      ??SampleApp_ProcessEvent_11
    331                  } else {
    332                      debug("Enter STA Mode\r\n");
   \                     ??SampleApp_ProcessEvent_10:
   \   0000FF                ; Setup parameters for call to function _UARTSend
   \   0000FF   7A..         MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
   \   000101   7B..         MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
   \   000103   7900         MOV       R1,#0x0
   \   000105   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    333                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000108                ; Setup parameters for call to function osal_set_event
   \   000108   7A04         MOV       R2,#0x4
    334                  }
   \                     ??SampleApp_ProcessEvent_11:
   \   00010A   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    335                  return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_54:
   \   00010D   EE           MOV       A,R6
   \   00010E   6402         XRL       A,#0x2
   \   000110   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    336              }
    337          
    338              if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_9:
   \   000113   EA           MOV       A,R2
   \   000114   5410         ANL       A,#0x10
   \   000116   7003         JNZ       $+5
   \   000118   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    339                  exit_send();
   \   00011B                ; Setup parameters for call to function exit_send
   \   00011B   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    340                  _UARTRead(HAL_UART_PORT_1, _buffer, &length);
   \   00011E                ; Setup parameters for call to function _UARTRead
   \   00011E   AC..         MOV       R4,?XSP + 0
   \   000120   AD..         MOV       R5,?XSP + 1
   \   000122   745F         MOV       A,#0x5f
   \   000124   12....       LCALL     ?XSTACK_DISP101_8
   \   000127   7901         MOV       R1,#0x1
   \   000129   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
    341                  do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_13:
   \   00012C   12....       LCALL     ?Subroutine9 & 0xFFFF
    342                  while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_31:
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000132   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000134   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000136   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   000138   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   00013A   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00013D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000140   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_13
    343                  do debug_and_print("AT+CWMODE=2\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   000143   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
   \   000146   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
   \   000149                ; Setup parameters for call to function _UARTSend
   \   000149   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    344                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_33:
   \   00014C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000152   12....       LCALL     ?DEALLOC_XSTACK8
   \   000155   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    345                  do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n"); // TODO: ADD MACRO
   \                     ??SampleApp_ProcessEvent_15:
   \   000158   75....       MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
   \   00015B   75....       MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
   \   00015E                ; Setup parameters for call to function _UARTSend
   \   00015E   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    346                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_34:
   \   000161   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000164   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000167   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    347                  do debug_and_print("AT+CIPMODE=0\r\n");
   \                     ??SampleApp_ProcessEvent_16:
   \   00016D   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
   \   000170   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
   \   000173                ; Setup parameters for call to function _UARTSend
   \   000173   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    348                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_35:
   \   000176   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000179   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00017C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017F   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    349                  do debug_and_print("AT+CIPMUX=1\r\n");
   \                     ??SampleApp_ProcessEvent_17:
   \   000182   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   000185   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   000188                ; Setup parameters for call to function _UARTSend
   \   000188   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    350                  while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
   \                     ??CrossCallReturnLabel_36:
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000191   12....       LCALL     ?DEALLOC_XSTACK8
   \   000194   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
    351                  do debug_and_print("AT+CIPSERVER=1,8266\r\n");
   \                     ??SampleApp_ProcessEvent_18:
   \   000197   75....       MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
   \   00019A   75....       MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
   \   00019D                ; Setup parameters for call to function _UARTSend
   \   00019D   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    352                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_37:
   \   0001A0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A3   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   0001A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A9   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_18
    353                  do {
    354                      while (wait_for("0,CONNECT\r\n", "0,CONNECT FAIL\r\n", 0));
   \                     ??SampleApp_ProcessEvent_19:
   \   0001AC                ; Setup parameters for call to function wait_for
   \   0001AC   78..         MOV       R0,#?V0
   \   0001AE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B1   7C..         MOV       R4,#`?<Constant "0,CONNECT FAIL\\r\\n">` & 0xff
   \   0001B3   7D..         MOV       R5,#(`?<Constant "0,CONNECT FAIL\\r\\n">` >> 8) & 0xff
   \   0001B5   7A..         MOV       R2,#`?<Constant "0,CONNECT\\r\\n">` & 0xff
   \   0001B7   7B..         MOV       R3,#(`?<Constant "0,CONNECT\\r\\n">` >> 8) & 0xff
   \   0001B9   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    355                  } while (WiFiSend("CTS\r\n")); // 告诉APP连接已建立，二次握手
   \                     ??CrossCallReturnLabel_76:
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BF   B900EA       CJNE      R1,#0x0,??SampleApp_ProcessEvent_19
   \   0001C2                ; Setup parameters for call to function WiFiSend
   \   0001C2   7A..         MOV       R2,#`?<Constant "CTS\\r\\n">` & 0xff
   \   0001C4   7B..         MOV       R3,#(`?<Constant "CTS\\r\\n">` >> 8) & 0xff
   \   0001C6   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
   \   0001C9   E9           MOV       A,R1
   \   0001CA   70E0         JNZ       ??SampleApp_ProcessEvent_19
    356                  while (1) {
    357                      length = WiFiRecv(_buffer);
   \                     ??SampleApp_ProcessEvent_20:
   \   0001CC                ; Setup parameters for call to function WiFiRecv
   \   0001CC   745F         MOV       A,#0x5f
   \   0001CE   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D1   12....       LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
   \   0001D4   85..82       MOV       DPL,?XSP + 0
   \   0001D7   85..83       MOV       DPH,?XSP + 1
   \   0001DA   EA           MOV       A,R2
   \   0001DB   F0           MOVX      @DPTR,A
   \   0001DC   A3           INC       DPTR
   \   0001DD   EB           MOV       A,R3
   \   0001DE   F0           MOVX      @DPTR,A
    358                      if (length > 6) { // min: SSIDx\r\n 允许19位长度
   \   0001DF   85..82       MOV       DPL,?XSP + 0
   \   0001E2   85..83       MOV       DPH,?XSP + 1
   \   0001E5   C3           CLR       C
   \   0001E6   E0           MOVX      A,@DPTR
   \   0001E7   9407         SUBB      A,#0x7
   \   0001E9   A3           INC       DPTR
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   9400         SUBB      A,#0x0
   \   0001ED   5003         JNC       $+5
   \   0001EF   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    359                          if (osal_memcmp(_buffer, "IP", 2)) {
   \   0001F2                ; Setup parameters for call to function osal_memcmp
   \   0001F2   75....       MOV       ?V0,#`?<Constant "IP">` & 0xff
   \   0001F5   75....       MOV       ?V1,#(`?<Constant "IP">` >> 8) & 0xff
   \   0001F8   75..00       MOV       ?V2,#0x0
   \   0001FB   78..         MOV       R0,#?V0
   \   0001FD   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000200   7C02         MOV       R4,#0x2
   \   000202   7D00         MOV       R5,#0x0
   \   000204   7462         MOV       A,#0x62
   \   000206   12....       LCALL     ?XSTACK_DISP0_8
   \   000209   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00020C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020F   E9           MOV       A,R1
   \   000210   6016         JZ        ??SampleApp_ProcessEvent_22
    360                              nv_id = ZD_NV_IP_ID;
   \   000212   75..40       MOV       ?V4,#0x40
   \   000215   75..04       MOV       ?V5,#0x4
    361                              nv_len = IP_MAX_LENGTH;
   \   000218   75..10       MOV       ?V0,#0x10
   \   00021B   75..00       MOV       ?V1,#0x0
    362                              prefix_len = 2;
   \   00021E   75..02       MOV       ?V6,#0x2
    363                              WiFiSend("GOT IP\r\n");
   \   000221                ; Setup parameters for call to function WiFiSend
   \   000221   7A..         MOV       R2,#`?<Constant "GOT IP\\r\\n">` & 0xff
   \   000223   7B..         MOV       R3,#(`?<Constant "GOT IP\\r\\n">` >> 8) & 0xff
   \   000225   02....       LJMP      ??SampleApp_ProcessEvent_23 & 0xFFFF
    364                          } else 
    365                          if (osal_memcmp(_buffer, "PORT", 4)) {
   \                     ??SampleApp_ProcessEvent_22:
   \   000228                ; Setup parameters for call to function osal_memcmp
   \   000228   75....       MOV       ?V0,#`?<Constant "PORT">` & 0xff
   \   00022B   75....       MOV       ?V1,#(`?<Constant "PORT">` >> 8) & 0xff
   \   00022E   78..         MOV       R0,#?V0
   \   000230   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000233   7C04         MOV       R4,#0x4
   \   000235   7D00         MOV       R5,#0x0
   \   000237   7462         MOV       A,#0x62
   \   000239   12....       LCALL     ?XSTACK_DISP0_8
   \   00023C   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00023F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000242   E9           MOV       A,R1
   \   000243   6015         JZ        ??SampleApp_ProcessEvent_24
    366                              nv_id = ZD_NV_PORT_ID;
   \   000245   75..30       MOV       ?V4,#0x30
   \   000248   75..04       MOV       ?V5,#0x4
    367                              nv_len = PORT_MAX_LENGTH;
   \   00024B   75..08       MOV       ?V0,#0x8
   \   00024E   75..00       MOV       ?V1,#0x0
    368                              prefix_len = 4;
   \   000251   75..04       MOV       ?V6,#0x4
    369                              WiFiSend("GOT PORT\r\n");
   \   000254                ; Setup parameters for call to function WiFiSend
   \   000254   7A..         MOV       R2,#`?<Constant "GOT PORT\\r\\n">` & 0xff
   \   000256   7B..         MOV       R3,#(`?<Constant "GOT PORT\\r\\n">` >> 8) & 0xff
   \   000258   8065         SJMP      ??SampleApp_ProcessEvent_23
    370                          } else 
    371                          if (osal_memcmp(_buffer, "SSID", 4)) {
   \                     ??SampleApp_ProcessEvent_24:
   \   00025A                ; Setup parameters for call to function osal_memcmp
   \   00025A   75....       MOV       ?V0,#`?<Constant "SSID">` & 0xff
   \   00025D   75....       MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
   \   000260   78..         MOV       R0,#?V0
   \   000262   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000265   7C04         MOV       R4,#0x4
   \   000267   7D00         MOV       R5,#0x0
   \   000269   7462         MOV       A,#0x62
   \   00026B   12....       LCALL     ?XSTACK_DISP0_8
   \   00026E   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000271   12....       LCALL     ?DEALLOC_XSTACK8
   \   000274   E9           MOV       A,R1
   \   000275   6015         JZ        ??SampleApp_ProcessEvent_25
    372                              nv_id = ZD_NV_SSID_ID;
   \   000277   75..20       MOV       ?V4,#0x20
   \   00027A   75..04       MOV       ?V5,#0x4
    373                              nv_len = SSID_MAX_LENGTH;
   \   00027D   75..14       MOV       ?V0,#0x14
   \   000280   75..00       MOV       ?V1,#0x0
    374                              prefix_len = 4;
   \   000283   75..04       MOV       ?V6,#0x4
    375                              WiFiSend("GOT SSID\r\n");
   \   000286                ; Setup parameters for call to function WiFiSend
   \   000286   7A..         MOV       R2,#`?<Constant "GOT SSID\\r\\n">` & 0xff
   \   000288   7B..         MOV       R3,#(`?<Constant "GOT SSID\\r\\n">` >> 8) & 0xff
   \   00028A   8033         SJMP      ??SampleApp_ProcessEvent_23
    376                          } else 
    377                          if (osal_memcmp(_buffer, "PSWD", 4)) {
   \                     ??SampleApp_ProcessEvent_25:
   \   00028C                ; Setup parameters for call to function osal_memcmp
   \   00028C   75....       MOV       ?V0,#`?<Constant "PSWD">` & 0xff
   \   00028F   75....       MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
   \   000292   78..         MOV       R0,#?V0
   \   000294   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000297   7C04         MOV       R4,#0x4
   \   000299   7D00         MOV       R5,#0x0
   \   00029B   7462         MOV       A,#0x62
   \   00029D   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A0   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0002A3   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A6   E9           MOV       A,R1
   \   0002A7   7003         JNZ       $+5
   \   0002A9   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    378                              nv_id = ZD_NV_PSWD_ID;
   \   0002AC   75..10       MOV       ?V4,#0x10
   \   0002AF   75..04       MOV       ?V5,#0x4
    379                              nv_len = PSWD_MAX_LENGTH;
   \   0002B2   75..14       MOV       ?V0,#0x14
   \   0002B5   75..00       MOV       ?V1,#0x0
    380                              prefix_len = 4;
   \   0002B8   75..04       MOV       ?V6,#0x4
    381                              WiFiSend("GOT PSWD\r\n");
   \   0002BB                ; Setup parameters for call to function WiFiSend
   \   0002BB   7A..         MOV       R2,#`?<Constant "GOT PSWD\\r\\n">` & 0xff
   \   0002BD   7B..         MOV       R3,#(`?<Constant "GOT PSWD\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_23:
   \   0002BF   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    382                          } else continue;
    383                          length -= 2; // \r\n
   \   0002C2   85..82       MOV       DPL,?XSP + 0
   \   0002C5   85..83       MOV       DPH,?XSP + 1
   \   0002C8   E0           MOVX      A,@DPTR
   \   0002C9   24FE         ADD       A,#-0x2
   \   0002CB   F0           MOVX      @DPTR,A
   \   0002CC   A3           INC       DPTR
   \   0002CD   E0           MOVX      A,@DPTR
   \   0002CE   34FF         ADDC      A,#-0x1
   \   0002D0   F0           MOVX      @DPTR,A
    384                          while (length < nv_len + prefix_len + 2) _buffer[length ++] = '\0';
   \   0002D1   E5..         MOV       A,?V0
   \   0002D3   25..         ADD       A,?V6
   \   0002D5   F8           MOV       R0,A
   \   0002D6   E4           CLR       A
   \   0002D7   3400         ADDC      A,#0x0
   \   0002D9   F9           MOV       R1,A
   \   0002DA   E8           MOV       A,R0
   \   0002DB   2402         ADD       A,#0x2
   \   0002DD   FA           MOV       R2,A
   \   0002DE   E4           CLR       A
   \   0002DF   39           ADDC      A,R1
   \   0002E0   FB           MOV       R3,A
   \   0002E1   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0002E4   EA           MOV       A,R2
   \   0002E5   98           SUBB      A,R0
   \   0002E6   F8           MOV       R0,A
   \   0002E7   EB           MOV       A,R3
   \   0002E8   99           SUBB      A,R1
   \   0002E9   F9           MOV       R1,A
   \   0002EA   85..82       MOV       DPL,?XSP + 0
   \   0002ED   85..83       MOV       DPH,?XSP + 1
   \   0002F0   C3           CLR       C
   \   0002F1   E0           MOVX      A,@DPTR
   \   0002F2   9A           SUBB      A,R2
   \   0002F3   A3           INC       DPTR
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   9B           SUBB      A,R3
   \   0002F6   5033         JNC       ??SampleApp_ProcessEvent_26
   \   0002F8   85..82       MOV       DPL,?XSP + 0
   \   0002FB   85..83       MOV       DPH,?XSP + 1
   \   0002FE   745F         MOV       A,#0x5f
   \   000300   12....       LCALL     ?XSTACK_DISP101_8
   \   000303   8B..         MOV       ?V3,R3
   \   000305   E0           MOVX      A,@DPTR
   \   000306   2A           ADD       A,R2
   \   000307   FA           MOV       R2,A
   \   000308   A3           INC       DPTR
   \   000309   E0           MOVX      A,@DPTR
   \   00030A   35..         ADDC      A,?V3
   \   00030C   8A82         MOV       DPL,R2
   \   00030E   F583         MOV       DPH,A
   \                     ??SampleApp_ProcessEvent_27:
   \   000310   E4           CLR       A
   \   000311   F0           MOVX      @DPTR,A
   \   000312   A3           INC       DPTR
   \   000313   E8           MOV       A,R0
   \   000314   24FF         ADD       A,#-0x1
   \   000316   18           DEC       R0
   \   000317   E9           MOV       A,R1
   \   000318   34FF         ADDC      A,#-0x1
   \   00031A   F9           MOV       R1,A
   \   00031B   48           ORL       A,R0
   \   00031C   70F2         JNZ       ??SampleApp_ProcessEvent_27
   \   00031E   85..82       MOV       DPL,?XSP + 0
   \   000321   85..83       MOV       DPH,?XSP + 1
   \   000324   E0           MOVX      A,@DPTR
   \   000325   28           ADD       A,R0
   \   000326   F0           MOVX      @DPTR,A
   \   000327   A3           INC       DPTR
   \   000328   E0           MOVX      A,@DPTR
   \   000329   39           ADDC      A,R1
   \   00032A   F0           MOVX      @DPTR,A
    385                          InitNVStatus = osal_nv_item_init(nv_id, nv_len, NULL);
   \                     ??SampleApp_ProcessEvent_26:
   \   00032B                ; Setup parameters for call to function osal_nv_item_init
   \   00032B   E4           CLR       A
   \   00032C   F5..         MOV       ?V3,A
   \   00032E   78..         MOV       R0,#?V2
   \   000330   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000333   AC..         MOV       R4,?V0
   \   000335   AD..         MOV       R5,?V1
   \   000337   AA..         MOV       R2,?V4
   \   000339   AB..         MOV       R3,?V5
   \   00033B   12....       LCALL     ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00033E   12....       LCALL     ?DEALLOC_XSTACK8
    386                          writeNVStatus = osal_nv_write(nv_id, 0, nv_len, _buffer + prefix_len);
   \   000341   745F         MOV       A,#0x5f
   \   000343   12....       LCALL     ?XSTACK_DISP0_8
   \   000346   E582         MOV       A,DPL
   \   000348   25..         ADD       A,?V6
   \   00034A   F5..         MOV       ?V2,A
   \   00034C   E4           CLR       A
   \   00034D   3583         ADDC      A,DPH
   \   00034F   F5..         MOV       ?V3,A
   \   000351                ; Setup parameters for call to function osal_nv_write
   \   000351   78..         MOV       R0,#?V2
   \   000353   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000356   78..         MOV       R0,#?V0
   \   000358   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00035B   7C00         MOV       R4,#0x0
   \   00035D   7D00         MOV       R5,#0x0
   \   00035F   AA..         MOV       R2,?V4
   \   000361   AB..         MOV       R3,?V5
   \   000363   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000366   7404         MOV       A,#0x4
   \   000368   12....       LCALL     ?DEALLOC_XSTACK8
    387                          HalUARTWrite(1, _buffer + prefix_len, nv_len);
   \   00036B                ; Setup parameters for call to function HalUARTWrite
   \   00036B   AC..         MOV       R4,?V0
   \   00036D   AD..         MOV       R5,?V1
   \   00036F   AA..         MOV       R2,?V2
   \   000371   AB..         MOV       R3,?V3
   \   000373   7901         MOV       R1,#0x1
   \   000375   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    388                          (void) writeNVStatus;
   \   000378   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    389                      } else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
   \                     ??SampleApp_ProcessEvent_21:
   \   00037B   85..82       MOV       DPL,?XSP + 0
   \   00037E   85..83       MOV       DPH,?XSP + 1
   \   000381   E0           MOVX      A,@DPTR
   \   000382   6404         XRL       A,#0x4
   \   000384   7002         JNZ       ??SampleApp_ProcessEvent_28
   \   000386   A3           INC       DPTR
   \   000387   E0           MOVX      A,@DPTR
   \                     ??SampleApp_ProcessEvent_28:
   \   000388   6003         JZ        $+5
   \   00038A   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
   \   00038D                ; Setup parameters for call to function osal_memcmp
   \   00038D   75....       MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
   \   000390   75....       MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000393   75..00       MOV       ?V2,#0x0
   \   000396   78..         MOV       R0,#?V0
   \   000398   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00039B   7C04         MOV       R4,#0x4
   \   00039D   7D00         MOV       R5,#0x0
   \   00039F   7462         MOV       A,#0x62
   \   0003A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A4   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0003A7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003AA   E9           MOV       A,R1
   \   0003AB   7003         JNZ       $+5
   \   0003AD   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    390                          WiFiSend("OVER\r\n");
   \   0003B0                ; Setup parameters for call to function WiFiSend
   \   0003B0   7A..         MOV       R2,#`?<Constant "OVER\\r\\n">` & 0xff
   \   0003B2   7B..         MOV       R3,#(`?<Constant "OVER\\r\\n">` >> 8) & 0xff
   \   0003B4   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    391                          _delay_ms(10);
   \   0003B7                ; Setup parameters for call to function _delay_ms
   \   0003B7   7A0A         MOV       R2,#0xa
   \   0003B9   7B00         MOV       R3,#0x0
   \   0003BB   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    392                          do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_29:
   \   0003BE   12....       LCALL     ?Subroutine9 & 0xFFFF
    393                          while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_32:
   \   0003C1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003C4   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0003C6   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0003C8   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   0003CA   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   0003CC   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0003CF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003D2   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_29
    394                          break;
    395                      }
    396                  }
    397                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0003D5                ; Setup parameters for call to function osal_set_event
   \   0003D5   12....       LCALL     ?Subroutine5 & 0xFFFF
    398                  return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_51:
   \   0003D8   EE           MOV       A,R6
   \   0003D9   6410         XRL       A,#0x10
   \   0003DB   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    399              }
    400          
    401              if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_12:
   \   0003DE   EA           MOV       A,R2
   \   0003DF   5404         ANL       A,#0x4
   \   0003E1   7003         JNZ       $+5
   \   0003E3   02....       LJMP      ??SampleApp_ProcessEvent_30 & 0xFFFF
    402                  // initialize esp8266
    403                  do {
    404                      exit_send();
   \                     ??SampleApp_ProcessEvent_31:
   \   0003E6                ; Setup parameters for call to function exit_send
   \   0003E6   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    405                      InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, SSID_MAX_LENGTH, NULL);
   \   0003E9                ; Setup parameters for call to function osal_nv_item_init
   \   0003E9   E4           CLR       A
   \   0003EA   F5..         MOV       ?V0,A
   \   0003EC   F5..         MOV       ?V1,A
   \   0003EE   78..         MOV       R0,#?V0
   \   0003F0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003F3   7C14         MOV       R4,#0x14
   \   0003F5   7D00         MOV       R5,#0x0
   \   0003F7   7A20         MOV       R2,#0x20
   \   0003F9   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0003FC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003FF   E9           MOV       A,R1
   \   000400   F5..         MOV       ?V0,A
    406                      readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, SSID_MAX_LENGTH, SSID);
    407                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000402                ; Setup parameters for call to function osal_nv_read
   \   000402   744B         MOV       A,#0x4b
   \   000404   12....       LCALL     ?XSTACK_DISP100_8
   \   000407   88..         MOV       ?V2,R0
   \   000409   89..         MOV       ?V3,R1
   \   00040B   78..         MOV       R0,#?V2
   \   00040D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000410   75..14       MOV       ?V2,#0x14
   \   000413   75..00       MOV       ?V3,#0x0
   \   000416   78..         MOV       R0,#?V2
   \   000418   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00041B   7C00         MOV       R4,#0x0
   \   00041D   7D00         MOV       R5,#0x0
   \   00041F   7A20         MOV       R2,#0x20
   \   000421   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000424   12....       LCALL     ?DEALLOC_XSTACK8
   \   000427   E9           MOV       A,R1
   \   000428   6003         JZ        $+5
   \   00042A   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
   \   00042D   E5..         MOV       A,?V0
   \   00042F   6003         JZ        $+5
   \   000431   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    408                          debug("Read Flash Failed\r\n");
    409                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    410                      }
    411                      debug(SSID);
   \   000434                ; Setup parameters for call to function _UARTSend
   \   000434   744B         MOV       A,#0x4b
   \   000436   12....       LCALL     ?XSTACK_DISP101_8
   \   000439   12....       LCALL     ?Subroutine13 & 0xFFFF
    412                      InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, PSWD_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_6:
   \   00043C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00043F   7C14         MOV       R4,#0x14
   \   000441   7D00         MOV       R5,#0x0
   \   000443   7A10         MOV       R2,#0x10
   \   000445   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000448   12....       LCALL     ?DEALLOC_XSTACK8
   \   00044B   E9           MOV       A,R1
   \   00044C   F5..         MOV       ?V0,A
    413                      readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, PSWD_MAX_LENGTH, PSWD);
    414                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   00044E                ; Setup parameters for call to function osal_nv_read
   \   00044E   7437         MOV       A,#0x37
   \   000450   12....       LCALL     ?XSTACK_DISP100_8
   \   000453   88..         MOV       ?V2,R0
   \   000455   89..         MOV       ?V3,R1
   \   000457   78..         MOV       R0,#?V2
   \   000459   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00045C   75..14       MOV       ?V2,#0x14
   \   00045F   75..00       MOV       ?V3,#0x0
   \   000462   78..         MOV       R0,#?V2
   \   000464   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000467   7C00         MOV       R4,#0x0
   \   000469   7D00         MOV       R5,#0x0
   \   00046B   7A10         MOV       R2,#0x10
   \   00046D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000470   12....       LCALL     ?DEALLOC_XSTACK8
   \   000473   E9           MOV       A,R1
   \   000474   6003         JZ        $+5
   \   000476   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
   \   000479   E5..         MOV       A,?V0
   \   00047B   6003         JZ        $+5
   \   00047D   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    415                          debug("Read Flash Failed\r\n");
    416                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    417                      }
    418                      debug(PSWD);
   \   000480                ; Setup parameters for call to function _UARTSend
   \   000480   7437         MOV       A,#0x37
   \   000482   12....       LCALL     ?XSTACK_DISP101_8
   \   000485   12....       LCALL     ?Subroutine13 & 0xFFFF
    419                      InitNVStatus = osal_nv_item_init(ZD_NV_IP_ID, IP_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_7:
   \   000488   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00048B   7C10         MOV       R4,#0x10
   \   00048D   7D00         MOV       R5,#0x0
   \   00048F   7A40         MOV       R2,#0x40
   \   000491   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000494   12....       LCALL     ?DEALLOC_XSTACK8
   \   000497   E9           MOV       A,R1
   \   000498   F5..         MOV       ?V0,A
    420                      readNVStatus = osal_nv_read(ZD_NV_IP_ID, 0, IP_MAX_LENGTH, MYIP);
    421                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   00049A                ; Setup parameters for call to function osal_nv_read
   \   00049A   7427         MOV       A,#0x27
   \   00049C   12....       LCALL     ?XSTACK_DISP100_8
   \   00049F   88..         MOV       ?V2,R0
   \   0004A1   89..         MOV       ?V3,R1
   \   0004A3   78..         MOV       R0,#?V2
   \   0004A5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004A8   75..10       MOV       ?V2,#0x10
   \   0004AB   75..00       MOV       ?V3,#0x0
   \   0004AE   78..         MOV       R0,#?V2
   \   0004B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004B3   7C00         MOV       R4,#0x0
   \   0004B5   7D00         MOV       R5,#0x0
   \   0004B7   7A40         MOV       R2,#0x40
   \   0004B9   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0004BC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004BF   E9           MOV       A,R1
   \   0004C0   704A         JNZ       ??SampleApp_ProcessEvent_32
   \   0004C2   E5..         MOV       A,?V0
   \   0004C4   7046         JNZ       ??SampleApp_ProcessEvent_32
    422                          debug("Read Flash Failed\r\n");
    423                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    424                      }
    425                      debug(MYIP);
   \   0004C6                ; Setup parameters for call to function _UARTSend
   \   0004C6   7427         MOV       A,#0x27
   \   0004C8   12....       LCALL     ?XSTACK_DISP101_8
   \   0004CB   12....       LCALL     ?Subroutine13 & 0xFFFF
    426                      InitNVStatus = osal_nv_item_init(ZD_NV_PORT_ID, PORT_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_8:
   \   0004CE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004D1   7C08         MOV       R4,#0x8
   \   0004D3   7D00         MOV       R5,#0x0
   \   0004D5   7A30         MOV       R2,#0x30
   \   0004D7   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0004DA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004DD   E9           MOV       A,R1
   \   0004DE   F5..         MOV       ?V0,A
    427                      readNVStatus = osal_nv_read(ZD_NV_PORT_ID, 0, PORT_MAX_LENGTH, PORT);
    428                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0004E0                ; Setup parameters for call to function osal_nv_read
   \   0004E0   7402         MOV       A,#0x2
   \   0004E2   12....       LCALL     ?XSTACK_DISP100_8
   \   0004E5   88..         MOV       ?V2,R0
   \   0004E7   89..         MOV       ?V3,R1
   \   0004E9   78..         MOV       R0,#?V2
   \   0004EB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004EE   75..08       MOV       ?V2,#0x8
   \   0004F1   75..00       MOV       ?V3,#0x0
   \   0004F4   78..         MOV       R0,#?V2
   \   0004F6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004F9   7C00         MOV       R4,#0x0
   \   0004FB   7D00         MOV       R5,#0x0
   \   0004FD   7A30         MOV       R2,#0x30
   \   0004FF   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000502   12....       LCALL     ?DEALLOC_XSTACK8
   \   000505   E9           MOV       A,R1
   \   000506   7004         JNZ       ??SampleApp_ProcessEvent_32
   \   000508   E5..         MOV       A,?V0
   \   00050A   600C         JZ        ??SampleApp_ProcessEvent_33
    429                          debug("Read Flash Failed\r\n");
   \                     ??SampleApp_ProcessEvent_32:
   \   00050C                ; Setup parameters for call to function _UARTSend
   \   00050C   7A..         MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
   \   00050E   7B..         MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
   \   000510   7900         MOV       R1,#0x0
   \   000512   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    430                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000515   02....       LJMP      ??CrossCallReturnLabel_55 & 0xFFFF
    431                      }
    432                      debug(PORT);
   \                     ??SampleApp_ProcessEvent_33:
   \   000518                ; Setup parameters for call to function _UARTSend
   \   000518   7402         MOV       A,#0x2
   \   00051A   12....       LCALL     ?XSTACK_DISP101_8
   \   00051D   7900         MOV       R1,#0x0
   \   00051F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    433          
    434                      do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_34:
   \   000522   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   000525   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   000528                ; Setup parameters for call to function _UARTSend
   \   000528   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    435                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_38:
   \   00052B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00052E   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000531   12....       LCALL     ?DEALLOC_XSTACK8
   \   000534   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_34
    436                      do debug_and_print("AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PSWD);
   \                     ??SampleApp_ProcessEvent_35:
   \   000537   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
   \   00053A   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
   \   00053D                ; Setup parameters for call to function _UARTSend
   \   00053D   7437         MOV       A,#0x37
   \   00053F   12....       LCALL     ?XSTACK_DISP100_8
   \   000542   88..         MOV       ?V2,R0
   \   000544   89..         MOV       ?V3,R1
   \   000546   78..         MOV       R0,#?V2
   \   000548   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00054B   744D         MOV       A,#0x4d
   \   00054D   12....       LCALL     ?XSTACK_DISP100_8
   \   000550   88..         MOV       ?V2,R0
   \   000552   89..         MOV       ?V3,R1
   \   000554   78..         MOV       R0,#?V2
   \   000556   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000559   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00055C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00055F                ; Setup parameters for call to function _UARTSend
   \   00055F   7437         MOV       A,#0x37
   \   000561   12....       LCALL     ?XSTACK_DISP100_8
   \   000564   88..         MOV       ?V2,R0
   \   000566   89..         MOV       ?V3,R1
   \   000568   78..         MOV       R0,#?V2
   \   00056A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00056D   744D         MOV       A,#0x4d
   \   00056F   12....       LCALL     ?XSTACK_DISP100_8
   \   000572   88..         MOV       ?V2,R0
   \   000574   89..         MOV       ?V3,R1
   \   000576   78..         MOV       R0,#?V2
   \   000578   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00057B   AA..         MOV       R2,?V0
   \   00057D   AB..         MOV       R3,?V1
   \   00057F   7901         MOV       R1,#0x1
   \   000581   12....       LCALL     ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000584   12....       LCALL     ?DEALLOC_XSTACK8
    437                      while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \   000587                ; Setup parameters for call to function wait_for
   \   000587   E4           CLR       A
   \   000588   F5..         MOV       ?V0,A
   \   00058A   F5..         MOV       ?V1,A
   \   00058C   78..         MOV       R0,#?V0
   \   00058E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000591   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   000593   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   000595   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000598   12....       LCALL     ?DEALLOC_XSTACK8
   \   00059B   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_35
    438                      do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_36:
   \   00059E   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   0005A1   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   0005A4                ; Setup parameters for call to function _UARTSend
   \   0005A4   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    439                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_39:
   \   0005A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005AA   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0005AD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005B0   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_36
    440                      do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_37:
   \   0005B3   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0005B6   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0005B9                ; Setup parameters for call to function _UARTSend
   \   0005B9   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    441                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_40:
   \   0005BC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005BF   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0005C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005C5   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_37
    442                      do debug_and_print("AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", MYIP, PORT);
   \                     ??SampleApp_ProcessEvent_38:
   \   0005C8   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` & 0xff
   \   0005CB   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` >> 8) & 0xff
   \   0005CE                ; Setup parameters for call to function _UARTSend
   \   0005CE   7402         MOV       A,#0x2
   \   0005D0   12....       LCALL     ?XSTACK_DISP100_8
   \   0005D3   88..         MOV       ?V2,R0
   \   0005D5   89..         MOV       ?V3,R1
   \   0005D7   78..         MOV       R0,#?V2
   \   0005D9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005DC   7429         MOV       A,#0x29
   \   0005DE   12....       LCALL     ?XSTACK_DISP100_8
   \   0005E1   88..         MOV       ?V2,R0
   \   0005E3   89..         MOV       ?V3,R1
   \   0005E5   78..         MOV       R0,#?V2
   \   0005E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005EA   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0005ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005F0                ; Setup parameters for call to function _UARTSend
   \   0005F0   7402         MOV       A,#0x2
   \   0005F2   12....       LCALL     ?XSTACK_DISP100_8
   \   0005F5   88..         MOV       ?V2,R0
   \   0005F7   89..         MOV       ?V3,R1
   \   0005F9   78..         MOV       R0,#?V2
   \   0005FB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005FE   7429         MOV       A,#0x29
   \   000600   12....       LCALL     ?XSTACK_DISP100_8
   \   000603   88..         MOV       ?V2,R0
   \   000605   89..         MOV       ?V3,R1
   \   000607   78..         MOV       R0,#?V2
   \   000609   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00060C   AA..         MOV       R2,?V0
   \   00060E   AB..         MOV       R3,?V1
   \   000610   7901         MOV       R1,#0x1
   \   000612   12....       LCALL     ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000615   12....       LCALL     ?DEALLOC_XSTACK8
    443                      while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \   000618                ; Setup parameters for call to function wait_for
   \   000618   E4           CLR       A
   \   000619   F5..         MOV       ?V0,A
   \   00061B   F5..         MOV       ?V1,A
   \   00061D   78..         MOV       R0,#?V0
   \   00061F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000622   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   000624   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   000626   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000629   12....       LCALL     ?DEALLOC_XSTACK8
   \   00062C   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_38
    444                      debug_and_print("AT+CIPSEND\r\n");
   \   00062F   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   000632   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   000635                ; Setup parameters for call to function _UARTSend
   \   000635   12....       LCALL     ??Subroutine23_0 & 0xFFFF
    445                  } while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_41:
   \   000638   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00063B   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00063D   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00063F   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   000641   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   000643   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000646   12....       LCALL     ?DEALLOC_XSTACK8
   \   000649   E9           MOV       A,R1
   \   00064A   6003         JZ        $+5
   \   00064C   02....       LJMP      ??SampleApp_ProcessEvent_31 & 0xFFFF
    446                  
    447                  // drive initial events
    448                  _delay_ms(50);
   \   00064F                ; Setup parameters for call to function _delay_ms
   \   00064F   7A32         MOV       R2,#0x32
   \   000651   7B00         MOV       R3,#0x0
   \   000653   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    449                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000656                ; Setup parameters for call to function osal_set_event
   \   000656   7A08         MOV       R2,#0x8
   \   000658   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    450                  return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_55:
   \   00065B   EE           MOV       A,R6
   \   00065C   6404         XRL       A,#0x4
   \   00065E   8044         SJMP      ??SampleApp_ProcessEvent_8
    451              }
    452          
    453              if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_30:
   \   000660   EA           MOV       A,R2
   \   000661   5408         ANL       A,#0x8
   \   000663   6044         JZ        ??SampleApp_ProcessEvent_39
    454                  debug_and_print("heart beat\r\n");
   \   000665   75....       MOV       ?V0,#`?<Constant "heart beat\\r\\n">` & 0xff
   \   000668   75....       MOV       ?V1,#(`?<Constant "heart beat\\r\\n">` >> 8) & 0xff
   \   00066B                ; Setup parameters for call to function _UARTSend
   \   00066B   12....       LCALL     ?Subroutine20 & 0xFFFF
    455                  if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \                     ??CrossCallReturnLabel_42:
   \   00066E                ; Setup parameters for call to function wait_for
   \   00066E   75..C8       MOV       ?V0,#-0x38
   \   000671   75..00       MOV       ?V1,#0x0
   \   000674   78..         MOV       R0,#?V0
   \   000676   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000679   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00067B   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00067D   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   00067F   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   000681   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000684   12....       LCALL     ?DEALLOC_XSTACK8
   \   000687   E9           MOV       A,R1
   \   000688   600E         JZ        ??SampleApp_ProcessEvent_40
    456                      debug("WIFI RESET\r\n");
   \   00068A                ; Setup parameters for call to function _UARTSend
   \   00068A   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   00068C   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   00068E   7900         MOV       R1,#0x0
   \   000690   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    457                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000693                ; Setup parameters for call to function osal_set_event
   \   000693   12....       LCALL     ?Subroutine5 & 0xFFFF
    458                  } else {
   \                     ??CrossCallReturnLabel_52:
   \   000696   8009         SJMP      ??CrossCallReturnLabel_46
    459                      osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_40:
   \   000698                ; Setup parameters for call to function osal_start_timerEx
   \   000698   7CD0         MOV       R4,#-0x30
   \   00069A   7D07         MOV       R5,#0x7
   \   00069C   7A08         MOV       R2,#0x8
   \   00069E   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    460                  }
    461                  return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??CrossCallReturnLabel_46:
   \   0006A1   EE           MOV       A,R6
   \   0006A2   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_8:
   \   0006A4   FA           MOV       R2,A
   \   0006A5   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_6:
   \   0006A6   FB           MOV       R3,A
   \   0006A7   8004         SJMP      ??SampleApp_ProcessEvent_41
    462              }
    463          
    464              // Discard unknown events
    465              return 0;
   \                     ??SampleApp_ProcessEvent_39:
   \   0006A9   7A00         MOV       R2,#0x0
   \   0006AB   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_41:
   \   0006AD   749F         MOV       A,#-0x61
   \   0006AF                REQUIRE ?Subroutine0
   \   0006AF                REQUIRE _A_P0
   \   0006AF                ; // Fall through to label ?Subroutine0
    466          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7B04         MOV       R3,#0x4
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7B04         MOV       R3,#0x4
   \   000002                REQUIRE ??Subroutine21_0
   \   000002                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006                REQUIRE ??Subroutine22_0
   \   000006                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   75....       MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
   \   000003   75....       MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                REQUIRE ??Subroutine23_0
   \   000006                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V0,A
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7A01         MOV       R2,#0x1
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine30_0
   \   000004                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    467          
    468          /*********************************************************************
    469           * Event Generation Functions
    470           */
    471          /*********************************************************************
    472           * @fn            SampleApp_HandleKeys
    473           *
    474           * @brief     Handles all key events for this device.
    475           *
    476           * @param     shift - true if in shift/alt.
    477           * @param     keys - bit field for key events. Valid entries:
    478           *                                 HAL_KEY_SW_2
    479           *                                 HAL_KEY_SW_1
    480           *
    481           * @return    none
    482           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    483          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    484          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    485              (void)shift;    // Intentionally unreferenced parameter
    486              
    487              if ( keys & HAL_KEY_SW_6 ) { // S1
    488              }
    489          
    490              if ( keys & HAL_KEY_SW_7 ) { // S2
    491              }
    492          }
   \   000000   02....       LJMP      ?BRET
    493          
    494          /*********************************************************************
    495           * @fn            SampleApp_MessageMSGCB
    496           *
    497           * @brief     Data message processor callback.    This function processes
    498           *                    any incoming data - probably from other devices.    So, based
    499           *                    on cluster ID, perform the intended action.
    500           *
    501           * @param     none
    502           *
    503           * @return    none
    504           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    505          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    506          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    507              uint16 flashTime;
    508          
    509              switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    510              {
    511                  case SAMPLEAPP_PERIODIC_CLUSTERID:
    512                      HalUARTWrite(0,"I get data\n",11);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    513                      HalUARTWrite(0, &pkt->cmd.Data[0],10);
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FA           MOV       R2,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FB           MOV       R3,A
   \   000040   7900         MOV       R1,#0x0
   \   000042   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    514                      HalUARTWrite(0,"\n",1);
   \   000045                ; Setup parameters for call to function HalUARTWrite
   \   000045   7C01         MOV       R4,#0x1
   \   000047   7D00         MOV       R5,#0x0
   \   000049   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    515                      break;
   \   000052   8035         SJMP      ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000054   EA           MOV       A,R2
   \   000055   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000058   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00005B                ; Setup parameters for call to function HalLedBlink
   \   00005B   8882         MOV       DPL,R0
   \   00005D   F583         MOV       DPH,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FA           MOV       R2,A
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   C8           XCH       A,R0
   \   00006C   F9           MOV       R1,A
   \   00006D   EA           MOV       A,R2
   \   00006E   28           ADD       A,R0
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E4           CLR       A
   \   000072   39           ADDC      A,R1
   \   000073   F5..         MOV       ?V1,A
   \   000075   7402         MOV       A,#0x2
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?US_SHR
   \   00007C   AC..         MOV       R4,?V0
   \   00007E   AD..         MOV       R5,?V1
   \   000080   7B32         MOV       R3,#0x32
   \   000082   7A04         MOV       R2,#0x4
   \   000084   7908         MOV       R1,#0x8
    516          
    517                  case SAMPLEAPP_FLASH_CLUSTERID:
    518                      flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    519                      HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000086   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    520                      break;
    521              }
    522          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000089   02....       LJMP      ??Subroutine28_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    523          
    524          /*********************************************************************
    525           * @fn            SampleApp_SendPeriodicMessage
    526           *
    527           * @brief     Send the periodic message.
    528           *
    529           * @param     none
    530           *
    531           * @return    none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void SampleApp_SendPeriodicMessage( void ) {
   \                     SampleApp_SendPeriodicMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    534              uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    535              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc, SAMPLEAPP_PERIODIC_CLUSTERID,
    536                  10, data, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    537              } else {
    538                  // Error occurred in request to send.
    539              }
    540          }
   \   00005C   740A         MOV       A,#0xa
   \   00005E   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine28_0
   \   000003                ; // Fall through to label ??Subroutine28_0
    541          
    542          /*********************************************************************
    543           * @fn            SampleApp_SendFlashMessage
    544           *
    545           * @brief     Send the flash message to group 1.
    546           *
    547           * @param     flashTime - in milliseconds
    548           *
    549           * @return    none
    550           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          void SampleApp_SendFlashMessage(uint16 flashTime) {
   \                     SampleApp_SendFlashMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    552              uint8 buffer[3];
    553              buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    554              buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    555              buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    556          
    557              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc, 
    558                  SAMPLEAPP_FLASH_CLUSTERID, 3, buffer, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    559              } else {
    560                  // Error occurred in request to send.
    561              }
    562          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   80..         SJMP      ?Subroutine1
    563          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    565              va_list arg_ptr;
    566              uint8 _buffer[UartDefaultTxLen], cnt;
    567              uint16 length = 0;
    568              for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    569                  _buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    570              va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   12....       LCALL     ?Subroutine3 & 0xFFFF
    571              length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_0:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   EA           MOV       A,R2
   \   000024   FC           MOV       R4,A
   \   000025   EB           MOV       A,R3
   \   000026   FD           MOV       R5,A
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
    572              va_end(arg_ptr);
    573              HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00003C                ; Setup parameters for call to function HalUARTWrite
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   EE           MOV       A,R6
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    574          }
   \   000046   7442         MOV       A,#0x42
   \   000048                REQUIRE ?Subroutine1
   \   000048                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    575          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    576          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    577              for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    578                  _buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00001A   EA           MOV       A,R2
   \   00001B   28           ADD       A,R0
   \   00001C   F582         MOV       DPL,A
   \   00001E   EB           MOV       A,R3
   \   00001F   39           ADDC      A,R1
   \   000020   F583         MOV       DPH,A
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   E0           MOVX      A,@DPTR
   \   000029   2401         ADD       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   C3           CLR       C
   \   000036   E0           MOVX      A,@DPTR
   \   000037   9440         SUBB      A,#0x40
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   9400         SUBB      A,#0x0
   \   00003D   40D4         JC        ??_UARTRead_0
    579              *length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   00003F                ; Setup parameters for call to function HalUARTRead
   \   00003F   7C40         MOV       R4,#0x40
   \   000041   7D00         MOV       R5,#0x0
   \   000043   A9..         MOV       R1,?V0
   \   000045   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    580          }
   \   000051                REQUIRE ?Subroutine2
   \   000051                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    581          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    583              while (timeout --) {
    584                 _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    585              }
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    586          }
   \   000022   80..         SJMP      ?Subroutine2
    587          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    589              uint8 cnt;
    590              while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    591                  cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    592                  while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    593                      asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    594                  }
    595              }    
    596          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    597          
    598          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    599          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    600              uint16 wait_len, read_len, err_len;
    601              int16 i, index;
    602              uint8 buffer[UartDefaultRxLen], flag;
    603              wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    604              err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7452         MOV       A,#0x52
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    605              while (1) {
    606                  _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     ?Subroutine12 & 0xFFFF
    607                  _delay_ms(1);
    608                  if (read_len > 2) { // at least 0x0D 0x0A
   \                     ??CrossCallReturnLabel_4:
   \   00003C   9403         SUBB      A,#0x3
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   9400         SUBB      A,#0x0
   \   000042   5003         JNC       $+5
   \   000044   02....       LJMP      ??wait_for_1 & 0xFFFF
    609                      index = 0;
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    610                      for (i = read_len - 1; i >= 0; i --) {
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   24FF         ADD       A,#-0x1
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   000059   E8           MOV       A,R0
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   18           DEC       R0
   \   00005D   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   F9           MOV       R1,A
   \   000061   C3           CLR       C
   \   000062   E9           MOV       A,R1
   \   000063   9400         SUBB      A,#0x0
   \   000065   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000067   65D0         XRL       A,PSW
   \   000069   33           RLC       A
   \   00006A   4032         JC        ??wait_for_4
    611                          if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E582         MOV       A,DPL
   \   000073   28           ADD       A,R0
   \   000074   F582         MOV       DPL,A
   \   000076   E583         MOV       A,DPH
   \   000078   39           ADDC      A,R1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   640A         XRL       A,#0xa
   \   00007E   70D9         JNZ       ??wait_for_3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   24FF         ADD       A,#-0x1
   \   000089   FC           MOV       R4,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   34FF         ADDC      A,#-0x1
   \   00008E   FD           MOV       R5,A
   \   00008F   EC           MOV       A,R4
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??wait_for_5
   \   000093   ED           MOV       A,R5
   \   000094   69           XRL       A,R1
   \                     ??wait_for_5:
   \   000095   60C2         JZ        ??wait_for_3
    612                              index = i + 1;
   \   000097   E8           MOV       A,R0
   \   000098   2401         ADD       A,#0x1
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
    613                              break;
    614                          }
    615                      }
    616                      
    617                      if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   00009E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000A1   65..         XRL       A,?V2
   \   0000A3   7003         JNZ       ??wait_for_6
   \   0000A5   E9           MOV       A,R1
   \   0000A6   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000A8   703B         JNZ       ??wait_for_7
    618                          flag = 1;
    619                          for (i = 0; i < err_len; i ++) {
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   801F         SJMP      ??wait_for_8
    620                              if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000B0   EA           MOV       A,R2
   \   0000B1   28           ADD       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EB           MOV       A,R3
   \   0000B4   39           ADDC      A,R1
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine17 & 0xFFFF
    621                                  flag = 0;
    622                                  break;
    623                              }
    624                          }
   \                     ??CrossCallReturnLabel_14:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   28           ADD       A,R0
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6C           XRL       A,R4
   \   0000C8   701B         JNZ       ??wait_for_7
   \   0000CA   08           INC       R0
   \   0000CB   E8           MOV       A,R0
   \   0000CC   7001         JNZ       ??wait_for_8
   \   0000CE   09           INC       R1
   \                     ??wait_for_8:
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V2
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V3
   \   0000D6   40D8         JC        ??wait_for_9
    625                          if (flag == 1) {
    626                              debug(err);
   \   0000D8                ; Setup parameters for call to function _UARTSend
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    627                              return 1;
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   8060         SJMP      ??wait_for_10
    628                          }
    629                      }
    630          
    631                      if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000E5   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E8   65..         XRL       A,?V6
   \   0000EA   7003         JNZ       ??wait_for_11
   \   0000EC   E9           MOV       A,R1
   \   0000ED   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   0000EF   703D         JNZ       ??wait_for_1
    632                          flag = 1;
    633                          for (i = 0; i < wait_len; i ++) {
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   8021         SJMP      ??wait_for_12
    634                              if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   28           ADD       A,R0
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EB           MOV       A,R3
   \   0000FB   39           ADDC      A,R1
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine17 & 0xFFFF
    635                                  flag = 0;
    636                                  break;
    637                              }
    638                          }
   \                     ??CrossCallReturnLabel_15:
   \   000105   E5..         MOV       A,?V0
   \   000107   28           ADD       A,R0
   \   000108   F582         MOV       DPL,A
   \   00010A   E5..         MOV       A,?V1
   \   00010C   39           ADDC      A,R1
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6C           XRL       A,R4
   \   000111   701B         JNZ       ??wait_for_1
   \   000113   08           INC       R0
   \   000114   E8           MOV       A,R0
   \   000115   7001         JNZ       ??wait_for_12
   \   000117   09           INC       R1
   \                     ??wait_for_12:
   \   000118   C3           CLR       C
   \   000119   E8           MOV       A,R0
   \   00011A   95..         SUBB      A,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   95..         SUBB      A,?V7
   \   00011F   40D6         JC        ??wait_for_13
    639                          if (flag == 1) {
    640                              debug(str);
   \   000121                ; Setup parameters for call to function _UARTSend
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   7900         MOV       R1,#0x0
   \   000127   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    641                              return 0;
   \   00012A   7900         MOV       R1,#0x0
   \   00012C   8017         SJMP      ??wait_for_10
    642                          }
    643                      }
    644                  }
    645                  timeout --;
    646                  if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00012E   E5..         MOV       A,?V4
   \   000130   24FF         ADD       A,#-0x1
   \   000132   F5..         MOV       ?V4,A
   \   000134   E5..         MOV       A,?V5
   \   000136   34FF         ADDC      A,#-0x1
   \   000138   F5..         MOV       ?V5,A
   \   00013A   E5..         MOV       A,?V4
   \   00013C   45..         ORL       A,?V5
   \   00013E   6003         JZ        $+5
   \   000140   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000143   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000145   7442         MOV       A,#0x42
    647              }
   \   000147   02....       LJMP      ?Subroutine0 & 0xFFFF
    648          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    649          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    651              print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine11 & 0xFFFF
    652              _delay_ms(10);
    653              print("+++");
   \                     ??CrossCallReturnLabel_62:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine11 & 0xFFFF
    654              _delay_ms(10);
    655              print("\r\n");
   \                     ??CrossCallReturnLabel_63:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    656              _delay_ms(10);
    657          }
   \                     ??CrossCallReturnLabel_64:
   \   000012   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine29_0
   \   000004                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET
    658          
    659          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    660          uint8 WiFiSend(uint8 *fmt, ...) {
   \                     WiFiSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    661              va_list arg_ptr;
    662              uint8 buffer[UartDefaultTxLen], cnt;
    663              uint16 length = 0;
    664              for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    665                  buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??WiFiSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??WiFiSend_0
    666              va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine3 & 0xFFFF
    667              length = vsprintf((char *)buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_1:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    668              va_end(arg_ptr);
    669              debug_and_print("AT+CIPSEND=0,%d\r\n", length);
   \   000036                ; Setup parameters for call to function _UARTSend
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   00003F   7900         MOV       R1,#0x0
   \   000041   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function _UARTSend
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   000050   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    670              _delay_ms(10);
   \   00005C                ; Setup parameters for call to function _delay_ms
   \   00005C   7A0A         MOV       R2,#0xa
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    671              // if (wait_for(">", "ERROR\r\n", 0)) return 1;
    672              HalUARTWrite(1, (uint8 *)buffer, length);
   \   000063                ; Setup parameters for call to function HalUARTWrite
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   7402         MOV       A,#0x2
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    673              return wait_for("SEND OK\r\n", "SEND FAIL\r\n", 0);
   \   000071                ; Setup parameters for call to function wait_for
   \   000071   E4           CLR       A
   \   000072   F5..         MOV       ?V0,A
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7C..         MOV       R4,#`?<Constant "SEND FAIL\\r\\n">` & 0xff
   \   00007D   7D..         MOV       R5,#(`?<Constant "SEND FAIL\\r\\n">` >> 8) & 0xff
   \   00007F   7A..         MOV       R2,#`?<Constant "SEND OK\\r\\n">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "SEND OK\\r\\n">` >> 8) & 0xff
   \   000083   12....       LCALL     ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   7442         MOV       A,#0x42
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   7F04         MOV       R7,#0x4
   \   000090   02....       LJMP      ?BANKED_LEAVE_XDATA
    674          }
    675          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    676          uint16 WiFiRecv(uint8 *buff) {
   \                     WiFiRecv:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    677              uint16 read_len, l_index;
    678              uint8 buffer[UartDefaultRxLen];
    679              while (1) {
    680                  _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??WiFiRecv_0:
   \   00000E                ; Setup parameters for call to function _UARTRead
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ?Subroutine12 & 0xFFFF
    681                  _delay_ms(1);
    682                  if (read_len > 10) { // at least 11 chars "+IPD,0,X:\r\n"
   \                     ??CrossCallReturnLabel_5:
   \   00001A   940B         SUBB      A,#0xb
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   9400         SUBB      A,#0x0
   \   000020   40EC         JC        ??WiFiRecv_0
    683                      l_index = 0;
   \   000022   7E00         MOV       R6,#0x0
   \   000024   7F00         MOV       R7,#0x0
   \                     ??WiFiRecv_1:
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E582         MOV       A,DPL
   \   00002D   2E           ADD       A,R6
   \   00002E   F582         MOV       DPL,A
   \   000030   E583         MOV       A,DPH
   \   000032   3F           ADDC      A,R7
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   643A         XRL       A,#0x3a
   \   000038   600F         JZ        ??WiFiRecv_2
    684                      while (l_index < read_len && buffer[l_index] != ':') {
    685                          l_index ++;
   \   00003A   0E           INC       R6
   \   00003B   EE           MOV       A,R6
   \   00003C   7001         JNZ       ??WiFiRecv_3
   \   00003E   0F           INC       R7
    686                      }
   \                     ??WiFiRecv_3:
   \   00003F   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000042   C3           CLR       C
   \   000043   EE           MOV       A,R6
   \   000044   98           SUBB      A,R0
   \   000045   EF           MOV       A,R7
   \   000046   99           SUBB      A,R1
   \   000047   40DD         JC        ??WiFiRecv_1
    687                      if (l_index == read_len) continue;
   \                     ??WiFiRecv_2:
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6E           XRL       A,R6
   \   000051   7003         JNZ       ??WiFiRecv_4
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6F           XRL       A,R7
   \                     ??WiFiRecv_4:
   \   000056   60B6         JZ        ??WiFiRecv_0
    688                      l_index ++;
   \   000058   0E           INC       R6
   \   000059   EE           MOV       A,R6
   \   00005A   7001         JNZ       ??WiFiRecv_5
   \   00005C   0F           INC       R7
    689                      osal_memcpy(buff, buffer + l_index, read_len - l_index);
   \                     ??WiFiRecv_5:
   \   00005D                ; Setup parameters for call to function osal_memcpy
   \   00005D   7402         MOV       A,#0x2
   \   00005F   12....       LCALL     ?XSTACK_DISP0_8
   \   000062   E582         MOV       A,DPL
   \   000064   2E           ADD       A,R6
   \   000065   F5..         MOV       ?V0,A
   \   000067   E583         MOV       A,DPH
   \   000069   3F           ADDC      A,R7
   \   00006A   F5..         MOV       ?V1,A
   \   00006C   75..00       MOV       ?V2,#0x0
   \   00006F   78..         MOV       R0,#?V0
   \   000071   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000074   7403         MOV       A,#0x3
   \   000076   12....       LCALL     ?XSTACK_DISP0_8
   \   000079   E0           MOVX      A,@DPTR
   \   00007A   C3           CLR       C
   \   00007B   9E           SUBB      A,R6
   \   00007C   FC           MOV       R4,A
   \   00007D   A3           INC       DPTR
   \   00007E   E0           MOVX      A,@DPTR
   \   00007F   9F           SUBB      A,R7
   \   000080   FD           MOV       R5,A
   \   000081   AA..         MOV       R2,?V4
   \   000083   AB..         MOV       R3,?V5
   \   000085   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000088   7403         MOV       A,#0x3
   \   00008A   12....       LCALL     ?DEALLOC_XSTACK8
    690                      return (read_len - l_index);
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   E0           MOVX      A,@DPTR
   \   000094   C3           CLR       C
   \   000095   9E           SUBB      A,R6
   \   000096   FA           MOV       R2,A
   \   000097   A3           INC       DPTR
   \   000098   E0           MOVX      A,@DPTR
   \   000099   9F           SUBB      A,R7
   \   00009A   FB           MOV       R3,A
   \   00009B   7442         MOV       A,#0x42
   \   00009D   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A0   7F06         MOV       R7,#0x6
   \   0000A2   02....       LJMP      ?BANKED_LEAVE_XDATA
    691                  }
    692              }
    693          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiRecv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiRecv

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter AP Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter AP Mode\015\012"
   \            72204150
   \            204D6F64
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter STA Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter STA Mode\015\012"
   \            72205354
   \            41204D6F
   \            64650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RST\\r\\n">`:
   \   000000   41542B52     DB "AT+RST\015\012"
   \            53540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready\\r\\n">`:
   \   000000   72656164     DB "ready\015\012"
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=2\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=2\015\012"
   \            574D4F44
   \            453D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
   \   000000   41542B43     DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"
   \            57534150
   \            3D224553
   \            50383236
   \            36222C22
   \            31323334
   \            3536222C
   \            31312C30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=0\015\012"
   \            49504D4F
   \            44453D30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8266\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3236360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT\015\012"
   \            4E4E4543
   \            540D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT FAIL\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT FAIL\015\012"
   \            4E4E4543
   \            54204641
   \            494C0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CTS\\r\\n">`:
   \   000000   4354530D     DB "CTS\015\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IP">`:
   \   000000   495000       DB "IP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT IP\\r\\n">`:
   \   000000   474F5420     DB "GOT IP\015\012"
   \            49500D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PORT">`:
   \   000000   504F5254     DB "PORT"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PORT\\r\\n">`:
   \   000000   474F5420     DB "GOT PORT\015\012"
   \            504F5254
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SSID">`:
   \   000000   53534944     DB "SSID"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT SSID\\r\\n">`:
   \   000000   474F5420     DB "GOT SSID\015\012"
   \            53534944
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PSWD">`:
   \   000000   50535744     DB "PSWD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PSWD\\r\\n">`:
   \   000000   474F5420     DB "GOT PSWD\015\012"
   \            50535744
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OVER\\r\\n">`:
   \   000000   4F564552     DB "OVER\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read Flash Failed\\r\\n">`:
   \   000000   52656164     DB "Read Flash Failed\015\012"
   \            20466C61
   \            73682046
   \            61696C65
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"%s\",%s\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2225
   \            73222C25
   \            730D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "heart beat\\r\\n">`:
   \   000000   68656172     DB "heart beat\015\012"
   \            74206265
   \            61740D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,%d\015\012"
   \            49505345
   \            4E443D30
   \            2C25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND OK\\r\\n">`:
   \   000000   53454E44     DB "SEND OK\015\012"
   \            204F4B0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND FAIL\\r\\n">`:
   \   000000   53454E44     DB "SEND FAIL\015\012"
   \            20464149
   \            4C0D0A00

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   SampleApp_HandleKeys
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_set_event
      0    185   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
        0     10   -> HalUARTWrite
      0    179   SampleApp_ProcessEvent
        0    175   -> HalUARTOpen
        0    175   -> HalUARTWrite
        0    175   -> SampleApp_MessageMSGCB
        0    175   -> SampleApp_SendPeriodicMessage
        0    175   -> WiFiRecv
        0    175   -> WiFiSend
        0    175   -> _UARTRead
        0    175   -> _UARTSend
        0    179   -> _UARTSend
        0    175   -> _delay_ms
        0    175   -> exit_send
        0    178   -> osal_memcmp
        0    175   -> osal_msg_deallocate
        0    175   -> osal_msg_receive
        0    177   -> osal_nv_item_init
        0    179   -> osal_nv_read
        0    179   -> osal_nv_write
        0    175   -> osal_rand
        0    175   -> osal_set_event
        0    175   -> osal_start_timerEx
        0    177   -> wait_for
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0    204   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0    258   WiFiRecv
        0     80   -> _UARTRead
        0     80   -> _delay_ms
        0     83   -> osal_memcpy
      1    255   WiFiSend
        0     78   -> HalUARTWrite
        0     80   -> _UARTSend
        0     78   -> _delay_ms
        0     80   -> vsprintf
        0     80   -> wait_for
      0    184   _UARTRead
        0      9   -> HalUARTRead
      1    257   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0    184   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      0    184   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    259   wait_for
        0     82   -> _UARTRead
        0     82   -> _UARTSend
        0     82   -> _delay_ms
        0     82   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "+++">
      17  ?<Constant "0,CONNECT FAIL\r\n">
      12  ?<Constant "0,CONNECT\r\n">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=0\r\n">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      18  ?<Constant "AT+CIPSEND=0,%d\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8266\r\n">
      28  ?<Constant "AT+CIPSTART=\"TCP\",\"%s...">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      14  ?<Constant "AT+CWMODE=1\r\n">
      14  ?<Constant "AT+CWMODE=2\r\n">
      35  ?<Constant "AT+CWSAP=\"ESP8266\",\"1...">
       9  ?<Constant "AT+RST\r\n">
       9  ?<Constant "CLOSED\r\n">
       6  ?<Constant "CTS\r\n">
       8  ?<Constant "ERROR\r\n">
      16  ?<Constant "Enter AP Mode\r\n">
      17  ?<Constant "Enter STA Mode\r\n">
       7  ?<Constant "FAIL\r\n">
       9  ?<Constant "GOT IP\r\n">
      11  ?<Constant "GOT PORT\r\n">
      11  ?<Constant "GOT PSWD\r\n">
      11  ?<Constant "GOT SSID\r\n">
       8  ?<Constant "Group 1">
      12  ?<Constant "I get data\n">
       3  ?<Constant "IP">
       5  ?<Constant "OK\r\n">
       7  ?<Constant "OVER\r\n">
       5  ?<Constant "PORT">
       5  ?<Constant "PSWD">
      20  ?<Constant "Read Flash Failed\r\n">
      12  ?<Constant "SEND FAIL\r\n">
      10  ?<Constant "SEND OK\r\n">
       5  ?<Constant "SSID">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      13  ?<Constant "heart beat\r\n">
       8  ?<Constant "ready\r\n">
      11  ?<Constant "received\r\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       6  ??Subroutine21_0
       6  ??Subroutine22_0
      11  ??Subroutine23_0
      11  ??Subroutine24_0
       6  ??Subroutine25_0
      11  ??Subroutine26_0
       5  ??Subroutine27_0
       5  ??Subroutine28_0
      13  ??Subroutine29_0
       4  ??Subroutine30_0
       6  ??Subroutine31_0
       8  ?Subroutine0
       3  ?Subroutine1
       4  ?Subroutine10
       4  ?Subroutine11
      21  ?Subroutine12
      11  ?Subroutine13
      12  ?Subroutine14
       6  ?Subroutine15
       2  ?Subroutine16
      13  ?Subroutine17
       8  ?Subroutine18
       9  ?Subroutine19
       5  ?Subroutine2
      19  ?Subroutine20
      22  ?Subroutine3
       2  ?Subroutine4
       2  ?Subroutine5
       6  ?Subroutine6
      16  ?Subroutine7
       2  ?Subroutine8
       6  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
       3  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     157  SampleApp_Init
       6  SampleApp_Init::?relay
     140  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
    1711  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     115  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      97  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     165  WiFiRecv
       6  WiFiRecv::?relay
     147  WiFiSend
       6  WiFiSend::?relay
       1  _A_P0
      81  _UARTRead
       6  _UARTRead::?relay
      72  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
      21  exit_send
       6  exit_send::?relay
     330  wait_for
       6  wait_for::?relay

 
 3 373 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   562 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    84 bytes of CODE     memory
   562 bytes of CONST    memory
     0 bytes of DATA     memory (+ 1 byte shared)
 3 373 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
