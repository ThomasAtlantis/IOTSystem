###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               19/Jul/2019  14:42:52
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EW67CF.tmp
#        (F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D HAL_LCD=FALSE -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D HAL_UART_DMA=1 -D HAL_UART_ISR=2 -lC
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\IOTSystem\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2              This application isn't intended to do anything useful, it is
      3              intended to be a simple example of an application's structure.
      4          
      5              This application sends it's messages either as broadcast or
      6              broadcast filtered group messages.    The other (more normal)
      7              message addressing is unicast.    Most of the other sample
      8              applications are written to support the unicast message model.
      9          
     10              Key control:
     11                  SW1:    Sends a flash command to all devices in Group 1.
     12                  SW2:    Adds/Removes (toggles) this device in and out
     13                          of Group 1.    This will enable and disable the
     14                          reception of the flash command.
     15          *********************************************************************/
     16          
     17          #include "OSAL.h"
     18          #include "OSAL_Nv.h"
     19          #include "ZGlobals.h"
     20          #include "AF.h"
     21          #include "aps_groups.h"
     22          #include "ZDApp.h"
     23          
     24          #include "SampleApp.h"
     25          #include "SampleAppHw.h"
     26          
     27          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     28          
     29          /* HAL */
     30          #include "hal_lcd.h"
     31          #include "hal_led.h"
     32          #include "hal_key.h"
     33          #include "hal_uart.h"
     34          #include "MT_UART.h"
     35          
     36          /* SYS */
     37          #include <string.h>
     38          #include <stdio.h>
     39          #include <stdarg.h>
     40          
     41          #define UartDefaultRxLen 50
     42          #define UartDefaultTxLen 64
     43          #define Key_S1 P0_0
     44          #define Key_S2 P0_1
     45          #define Key_Active 0
     46          #define LED_RED P1_0
     47          #define LED_YELLOW P1_1
     48          #define LED_ORANGE P1_4
     49          #define ZD_NV_SSID_ID 0x0420
     50          #define ZD_NV_PSWD_ID 0x0410
     51          
     52          #define isPressed(x) (x == Key_Active)
     53          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
     54          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
     55          #define debug_and_print(x,...) do{\
     56              _UARTSend(0,x,##__VA_ARGS__);\
     57              _UARTSend(1,x,##__VA_ARGS__);\
     58          }while(0)
     59          
     60          void _UARTSend(uint8 port, uint8 *fmt, ...);
     61          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
     62          void _delay_us(uint16 n);
     63          void _delay_ms(uint16 n);
     64          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
     65          void exit_send(void);
     66          uint16 WiFiRecv(uint8 *buff);
     67          
     68          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     69          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     70          {
     71              SAMPLEAPP_PERIODIC_CLUSTERID,
     72              SAMPLEAPP_FLASH_CLUSTERID
     73          };
     74          

   \                                 In  segment XDATA_ROM_C, align 1
     75          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     76          {
     77              SAMPLEAPP_ENDPOINT,                //    int    Endpoint;
     78              SAMPLEAPP_PROFID,                  //    uint16 AppProfId[2];
     79              SAMPLEAPP_DEVICEID,                //    uint16 AppDeviceId[2];
     80              SAMPLEAPP_DEVICE_VERSION,          //    int    AppDevVer:4;
     81              SAMPLEAPP_FLAGS,                   //    int    AppFlags:4;
     82              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     83              (cId_t *)SampleApp_ClusterList,    //    uint8  *pAppInClusterList;
     84              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     85              (cId_t *)SampleApp_ClusterList     //    uint8  *pAppInClusterList;
     86          };
     87          
     88          // This is the Endpoint/Interface description.    It is defined here, but
     89          // filled-in in SampleApp_Init().    Another way to go would be to fill
     90          // in the structure here and make it a "const" (in code space).    The
     91          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     93          
     94          /*********************************************************************
     95           * EXTERNAL VARIABLES
     96           */
     97          
     98          /*********************************************************************
     99           * EXTERNAL FUNCTIONS
    100           */
    101          
    102          /*********************************************************************
    103           * LOCAL VARIABLES
    104           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 SampleApp_TaskID;     // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    106                                      // This variable will be received when
    107                                      // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    109          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          uint8 SampleApp_TransID;    // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    111          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    114          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    116          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    119          
    120          /*********************************************************************
    121           * LOCAL FUNCTIONS
    122           */
    123          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    124          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    125          void SampleApp_SendPeriodicMessage( void );
    126          void SampleApp_SendFlashMessage( uint16 flashTime );
    127          
    128          /*********************************************************************
    129           * NETWORK LAYER CALLBACKS
    130           */
    131          
    132          /*********************************************************************
    133           * PUBLIC FUNCTIONS
    134           */
    135          
    136          /*********************************************************************
    137           * @fn            SampleApp_Init
    138           *
    139           * @brief     Initialization function for the Generic App Task.
    140           *            This is called during initialization and should contain
    141           *            any application specific initialization (ie. hardware
    142           *            initialization/setup, table initialization, power up
    143           *            notificaiton ... ).
    144           *
    145           * @param     task_id - the ID assigned by OSAL.    This ID should be
    146           *            used to send messages and set timers.
    147           *
    148           * @return    none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    152              SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    153              SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    154              SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    155              
    156              MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    157              MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    158              
    159              // Device hardware initialization can be added here or in main() (Zmain.c).
    160              // If the hardware is application specific - add it here.
    161              // If the hardware is other parts of the device add it in main().
    162          
    163           #if defined ( BUILD_ALL_DEVICES )
    164              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    165              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    166              // together - if they are - we will start up a coordinator. Otherwise,
    167              // the device will start as a router.
    168              if ( readCoordinatorJumper() )
    169                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    170              else
    171                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    172          #endif // BUILD_ALL_DEVICES
    173          
    174          #if defined ( HOLD_AUTO_START )
    175              // HOLD_AUTO_START is a compile option that will surpress ZDApp
    176              //    from starting the device and wait for the application to
    177              //    start the device.
    178              ZDOInitDevice(0);
    179          #endif
    180          
    181              // Setup for the periodic message's destination address
    182              // Broadcast to everyone
    183              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    184              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    185              SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    186          
    187              // Setup for the flash command's destination address - Group 1
    188              SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    189              SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    190              SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine3 & 0xFFFF
    191          
    192              // Fill out the endpoint description.
    193              SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_59:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    194              SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    195              SampleApp_epDesc.simpleDesc
    196                  = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    197              SampleApp_epDesc.latencyReq = noLatencyReqs;
    198          
    199              // Register the endpoint description with the AF
    200              afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_55:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    201          
    202              // Register for all key events - This app will handle all key events
    203              RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    204          
    205              // By default, all devices start out in Group 1
    206              SampleApp_Group.ID = 0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine3 & 0xFFFF
    207              osal_memcpy(SampleApp_Group.name, "Group 1", 7);
   \                     ??CrossCallReturnLabel_60:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000085   12....       LCALL     ?DEALLOC_XSTACK8
    208              aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \   000088                ; Setup parameters for call to function aps_AddGroup
   \   000088   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008A   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008C   7914         MOV       R1,#0x14
   \   00008E   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    209          
    210          #if defined ( LCD_SUPPORTED )
    211              HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    212          #endif
    213              osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \   000091                ; Setup parameters for call to function osal_set_event
   \   000091   7A02         MOV       R2,#0x2
   \   000093   12....       LCALL     ??Subroutine22_0 & 0xFFFF
    214          }
   \                     ??CrossCallReturnLabel_46:
   \   000096   7F03         MOV       R7,#0x3
   \   000098   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000003   7403         MOV       A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    215          
    216          /*********************************************************************
    217           * @fn        SampleApp_ProcessEvent
    218           *
    219           * @brief     Generic Application Task event processor.    This function
    220           *            is called to process all events for the task.    Events
    221           *            include timers, messages and any other user defined events.
    222           *
    223           * @param     task_id    - The OSAL assigned task ID.
    224           * @param     events - events to process.    This is a bit map and can
    225           *            contain more than one event.
    226           *
    227           * @return    none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    230          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 119
   \   000005   7489         MOV       A,#-0x77
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    231              afIncomingMSGPacket_t *MSGpkt;
    232              halUARTCfg_t uartConfig;
    233              uint8 _buffer[UartDefaultRxLen], *_buffer_pointer;
    234              uint8 InitNVStatus, readNVStatus, writeNVStatus;
    235              uint8 SSID[20], PSWD[20];
    236              uint16 length, nv_id, SSID_len, PSWD_len;
    237              (void)task_id;    // Intentionally unreferenced parameter
    238              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6058         JZ        ??SampleApp_ProcessEvent_0
    239              {
    240                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8022         SJMP      ??SampleApp_ProcessEvent_1
    241                  while ( MSGpkt )
    242                  {
    243                      switch ( MSGpkt->hdr.event )
    244                      {
    245                          // Received when a key is pressed
    246                          case KEY_CHANGE:
    247                              SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state,
    248                                  ((keyChange_t *)MSGpkt)->keys );
    249                              break;
    250          
    251                          // Received when a messages is received (OTA) for this endpoint
    252                          case AF_INCOMING_MSG_CMD:
    253                              SampleApp_MessageMSGCB( MSGpkt );
    254                              break;
    255          
    256                          // Received whenever the device changes state in the network
    257                          case ZDO_STATE_CHANGE:
    258                              SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    259                              if ( (SampleApp_NwkState == DEV_ZB_COORD)
    260                                      || (SampleApp_NwkState == DEV_ROUTER)
    261                                      || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7007         JNZ       ??CrossCallReturnLabel_41
    262                              {
    263                                  // Start sending the periodic message in a regular interval.
    264                                  osal_start_timerEx( SampleApp_TaskID,
    265                                      SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    266                                      SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7C88         MOV       R4,#-0x78
   \   00002A   7D13         MOV       R5,#0x13
   \   00002C   12....       LCALL     ?Subroutine8 & 0xFFFF
    267                              }
    268                              else
    269                              {
    270                                  // Device is no longer in the network
    271                              }
    272                              break;
    273          
    274                          default:
    275                              break;
    276                      }
    277          
    278                      // Release the memory
    279                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_41:
   \   00002F                ; Setup parameters for call to function osal_msg_deallocate
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    280          
    281                      // Next - if one is available
    282                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000036                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000036   90....       MOV       DPTR,#SampleApp_TaskID
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   E5..         MOV       A,?V0
   \   000044   45..         ORL       A,?V1
   \   000046   601A         JZ        ??SampleApp_ProcessEvent_4
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   24E6         ADD       A,#-0x1a
   \   000051   6006         JZ        ??SampleApp_ProcessEvent_5
   \   000053   2449         ADD       A,#0x49
   \   000055   60BD         JZ        ??SampleApp_ProcessEvent_2
   \   000057   80D6         SJMP      ??CrossCallReturnLabel_41
   \                     ??SampleApp_ProcessEvent_5:
   \   000059                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000059   AA..         MOV       R2,?V0
   \   00005B   AB..         MOV       R3,?V1
   \   00005D   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000060   80CD         SJMP      ??CrossCallReturnLabel_41
    283                  }
    284          
    285                  // return unprocessed events
    286                  return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000062   EE           MOV       A,R6
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   6480         XRL       A,#0x80
   \   000067   02....       LJMP      ??SampleApp_ProcessEvent_6 & 0xFFFF
    287              }
    288          
    289              // Send a message out - This event is generated by a timer
    290              //    (setup in SampleApp_Init()).
    291              if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00006A   EA           MOV       A,R2
   \   00006B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006D   5017         JNC       ??SampleApp_ProcessEvent_7
    292              {
    293                  // Send the periodic message
    294                  SampleApp_SendPeriodicMessage();
   \   00006F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00006F   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    295                  // Setup to send message again in normal period (+ a little jitter)
    296                  osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    297                          (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000072                ; Setup parameters for call to function osal_rand
   \   000072   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000075                ; Setup parameters for call to function osal_start_timerEx
   \   000075   EA           MOV       A,R2
   \   000076   2488         ADD       A,#-0x78
   \   000078   FC           MOV       R4,A
   \   000079   E4           CLR       A
   \   00007A   3413         ADDC      A,#0x13
   \   00007C   FD           MOV       R5,A
   \   00007D   12....       LCALL     ?Subroutine8 & 0xFFFF
    298          
    299                  // return unprocessed events
    300                  return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_42:
   \   000080   EE           MOV       A,R6
   \   000081   6401         XRL       A,#0x1
   \   000083   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    301              }
    302              
    303              if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_7:
   \   000086   5402         ANL       A,#0x2
   \   000088   7003         JNZ       $+5
   \   00008A   02....       LJMP      ??SampleApp_ProcessEvent_9 & 0xFFFF
    304          
    305                  // initialize uart_1
    306                  uartConfig.configured           = TRUE;
   \   00008D   85..82       MOV       DPL,?XSP + 0
   \   000090   85..83       MOV       DPH,?XSP + 1
   \   000093   7401         MOV       A,#0x1
   \   000095   F0           MOVX      @DPTR,A
    307                  uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000096   12....       LCALL     ?XSTACK_DISP0_8
   \   000099   7404         MOV       A,#0x4
   \   00009B   F0           MOVX      @DPTR,A
    308                  uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00009C   7402         MOV       A,#0x2
   \   00009E   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A1   E4           CLR       A
   \   0000A2   F0           MOVX      @DPTR,A
    309                  uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000A3   7403         MOV       A,#0x3
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   7440         MOV       A,#0x40
   \   0000AA   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    310                  uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_56:
   \   0000AD   740A         MOV       A,#0xa
   \   0000AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B2   7480         MOV       A,#-0x80
   \   0000B4   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    311                  uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_57:
   \   0000B7   7412         MOV       A,#0x12
   \   0000B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BC   7480         MOV       A,#-0x80
   \   0000BE   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    312                  uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_58:
   \   0000C1   7405         MOV       A,#0x5
   \   0000C3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C6   7406         MOV       A,#0x6
   \   0000C8   F0           MOVX      @DPTR,A
    313                  uartConfig.intEnable            = TRUE;
   \   0000C9   7416         MOV       A,#0x16
   \   0000CB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CE   7401         MOV       A,#0x1
   \   0000D0   F0           MOVX      @DPTR,A
    314                  uartConfig.callBackFunc         = NULL;
   \   0000D1   741B         MOV       A,#0x1b
   \   0000D3   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D6   E4           CLR       A
   \   0000D7   F0           MOVX      @DPTR,A
   \   0000D8   A3           INC       DPTR
   \   0000D9   F0           MOVX      @DPTR,A
    315                  HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000DA                ; Setup parameters for call to function HalUARTOpen
   \   0000DA   AA..         MOV       R2,?XSP + 0
   \   0000DC   AB..         MOV       R3,?XSP + 1
   \   0000DE   7901         MOV       R1,#0x1
   \   0000E0   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    316                  debug("UART_1 INITIALIZED!\r\n");
   \   0000E3                ; Setup parameters for call to function _UARTSend
   \   0000E3   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000E5   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000E7   7900         MOV       R1,#0x0
   \   0000E9   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    317          
    318                  if (isPressed(Key_S1)) {
   \   0000EC   A280         MOV       C,0x80.0
   \   0000EE   400D         JC        ??SampleApp_ProcessEvent_10
    319                      debug("Enter AP Mode\r\n");
   \   0000F0                ; Setup parameters for call to function _UARTSend
   \   0000F0   7A..         MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
   \   0000F2   7B..         MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
   \   0000F4   7900         MOV       R1,#0x0
   \   0000F6   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    320                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \   0000F9                ; Setup parameters for call to function osal_set_event
   \   0000F9   7A10         MOV       R2,#0x10
   \   0000FB   800B         SJMP      ??SampleApp_ProcessEvent_11
    321                  } else {
    322                      debug("Enter STA Mode\r\n");
   \                     ??SampleApp_ProcessEvent_10:
   \   0000FD                ; Setup parameters for call to function _UARTSend
   \   0000FD   7A..         MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
   \   0000FF   7B..         MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
   \   000101   7900         MOV       R1,#0x0
   \   000103   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    323                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000106                ; Setup parameters for call to function osal_set_event
   \   000106   7A04         MOV       R2,#0x4
    324                  }
   \                     ??SampleApp_ProcessEvent_11:
   \   000108   12....       LCALL     ??Subroutine22_0 & 0xFFFF
    325                  return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_47:
   \   00010B   EE           MOV       A,R6
   \   00010C   6402         XRL       A,#0x2
   \   00010E   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    326              }
    327          
    328              if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_9:
   \   000111   EA           MOV       A,R2
   \   000112   5410         ANL       A,#0x10
   \   000114   7003         JNZ       $+5
   \   000116   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    329                  exit_send();
   \   000119                ; Setup parameters for call to function exit_send
   \   000119   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    330                  do debug_and_print("AT+CWMODE=2\r\n");
   \                     ??SampleApp_ProcessEvent_13:
   \   00011C   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
   \   00011F   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
   \   000122                ; Setup parameters for call to function _UARTSend
   \   000122   12....       LCALL     ?Subroutine9 & 0xFFFF
    331                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_2:
   \   000125   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000128   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00012B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00012E   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_13
    332                  do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   000131   75....       MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
   \   000134   75....       MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
   \   000137                ; Setup parameters for call to function _UARTSend
   \   000137   12....       LCALL     ?Subroutine9 & 0xFFFF
    333                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_3:
   \   00013A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00013D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000140   12....       LCALL     ?DEALLOC_XSTACK8
   \   000143   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    334                  do debug_and_print("AT+CIPMODE=0\r\n");
   \                     ??SampleApp_ProcessEvent_15:
   \   000146   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
   \   000149   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
   \   00014C                ; Setup parameters for call to function _UARTSend
   \   00014C   12....       LCALL     ?Subroutine9 & 0xFFFF
    335                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_4:
   \   00014F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000152   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000155   12....       LCALL     ?DEALLOC_XSTACK8
   \   000158   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    336                  do debug_and_print("AT+CIPMUX=1\r\n");
   \                     ??SampleApp_ProcessEvent_16:
   \   00015B   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   00015E   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   000161                ; Setup parameters for call to function _UARTSend
   \   000161   12....       LCALL     ?Subroutine9 & 0xFFFF
    337                  while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
   \                     ??CrossCallReturnLabel_5:
   \   000164   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000167   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00016A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00016D   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    338                  do debug_and_print("AT+CIPSERVER=1,8266\r\n");
   \                     ??SampleApp_ProcessEvent_17:
   \   000170   75....       MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
   \   000173   75....       MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
   \   000176                ; Setup parameters for call to function _UARTSend
   \   000176   12....       LCALL     ?Subroutine9 & 0xFFFF
    339                  while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_6:
   \   000179   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00017F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000182   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
    340                  while (1) {
    341                      length = WiFiRecv(_buffer);
   \                     ??SampleApp_ProcessEvent_18:
   \   000185                ; Setup parameters for call to function WiFiRecv
   \   000185   7445         MOV       A,#0x45
   \   000187   12....       LCALL     ?XSTACK_DISP101_8
   \   00018A   12....       LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
   \   00018D   8A..         MOV       ?V4,R2
   \   00018F   8B..         MOV       ?V5,R3
    342                      if (length > 6 && length <= 25) { // min: SSIDx\r\n 允许19位长度
   \   000191   EA           MOV       A,R2
   \   000192   24F9         ADD       A,#-0x7
   \   000194   F8           MOV       R0,A
   \   000195   EB           MOV       A,R3
   \   000196   34FF         ADDC      A,#-0x1
   \   000198   F9           MOV       R1,A
   \   000199   C3           CLR       C
   \   00019A   E8           MOV       A,R0
   \   00019B   9413         SUBB      A,#0x13
   \   00019D   E9           MOV       A,R1
   \   00019E   9400         SUBB      A,#0x0
   \   0001A0   4003         JC        $+5
   \   0001A2   02....       LJMP      ??SampleApp_ProcessEvent_19 & 0xFFFF
    343                          if (osal_memcmp(_buffer, (uint8 *) "SSID", 4)) {
   \   0001A5                ; Setup parameters for call to function osal_memcmp
   \   0001A5   75....       MOV       ?V0,#`?<Constant "SSID">` & 0xff
   \   0001A8   75....       MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
   \   0001AB   75..00       MOV       ?V2,#0x0
   \   0001AE   78..         MOV       R0,#?V0
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001B3   7C04         MOV       R4,#0x4
   \   0001B5   7D00         MOV       R5,#0x0
   \   0001B7   7448         MOV       A,#0x48
   \   0001B9   12....       LCALL     ?XSTACK_DISP0_8
   \   0001BC   A982         MOV       R1,DPL
   \   0001BE   AA83         MOV       R2,DPH
   \   0001C0   7B00         MOV       R3,#0x0
   \   0001C2   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001C5   7403         MOV       A,#0x3
   \   0001C7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001CA   E9           MOV       A,R1
   \   0001CB   6005         JZ        ??SampleApp_ProcessEvent_20
    344                              nv_id = ZD_NV_SSID_ID;
   \   0001CD   75..20       MOV       ?V0,#0x20
   \   0001D0   8028         SJMP      ??SampleApp_ProcessEvent_21
    345                          } else 
    346                          if (osal_memcmp(_buffer, (uint8 *) "PSWD", 4)) {
   \                     ??SampleApp_ProcessEvent_20:
   \   0001D2                ; Setup parameters for call to function osal_memcmp
   \   0001D2   75....       MOV       ?V0,#`?<Constant "PSWD">` & 0xff
   \   0001D5   75....       MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
   \   0001D8   78..         MOV       R0,#?V0
   \   0001DA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001DD   7C04         MOV       R4,#0x4
   \   0001DF   7D00         MOV       R5,#0x0
   \   0001E1   7448         MOV       A,#0x48
   \   0001E3   12....       LCALL     ?XSTACK_DISP0_8
   \   0001E6   A982         MOV       R1,DPL
   \   0001E8   AA83         MOV       R2,DPH
   \   0001EA   7B00         MOV       R3,#0x0
   \   0001EC   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0001EF   7403         MOV       A,#0x3
   \   0001F1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F4   E9           MOV       A,R1
   \   0001F5   608E         JZ        ??SampleApp_ProcessEvent_18
    347                              nv_id = ZD_NV_PSWD_ID;
   \   0001F7   75..10       MOV       ?V0,#0x10
   \                     ??SampleApp_ProcessEvent_21:
   \   0001FA   75..04       MOV       ?V1,#0x4
    348                          } else continue;
    349                          length -= 2;
   \   0001FD   E5..         MOV       A,?V4
   \   0001FF   24FE         ADD       A,#-0x2
   \   000201   F5..         MOV       ?V4,A
   \   000203   E5..         MOV       A,?V5
   \   000205   34FF         ADDC      A,#-0x1
   \   000207   F5..         MOV       ?V5,A
    350                          while (length < 26) _buffer[length ++] = '\0';
   \   000209   C3           CLR       C
   \   00020A   E5..         MOV       A,?V4
   \   00020C   941A         SUBB      A,#0x1a
   \   00020E   E5..         MOV       A,?V5
   \   000210   9400         SUBB      A,#0x0
   \   000212   5020         JNC       ??SampleApp_ProcessEvent_22
   \   000214   741A         MOV       A,#0x1a
   \   000216   C3           CLR       C
   \   000217   95..         SUBB      A,?V4
   \   000219   F8           MOV       R0,A
   \   00021A   E4           CLR       A
   \   00021B   95..         SUBB      A,?V5
   \   00021D   F9           MOV       R1,A
   \   00021E   7445         MOV       A,#0x45
   \   000220   12....       LCALL     ?XSTACK_DISP0_8
   \   000223   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000226   E4           CLR       A
   \   000227   F0           MOVX      @DPTR,A
   \   000228   A3           INC       DPTR
   \   000229   E8           MOV       A,R0
   \   00022A   24FF         ADD       A,#-0x1
   \   00022C   18           DEC       R0
   \   00022D   E9           MOV       A,R1
   \   00022E   34FF         ADDC      A,#-0x1
   \   000230   F9           MOV       R1,A
   \   000231   48           ORL       A,R0
   \   000232   70F2         JNZ       ??CrossCallReturnLabel_26
    351                          InitNVStatus = osal_nv_item_init(nv_id, 20, NULL);
   \                     ??SampleApp_ProcessEvent_22:
   \   000234                ; Setup parameters for call to function osal_nv_item_init
   \   000234   E4           CLR       A
   \   000235   F5..         MOV       ?V3,A
   \   000237   78..         MOV       R0,#?V2
   \   000239   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00023C   7C14         MOV       R4,#0x14
   \   00023E   7D00         MOV       R5,#0x0
   \   000240   AA..         MOV       R2,?V0
   \   000242   AB..         MOV       R3,?V1
   \   000244   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000247   7402         MOV       A,#0x2
   \   000249   12....       LCALL     ?DEALLOC_XSTACK8
    352                          writeNVStatus = osal_nv_write(nv_id, 0, 20, _buffer + 4);
   \   00024C                ; Setup parameters for call to function osal_nv_write
   \   00024C   7449         MOV       A,#0x49
   \   00024E   12....       LCALL     ?XSTACK_DISP0_8
   \   000251   8582..       MOV       ?V2,DPL
   \   000254   8583..       MOV       ?V3,DPH
   \   000257   78..         MOV       R0,#?V2
   \   000259   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00025C   75..14       MOV       ?V2,#0x14
   \   00025F   75..00       MOV       ?V3,#0x0
   \   000262   78..         MOV       R0,#?V2
   \   000264   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000267   7C00         MOV       R4,#0x0
   \   000269   7D00         MOV       R5,#0x0
   \   00026B   AA..         MOV       R2,?V0
   \   00026D   AB..         MOV       R3,?V1
   \   00026F   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000272   7404         MOV       A,#0x4
   \   000274   12....       LCALL     ?DEALLOC_XSTACK8
    353                          (void) writeNVStatus;
   \   000277   02....       LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
    354                      } else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
   \                     ??SampleApp_ProcessEvent_19:
   \   00027A   7404         MOV       A,#0x4
   \   00027C   6A           XRL       A,R2
   \   00027D   4B           ORL       A,R3
   \   00027E   6003         JZ        $+5
   \   000280   02....       LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
   \   000283                ; Setup parameters for call to function osal_memcmp
   \   000283   75....       MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
   \   000286   75....       MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000289   75..00       MOV       ?V2,#0x0
   \   00028C   78..         MOV       R0,#?V0
   \   00028E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000291   7C04         MOV       R4,#0x4
   \   000293   7D00         MOV       R5,#0x0
   \   000295   7448         MOV       A,#0x48
   \   000297   12....       LCALL     ?XSTACK_DISP0_8
   \   00029A   A982         MOV       R1,DPL
   \   00029C   AA83         MOV       R2,DPH
   \   00029E   7B00         MOV       R3,#0x0
   \   0002A0   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0002A3   7403         MOV       A,#0x3
   \   0002A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A8   E9           MOV       A,R1
   \   0002A9   7003         JNZ       $+5
   \   0002AB   02....       LJMP      ??SampleApp_ProcessEvent_18 & 0xFFFF
    355                          do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_23:
   \   0002AE   75....       MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
   \   0002B1   75....       MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
   \   0002B4                ; Setup parameters for call to function _UARTSend
   \   0002B4   12....       LCALL     ?Subroutine9 & 0xFFFF
    356                          while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_7:
   \   0002B7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0002BA   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0002BC   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0002BE   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   0002C0   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   0002C2   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0002C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002C8   B900E3       CJNE      R1,#0x0,??SampleApp_ProcessEvent_23
    357                          break;
    358                      }
    359                  }
    360                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0002CB                ; Setup parameters for call to function osal_set_event
   \   0002CB   12....       LCALL     ?Subroutine5 & 0xFFFF
    361                  return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_44:
   \   0002CE   EE           MOV       A,R6
   \   0002CF   6410         XRL       A,#0x10
   \   0002D1   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    362              }
    363          
    364              if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_12:
   \   0002D4   EA           MOV       A,R2
   \   0002D5   5404         ANL       A,#0x4
   \   0002D7   7003         JNZ       $+5
   \   0002D9   02....       LJMP      ??SampleApp_ProcessEvent_24 & 0xFFFF
    365                  // initialize esp8266
    366                  do {
    367                      exit_send();
   \                     ??SampleApp_ProcessEvent_25:
   \   0002DC                ; Setup parameters for call to function exit_send
   \   0002DC   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    368                      _buffer_pointer = _buffer;
    369                      osal_memcpy(_buffer_pointer, "AT+CWJAP=\"", 10);
   \   0002DF                ; Setup parameters for call to function osal_memcpy
   \   0002DF   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"">` & 0xff
   \   0002E2   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"">` >> 8) & 0xff
   \   0002E5   75..00       MOV       ?V2,#0x0
   \   0002E8   78..         MOV       R0,#?V0
   \   0002EA   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0002ED   7C0A         MOV       R4,#0xa
   \   0002EF   7D00         MOV       R5,#0x0
   \   0002F1   7448         MOV       A,#0x48
   \   0002F3   12....       LCALL     ?XSTACK_DISP101_8
   \   0002F6   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0002F9   12....       LCALL     ?DEALLOC_XSTACK8
    370                      _buffer_pointer += 10;
    371                      InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, 20, NULL);
   \   0002FC                ; Setup parameters for call to function osal_nv_item_init
   \   0002FC   E4           CLR       A
   \   0002FD   F5..         MOV       ?V0,A
   \   0002FF   F5..         MOV       ?V1,A
   \   000301   78..         MOV       R0,#?V0
   \   000303   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000306   7C14         MOV       R4,#0x14
   \   000308   7D00         MOV       R5,#0x0
   \   00030A   7A20         MOV       R2,#0x20
   \   00030C   7B04         MOV       R3,#0x4
   \   00030E   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000311   7402         MOV       A,#0x2
   \   000313   12....       LCALL     ?DEALLOC_XSTACK8
   \   000316   E9           MOV       A,R1
   \   000317   F5..         MOV       ?V0,A
    372                      readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, 20, SSID);
    373                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000319                ; Setup parameters for call to function osal_nv_read
   \   000319   7431         MOV       A,#0x31
   \   00031B   12....       LCALL     ?XSTACK_DISP100_8
   \   00031E   88..         MOV       ?V2,R0
   \   000320   89..         MOV       ?V3,R1
   \   000322   78..         MOV       R0,#?V2
   \   000324   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000327   75..14       MOV       ?V2,#0x14
   \   00032A   75..00       MOV       ?V3,#0x0
   \   00032D   78..         MOV       R0,#?V2
   \   00032F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000332   7C00         MOV       R4,#0x0
   \   000334   7D00         MOV       R5,#0x0
   \   000336   7A20         MOV       R2,#0x20
   \   000338   7B04         MOV       R3,#0x4
   \   00033A   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00033D   7404         MOV       A,#0x4
   \   00033F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000342   E9           MOV       A,R1
   \   000343   6003         JZ        $+5
   \   000345   02....       LJMP      ??SampleApp_ProcessEvent_26 & 0xFFFF
   \   000348   E5..         MOV       A,?V0
   \   00034A   6003         JZ        $+5
   \   00034C   02....       LJMP      ??SampleApp_ProcessEvent_26 & 0xFFFF
    374                          debug("Read Flash Failed\r\n");
    375                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    376                      }
    377                      for (SSID_len = 0; SSID_len < 19; ++ SSID_len)
   \   00034F   75..00       MOV       ?V4,#0x0
   \   000352   75..00       MOV       ?V5,#0x0
    378                          if (SSID[SSID_len] == '\0') break;
   \                     ??SampleApp_ProcessEvent_27:
   \   000355   7431         MOV       A,#0x31
   \   000357   12....       LCALL     ?XSTACK_DISP0_8
   \   00035A   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00035D   6011         JZ        ??SampleApp_ProcessEvent_28
   \   00035F   05..         INC       ?V4
   \   000361   E5..         MOV       A,?V4
   \   000363   7002         JNZ       ??SampleApp_ProcessEvent_29
   \   000365   05..         INC       ?V5
   \                     ??SampleApp_ProcessEvent_29:
   \   000367   C3           CLR       C
   \   000368   9413         SUBB      A,#0x13
   \   00036A   E5..         MOV       A,?V5
   \   00036C   9400         SUBB      A,#0x0
   \   00036E   40E5         JC        ??SampleApp_ProcessEvent_27
    379                      osal_memcpy(_buffer_pointer, SSID, SSID_len);
   \                     ??SampleApp_ProcessEvent_28:
   \   000370                ; Setup parameters for call to function osal_memcpy
   \   000370   7431         MOV       A,#0x31
   \   000372   12....       LCALL     ?XSTACK_DISP100_8
   \   000375   88..         MOV       ?V0,R0
   \   000377   89..         MOV       ?V1,R1
   \   000379   75..00       MOV       ?V2,#0x0
   \   00037C   78..         MOV       R0,#?V0
   \   00037E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000381   AC..         MOV       R4,?V4
   \   000383   AD..         MOV       R5,?V5
   \   000385   7452         MOV       A,#0x52
   \   000387   12....       LCALL     ?XSTACK_DISP0_8
   \   00038A   AA82         MOV       R2,DPL
   \   00038C   AB83         MOV       R3,DPH
   \   00038E   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000391   12....       LCALL     ?DEALLOC_XSTACK8
    380                      _buffer_pointer += SSID_len;
   \   000394   7445         MOV       A,#0x45
   \   000396   12....       LCALL     ?XSTACK_DISP0_8
   \   000399   E582         MOV       A,DPL
   \   00039B   25..         ADD       A,?V4
   \   00039D   F8           MOV       R0,A
   \   00039E   E583         MOV       A,DPH
   \   0003A0   35..         ADDC      A,?V5
   \   0003A2   F9           MOV       R1,A
   \   0003A3   E8           MOV       A,R0
   \   0003A4   240A         ADD       A,#0xa
   \   0003A6   F5..         MOV       ?V6,A
   \   0003A8   E4           CLR       A
   \   0003A9   39           ADDC      A,R1
   \   0003AA   F5..         MOV       ?V7,A
    381                      osal_memcpy(_buffer_pointer, "\",\"", 3);
   \   0003AC                ; Setup parameters for call to function osal_memcpy
   \   0003AC   75....       MOV       ?V0,#`?<Constant "\\",\\"">` & 0xff
   \   0003AF   75....       MOV       ?V1,#(`?<Constant "\\",\\"">` >> 8) & 0xff
   \   0003B2   78..         MOV       R0,#?V0
   \   0003B4   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003B7   7C03         MOV       R4,#0x3
   \   0003B9   7D00         MOV       R5,#0x0
   \   0003BB   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0003BE   12....       LCALL     ?DEALLOC_XSTACK8
    382                      _buffer_pointer += 3;
   \   0003C1   E5..         MOV       A,?V6
   \   0003C3   2403         ADD       A,#0x3
   \   0003C5   F5..         MOV       ?V6,A
   \   0003C7   5002         JNC       ??SampleApp_ProcessEvent_30
   \   0003C9   05..         INC       ?V7
    383                      InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, 20, NULL);
   \                     ??SampleApp_ProcessEvent_30:
   \   0003CB                ; Setup parameters for call to function osal_nv_item_init
   \   0003CB   E4           CLR       A
   \   0003CC   F5..         MOV       ?V0,A
   \   0003CE   F5..         MOV       ?V1,A
   \   0003D0   78..         MOV       R0,#?V0
   \   0003D2   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003D5   7C14         MOV       R4,#0x14
   \   0003D7   7D00         MOV       R5,#0x0
   \   0003D9   7A10         MOV       R2,#0x10
   \   0003DB   7B04         MOV       R3,#0x4
   \   0003DD   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0003E0   7402         MOV       A,#0x2
   \   0003E2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003E5   E9           MOV       A,R1
   \   0003E6   F5..         MOV       ?V0,A
    384                      readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, 20, PSWD);
    385                      if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0003E8                ; Setup parameters for call to function osal_nv_read
   \   0003E8   741D         MOV       A,#0x1d
   \   0003EA   12....       LCALL     ?XSTACK_DISP100_8
   \   0003ED   88..         MOV       ?V2,R0
   \   0003EF   89..         MOV       ?V3,R1
   \   0003F1   78..         MOV       R0,#?V2
   \   0003F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003F6   75..14       MOV       ?V2,#0x14
   \   0003F9   75..00       MOV       ?V3,#0x0
   \   0003FC   78..         MOV       R0,#?V2
   \   0003FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000401   7C00         MOV       R4,#0x0
   \   000403   7D00         MOV       R5,#0x0
   \   000405   7A10         MOV       R2,#0x10
   \   000407   7B04         MOV       R3,#0x4
   \   000409   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00040C   7404         MOV       A,#0x4
   \   00040E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000411   E9           MOV       A,R1
   \   000412   7004         JNZ       ??SampleApp_ProcessEvent_26
   \   000414   E5..         MOV       A,?V0
   \   000416   600C         JZ        ??SampleApp_ProcessEvent_31
    386                          debug("Read Flash Failed\r\n");
   \                     ??SampleApp_ProcessEvent_26:
   \   000418                ; Setup parameters for call to function _UARTSend
   \   000418   7A..         MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
   \   00041A   7B..         MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
   \   00041C   7900         MOV       R1,#0x0
   \   00041E   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    387                          return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000421   02....       LJMP      ??CrossCallReturnLabel_48 & 0xFFFF
    388                      }
    389                      for (PSWD_len = 0; PSWD_len < 19; ++ PSWD_len)
   \                     ??SampleApp_ProcessEvent_31:
   \   000424   75..00       MOV       ?V4,#0x0
   \   000427   75..00       MOV       ?V5,#0x0
    390                          if (PSWD[PSWD_len] == '\0') break;
   \                     ??SampleApp_ProcessEvent_32:
   \   00042A   741D         MOV       A,#0x1d
   \   00042C   12....       LCALL     ?XSTACK_DISP0_8
   \   00042F   12....       LCALL     ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000432   6011         JZ        ??SampleApp_ProcessEvent_33
   \   000434   05..         INC       ?V4
   \   000436   E5..         MOV       A,?V4
   \   000438   7002         JNZ       ??SampleApp_ProcessEvent_34
   \   00043A   05..         INC       ?V5
   \                     ??SampleApp_ProcessEvent_34:
   \   00043C   C3           CLR       C
   \   00043D   9413         SUBB      A,#0x13
   \   00043F   E5..         MOV       A,?V5
   \   000441   9400         SUBB      A,#0x0
   \   000443   40E5         JC        ??SampleApp_ProcessEvent_32
    391                      osal_memcpy(_buffer_pointer, PSWD, PSWD_len);
   \                     ??SampleApp_ProcessEvent_33:
   \   000445                ; Setup parameters for call to function osal_memcpy
   \   000445   741D         MOV       A,#0x1d
   \   000447   12....       LCALL     ?XSTACK_DISP100_8
   \   00044A   88..         MOV       ?V0,R0
   \   00044C   89..         MOV       ?V1,R1
   \   00044E   75..00       MOV       ?V2,#0x0
   \   000451   78..         MOV       R0,#?V0
   \   000453   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000456   AC..         MOV       R4,?V4
   \   000458   AD..         MOV       R5,?V5
   \   00045A   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   00045D   12....       LCALL     ?DEALLOC_XSTACK8
    392                      _buffer_pointer += PSWD_len;
    393                      osal_memcpy(_buffer_pointer, "\"\r\n\0", 4);
   \   000460                ; Setup parameters for call to function osal_memcpy
   \   000460   75....       MOV       ?V0,#`?<Constant "\\"\\r\\n\\000">` & 0xff
   \   000463   75....       MOV       ?V1,#(`?<Constant "\\"\\r\\n\\000">` >> 8) & 0xff
   \   000466   78..         MOV       R0,#?V0
   \   000468   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00046B   7C04         MOV       R4,#0x4
   \   00046D   7D00         MOV       R5,#0x0
   \   00046F   E5..         MOV       A,?V6
   \   000471   25..         ADD       A,?V4
   \   000473   FA           MOV       R2,A
   \   000474   E5..         MOV       A,?V7
   \   000476   35..         ADDC      A,?V5
   \   000478   FB           MOV       R3,A
   \   000479   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00047C   12....       LCALL     ?DEALLOC_XSTACK8
    394                      debug(_buffer);
   \   00047F                ; Setup parameters for call to function _UARTSend
   \   00047F   7445         MOV       A,#0x45
   \   000481   12....       LCALL     ?XSTACK_DISP101_8
   \   000484   7900         MOV       R1,#0x0
   \   000486   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    395          
    396                      do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_35:
   \   000489   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   00048C   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   00048F                ; Setup parameters for call to function _UARTSend
   \   00048F   12....       LCALL     ?Subroutine9 & 0xFFFF
    397                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_8:
   \   000492   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000495   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000498   12....       LCALL     ?DEALLOC_XSTACK8
   \   00049B   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_35
    398                      do debug_and_print("AT+CWJAP=\"liuchen\",\"liuchen88\"\r\n");
   \                     ??SampleApp_ProcessEvent_36:
   \   00049E   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">` & 0xff
   \   0004A1   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">` >> 8) & 0xff
   \   0004A4                ; Setup parameters for call to function _UARTSend
   \   0004A4   12....       LCALL     ?Subroutine9 & 0xFFFF
    399                      while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \                     ??CrossCallReturnLabel_9:
   \   0004A7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004AA   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   0004AC   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   0004AE   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0004B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004B4   B900E7       CJNE      R1,#0x0,??SampleApp_ProcessEvent_36
    400                      do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_37:
   \   0004B7   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   0004BA   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   0004BD                ; Setup parameters for call to function _UARTSend
   \   0004BD   12....       LCALL     ?Subroutine9 & 0xFFFF
    401                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_10:
   \   0004C0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004C3   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0004C6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004C9   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_37
    402                      do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_38:
   \   0004CC   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0004CF   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0004D2                ; Setup parameters for call to function _UARTSend
   \   0004D2   12....       LCALL     ?Subroutine9 & 0xFFFF
    403                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_11:
   \   0004D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004D8   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0004DB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004DE   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_38
    404                      do debug_and_print("AT+CIPSTART=\"TCP\",\"192.168.1.104\",8000\r\n");
   \                     ??SampleApp_ProcessEvent_39:
   \   0004E1   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` & 0xff
   \   0004E4   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` >> 8) & 0xff
   \   0004E7                ; Setup parameters for call to function _UARTSend
   \   0004E7   12....       LCALL     ?Subroutine9 & 0xFFFF
    405                      while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \                     ??CrossCallReturnLabel_12:
   \   0004EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004ED   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   0004EF   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   0004F1   12....       LCALL     ??Subroutine19_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0004F4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004F7   B900E7       CJNE      R1,#0x0,??SampleApp_ProcessEvent_39
    406                      debug_and_print("AT+CIPSEND\r\n");
   \   0004FA   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   0004FD   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   000500                ; Setup parameters for call to function _UARTSend
   \   000500   12....       LCALL     ?Subroutine9 & 0xFFFF
    407                  } while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_13:
   \   000503   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000506   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000508   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00050A   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   00050C   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   00050E   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000511   12....       LCALL     ?DEALLOC_XSTACK8
   \   000514   E9           MOV       A,R1
   \   000515   6003         JZ        $+5
   \   000517   02....       LJMP      ??SampleApp_ProcessEvent_25 & 0xFFFF
    408                  
    409                  // drive initial events
    410                  _delay_ms(50);
   \   00051A                ; Setup parameters for call to function _delay_ms
   \   00051A   7A32         MOV       R2,#0x32
   \   00051C   7B00         MOV       R3,#0x0
   \   00051E   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    411                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000521                ; Setup parameters for call to function osal_set_event
   \   000521   7A08         MOV       R2,#0x8
   \   000523   12....       LCALL     ??Subroutine22_0 & 0xFFFF
    412                  return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_48:
   \   000526   EE           MOV       A,R6
   \   000527   6404         XRL       A,#0x4
   \   000529   8044         SJMP      ??SampleApp_ProcessEvent_8
    413              }
    414          
    415              if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_24:
   \   00052B   EA           MOV       A,R2
   \   00052C   5408         ANL       A,#0x8
   \   00052E   6044         JZ        ??SampleApp_ProcessEvent_40
    416                  debug_and_print("heart beat\r\n");
   \   000530   75....       MOV       ?V0,#`?<Constant "heart beat\\r\\n">` & 0xff
   \   000533   75....       MOV       ?V1,#(`?<Constant "heart beat\\r\\n">` >> 8) & 0xff
   \   000536                ; Setup parameters for call to function _UARTSend
   \   000536   12....       LCALL     ?Subroutine17 & 0xFFFF
    417                  if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \                     ??CrossCallReturnLabel_24:
   \   000539                ; Setup parameters for call to function wait_for
   \   000539   75..C8       MOV       ?V0,#-0x38
   \   00053C   75..00       MOV       ?V1,#0x0
   \   00053F   78..         MOV       R0,#?V0
   \   000541   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000544   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000546   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000548   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   00054A   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   00054C   12....       LCALL     ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00054F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000552   E9           MOV       A,R1
   \   000553   600E         JZ        ??SampleApp_ProcessEvent_41
    418                      debug("WIFI RESET\r\n");
   \   000555                ; Setup parameters for call to function _UARTSend
   \   000555   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   000557   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   000559   7900         MOV       R1,#0x0
   \   00055B   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    419                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   00055E                ; Setup parameters for call to function osal_set_event
   \   00055E   12....       LCALL     ?Subroutine5 & 0xFFFF
    420                  } else {
   \                     ??CrossCallReturnLabel_45:
   \   000561   8009         SJMP      ??CrossCallReturnLabel_43
    421                      osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_41:
   \   000563                ; Setup parameters for call to function osal_start_timerEx
   \   000563   7CD0         MOV       R4,#-0x30
   \   000565   7D07         MOV       R5,#0x7
   \   000567   7A08         MOV       R2,#0x8
   \   000569   12....       LCALL     ??Subroutine21_0 & 0xFFFF
    422                  }
    423                  return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??CrossCallReturnLabel_43:
   \   00056C   EE           MOV       A,R6
   \   00056D   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_8:
   \   00056F   FA           MOV       R2,A
   \   000570   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_6:
   \   000571   FB           MOV       R3,A
   \   000572   8004         SJMP      ??SampleApp_ProcessEvent_42
    424              }
    425          
    426              // Discard unknown events
    427              return 0;
   \                     ??SampleApp_ProcessEvent_40:
   \   000574   7A00         MOV       R2,#0x0
   \   000576   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_42:
   \   000578   7477         MOV       A,#0x77
   \   00057A                REQUIRE ?Subroutine0
   \   00057A                REQUIRE _A_P0
   \   00057A                ; // Fall through to label ?Subroutine0
    428          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V4
   \   000004   F582         MOV       DPL,A
   \   000006   E583         MOV       A,DPH
   \   000008   35..         ADDC      A,?V5
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine19_0
   \   000004                ; // Fall through to label ??Subroutine19_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine19_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine20_0
   \   000004                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V0,A
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7A01         MOV       R2,#0x1
   \   000002                REQUIRE ??Subroutine21_0
   \   000002                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine22_0
   \   000002                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AA..         MOV       R2,?V6
   \   000002   AB..         MOV       R3,?V7
   \   000004                REQUIRE ??Subroutine23_0
   \   000004                ; // Fall through to label ??Subroutine23_0
    429          
    430          /*********************************************************************
    431           * Event Generation Functions
    432           */
    433          /*********************************************************************
    434           * @fn            SampleApp_HandleKeys
    435           *
    436           * @brief     Handles all key events for this device.
    437           *
    438           * @param     shift - true if in shift/alt.
    439           * @param     keys - bit field for key events. Valid entries:
    440           *                                 HAL_KEY_SW_2
    441           *                                 HAL_KEY_SW_1
    442           *
    443           * @return    none
    444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    446          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    447              (void)shift;    // Intentionally unreferenced parameter
    448              
    449              if ( keys & HAL_KEY_SW_6 ) { // S1
    450              }
    451          
    452              if ( keys & HAL_KEY_SW_7 ) { // S2
    453              }
    454          }
   \   000000   02....       LJMP      ?BRET
    455          
    456          /*********************************************************************
    457           * @fn            SampleApp_MessageMSGCB
    458           *
    459           * @brief     Data message processor callback.    This function processes
    460           *                    any incoming data - probably from other devices.    So, based
    461           *                    on cluster ID, perform the intended action.
    462           *
    463           * @param     none
    464           *
    465           * @return    none
    466           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    468          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    469              uint16 flashTime;
    470          
    471              switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    472              {
    473                  case SAMPLEAPP_PERIODIC_CLUSTERID:
    474                      HalUARTWrite(0,"I get data\n",11);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    475                      HalUARTWrite(0, &pkt->cmd.Data[0],10);
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00003B   E0           MOVX      A,@DPTR
   \   00003C   FA           MOV       R2,A
   \   00003D   A3           INC       DPTR
   \   00003E   E0           MOVX      A,@DPTR
   \   00003F   FB           MOV       R3,A
   \   000040   7900         MOV       R1,#0x0
   \   000042   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    476                      HalUARTWrite(0,"\n",1);
   \   000045                ; Setup parameters for call to function HalUARTWrite
   \   000045   7C01         MOV       R4,#0x1
   \   000047   7D00         MOV       R5,#0x0
   \   000049   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   00004B   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00004D   7900         MOV       R1,#0x0
   \   00004F   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    477                      break;
   \   000052   8035         SJMP      ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000054   EA           MOV       A,R2
   \   000055   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000058   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00005B                ; Setup parameters for call to function HalLedBlink
   \   00005B   8882         MOV       DPL,R0
   \   00005D   F583         MOV       DPH,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FA           MOV       R2,A
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   C8           XCH       A,R0
   \   00006C   F9           MOV       R1,A
   \   00006D   EA           MOV       A,R2
   \   00006E   28           ADD       A,R0
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E4           CLR       A
   \   000072   39           ADDC      A,R1
   \   000073   F5..         MOV       ?V1,A
   \   000075   7402         MOV       A,#0x2
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?US_SHR
   \   00007C   AC..         MOV       R4,?V0
   \   00007E   AD..         MOV       R5,?V1
   \   000080   7B32         MOV       R3,#0x32
   \   000082   7A04         MOV       R2,#0x4
   \   000084   7908         MOV       R1,#0x8
    478          
    479                  case SAMPLEAPP_FLASH_CLUSTERID:
    480                      flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    481                      HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000086   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    482                      break;
    483              }
    484          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000089   02....       LJMP      ??Subroutine25_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET
    485          
    486          /*********************************************************************
    487           * @fn            SampleApp_SendPeriodicMessage
    488           *
    489           * @brief     Send the periodic message.
    490           *
    491           * @param     none
    492           *
    493           * @return    none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void SampleApp_SendPeriodicMessage( void ) {
   \                     SampleApp_SendPeriodicMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    496              uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    497              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc, SAMPLEAPP_PERIODIC_CLUSTERID,
    498                  10, data, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    499              } else {
    500                  // Error occurred in request to send.
    501              }
    502          }
   \   00005C   740A         MOV       A,#0xa
   \   00005E   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine25_0
   \   000003                ; // Fall through to label ??Subroutine25_0
    503          
    504          /*********************************************************************
    505           * @fn            SampleApp_SendFlashMessage
    506           *
    507           * @brief     Send the flash message to group 1.
    508           *
    509           * @param     flashTime - in milliseconds
    510           *
    511           * @return    none
    512           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          void SampleApp_SendFlashMessage(uint16 flashTime) {
   \                     SampleApp_SendFlashMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    514              uint8 buffer[3];
    515              buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    516              buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    517              buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    518          
    519              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc, 
    520                  SAMPLEAPP_FLASH_CLUSTERID, 3, buffer, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    521              } else {
    522                  // Error occurred in request to send.
    523              }
    524          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   80..         SJMP      ?Subroutine1
    525          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    526          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    527              va_list arg_ptr;
    528              uint8 _buffer[UartDefaultTxLen], cnt;
    529              uint16 length = 0;
    530              for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    531                  _buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    532              va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
    533              length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \   000028                ; Setup parameters for call to function vsprintf
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V0,R0
   \   00002E   89..         MOV       ?V1,R1
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   EA           MOV       A,R2
   \   000036   FC           MOV       R4,A
   \   000037   EB           MOV       A,R3
   \   000038   FD           MOV       R5,A
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   8A..         MOV       ?V0,R2
   \   000048   8B..         MOV       ?V1,R3
   \   00004A   AC..         MOV       R4,?V0
   \   00004C   AD..         MOV       R5,?V1
    534              va_end(arg_ptr);
    535              HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00004E                ; Setup parameters for call to function HalUARTWrite
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   EE           MOV       A,R6
   \   000054   F9           MOV       R1,A
   \   000055   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    536          }
   \   000058   7442         MOV       A,#0x42
   \   00005A                REQUIRE ?Subroutine1
   \   00005A                ; // Fall through to label ?Subroutine1
    537          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    539              for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    540                  _buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00001A   EA           MOV       A,R2
   \   00001B   28           ADD       A,R0
   \   00001C   F582         MOV       DPL,A
   \   00001E   EB           MOV       A,R3
   \   00001F   39           ADDC      A,R1
   \   000020   F583         MOV       DPH,A
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   E0           MOVX      A,@DPTR
   \   000029   2401         ADD       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   C3           CLR       C
   \   000036   E0           MOVX      A,@DPTR
   \   000037   9432         SUBB      A,#0x32
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   9400         SUBB      A,#0x0
   \   00003D   40D4         JC        ??_UARTRead_0
    541              *length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   00003F                ; Setup parameters for call to function HalUARTRead
   \   00003F   7C32         MOV       R4,#0x32
   \   000041   7D00         MOV       R5,#0x0
   \   000043   A9..         MOV       R1,?V0
   \   000045   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    542          }
   \   000051                REQUIRE ?Subroutine2
   \   000051                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    543          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    545              while (timeout --) {
    546                 _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    547              }
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    548          }
   \   000022   80..         SJMP      ?Subroutine2
    549          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    551              uint8 cnt;
    552              while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    553                  cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    554                  while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    555                      asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    556                  }
    557              }    
    558          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    559          
    560          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV       A,#-0x34
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    562              uint16 wait_len, read_len, err_len;
    563              int16 i, index;
    564              uint8 buffer[UartDefaultRxLen], flag;
    565              wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    566              err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7444         MOV       A,#0x44
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    567              while (1) {
    568                  _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     ?Subroutine13 & 0xFFFF
    569                  _delay_ms(1);
    570                  if (read_len > 2) { // at least 0x0D 0x0A
   \                     ??CrossCallReturnLabel_16:
   \   00003C   9403         SUBB      A,#0x3
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   9400         SUBB      A,#0x0
   \   000042   5003         JNC       $+5
   \   000044   02....       LJMP      ??wait_for_1 & 0xFFFF
    571                      index = 0;
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    572                      for (i = read_len - 1; i >= 0; i --) {
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   24FF         ADD       A,#-0x1
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   000059   E8           MOV       A,R0
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   18           DEC       R0
   \   00005D   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   F9           MOV       R1,A
   \   000061   C3           CLR       C
   \   000062   E9           MOV       A,R1
   \   000063   9400         SUBB      A,#0x0
   \   000065   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000067   65D0         XRL       A,PSW
   \   000069   33           RLC       A
   \   00006A   4032         JC        ??wait_for_4
    573                          if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E582         MOV       A,DPL
   \   000073   28           ADD       A,R0
   \   000074   F582         MOV       DPL,A
   \   000076   E583         MOV       A,DPH
   \   000078   39           ADDC      A,R1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   640A         XRL       A,#0xa
   \   00007E   70D9         JNZ       ??wait_for_3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   24FF         ADD       A,#-0x1
   \   000089   FC           MOV       R4,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   34FF         ADDC      A,#-0x1
   \   00008E   FD           MOV       R5,A
   \   00008F   EC           MOV       A,R4
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??wait_for_5
   \   000093   ED           MOV       A,R5
   \   000094   69           XRL       A,R1
   \                     ??wait_for_5:
   \   000095   60C2         JZ        ??wait_for_3
    574                              index = i + 1;
   \   000097   E8           MOV       A,R0
   \   000098   2401         ADD       A,#0x1
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
    575                              break;
    576                          }
    577                      }
    578                      
    579                      if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   00009E   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000A1   65..         XRL       A,?V2
   \   0000A3   7003         JNZ       ??wait_for_6
   \   0000A5   E9           MOV       A,R1
   \   0000A6   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000A8   703B         JNZ       ??wait_for_7
    580                          flag = 1;
    581                          for (i = 0; i < err_len; i ++) {
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   801F         SJMP      ??wait_for_8
    582                              if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000B0   EA           MOV       A,R2
   \   0000B1   28           ADD       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EB           MOV       A,R3
   \   0000B4   39           ADDC      A,R1
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine14 & 0xFFFF
    583                                  flag = 0;
    584                                  break;
    585                              }
    586                          }
   \                     ??CrossCallReturnLabel_18:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   28           ADD       A,R0
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6C           XRL       A,R4
   \   0000C8   701B         JNZ       ??wait_for_7
   \   0000CA   08           INC       R0
   \   0000CB   E8           MOV       A,R0
   \   0000CC   7001         JNZ       ??wait_for_8
   \   0000CE   09           INC       R1
   \                     ??wait_for_8:
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V2
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V3
   \   0000D6   40D8         JC        ??wait_for_9
    587                          if (flag == 1) {
    588                              debug(err);
   \   0000D8                ; Setup parameters for call to function _UARTSend
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    589                              return 1;
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   8060         SJMP      ??wait_for_10
    590                          }
    591                      }
    592          
    593                      if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000E5   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000E8   65..         XRL       A,?V6
   \   0000EA   7003         JNZ       ??wait_for_11
   \   0000EC   E9           MOV       A,R1
   \   0000ED   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   0000EF   703D         JNZ       ??wait_for_1
    594                          flag = 1;
    595                          for (i = 0; i < wait_len; i ++) {
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   8021         SJMP      ??wait_for_12
    596                              if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   28           ADD       A,R0
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EB           MOV       A,R3
   \   0000FB   39           ADDC      A,R1
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine14 & 0xFFFF
    597                                  flag = 0;
    598                                  break;
    599                              }
    600                          }
   \                     ??CrossCallReturnLabel_19:
   \   000105   E5..         MOV       A,?V0
   \   000107   28           ADD       A,R0
   \   000108   F582         MOV       DPL,A
   \   00010A   E5..         MOV       A,?V1
   \   00010C   39           ADDC      A,R1
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6C           XRL       A,R4
   \   000111   701B         JNZ       ??wait_for_1
   \   000113   08           INC       R0
   \   000114   E8           MOV       A,R0
   \   000115   7001         JNZ       ??wait_for_12
   \   000117   09           INC       R1
   \                     ??wait_for_12:
   \   000118   C3           CLR       C
   \   000119   E8           MOV       A,R0
   \   00011A   95..         SUBB      A,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   95..         SUBB      A,?V7
   \   00011F   40D6         JC        ??wait_for_13
    601                          if (flag == 1) {
    602                              debug(str);
   \   000121                ; Setup parameters for call to function _UARTSend
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   7900         MOV       R1,#0x0
   \   000127   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    603                              return 0;
   \   00012A   7900         MOV       R1,#0x0
   \   00012C   8017         SJMP      ??wait_for_10
    604                          }
    605                      }
    606                  }
    607                  timeout --;
    608                  if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00012E   E5..         MOV       A,?V4
   \   000130   24FF         ADD       A,#-0x1
   \   000132   F5..         MOV       ?V4,A
   \   000134   E5..         MOV       A,?V5
   \   000136   34FF         ADDC      A,#-0x1
   \   000138   F5..         MOV       ?V5,A
   \   00013A   E5..         MOV       A,?V4
   \   00013C   45..         ORL       A,?V5
   \   00013E   6003         JZ        $+5
   \   000140   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000143   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000145   7434         MOV       A,#0x34
    609              }
   \   000147   02....       LJMP      ?Subroutine0 & 0xFFFF
    610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    611          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    613              print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine11 & 0xFFFF
    614              _delay_ms(10);
    615              print("+++");
   \                     ??CrossCallReturnLabel_65:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine11 & 0xFFFF
    616              _delay_ms(10);
    617              print("\r\n");
   \                     ??CrossCallReturnLabel_66:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    618              _delay_ms(10);
    619          }
   \                     ??CrossCallReturnLabel_67:
   \   000012   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine27_0
   \   000004                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET
    620          
    621          
    622          // 当前逻辑下每次连接只能发送一条消息，之后就要断开连接

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          uint16 WiFiRecv(uint8 *buff) {
   \                     WiFiRecv:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV       A,#-0x34
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    624              uint16 read_len, l_index, r_index;
    625              uint8 buffer[UartDefaultRxLen];
    626              while (1) {
    627                  _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??WiFiRecv_0:
   \   00000E                ; Setup parameters for call to function _UARTRead
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
    628                  _delay_ms(1);
    629                  if (read_len > 34) { // at least "0,CONNECT\r\n\r\n+IPD,0,2:\r\n0,CLOSED\r\n"
   \                     ??CrossCallReturnLabel_17:
   \   00001A   9423         SUBB      A,#0x23
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   9400         SUBB      A,#0x0
   \   000020   40EC         JC        ??WiFiRecv_0
    630                      l_index = 0;
   \   000022   7E00         MOV       R6,#0x0
   \   000024   7F00         MOV       R7,#0x0
   \                     ??WiFiRecv_1:
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E582         MOV       A,DPL
   \   00002D   2E           ADD       A,R6
   \   00002E   F582         MOV       DPL,A
   \   000030   E583         MOV       A,DPH
   \   000032   3F           ADDC      A,R7
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   643A         XRL       A,#0x3a
   \   000038   600F         JZ        ??WiFiRecv_2
    631                      while (l_index < read_len && buffer[l_index] != ':') {
    632                          l_index ++;
   \   00003A   0E           INC       R6
   \   00003B   EE           MOV       A,R6
   \   00003C   7001         JNZ       ??WiFiRecv_3
   \   00003E   0F           INC       R7
    633                      }
   \                     ??WiFiRecv_3:
   \   00003F   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000042   C3           CLR       C
   \   000043   EE           MOV       A,R6
   \   000044   98           SUBB      A,R0
   \   000045   EF           MOV       A,R7
   \   000046   99           SUBB      A,R1
   \   000047   40DD         JC        ??WiFiRecv_1
    634                      if (l_index == read_len) continue;
   \                     ??WiFiRecv_2:
   \   000049   85..82       MOV       DPL,?XSP + 0
   \   00004C   85..83       MOV       DPH,?XSP + 1
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   6E           XRL       A,R6
   \   000051   7003         JNZ       ??WiFiRecv_4
   \   000053   A3           INC       DPTR
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6F           XRL       A,R7
   \                     ??WiFiRecv_4:
   \   000056   60B6         JZ        ??WiFiRecv_0
    635                      r_index = ++ l_index;
   \   000058   0E           INC       R6
   \   000059   EE           MOV       A,R6
   \   00005A   7001         JNZ       ??WiFiRecv_5
   \   00005C   0F           INC       R7
   \                     ??WiFiRecv_5:
   \   00005D   8E..         MOV       ?V0,R6
   \   00005F   8F..         MOV       ?V1,R7
   \   000061   8015         SJMP      ??WiFiRecv_6
    636                      while (r_index < read_len && buffer[r_index] != '\n') {
   \                     ??WiFiRecv_7:
   \   000063   7402         MOV       A,#0x2
   \   000065   12....       LCALL     ?XSTACK_DISP0_8
   \   000068   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00006B   E0           MOVX      A,@DPTR
   \   00006C   640A         XRL       A,#0xa
   \   00006E   6028         JZ        ??WiFiRecv_8
    637                          r_index ++;
   \   000070   05..         INC       ?V0
   \   000072   E5..         MOV       A,?V0
   \   000074   7002         JNZ       ??WiFiRecv_6
   \   000076   05..         INC       ?V1
    638                      }
   \                     ??WiFiRecv_6:
   \   000078   12....       LCALL     ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00007B   C3           CLR       C
   \   00007C   E5..         MOV       A,?V0
   \   00007E   98           SUBB      A,R0
   \   00007F   E5..         MOV       A,?V1
   \   000081   99           SUBB      A,R1
   \   000082   40DF         JC        ??WiFiRecv_7
    639                      if (r_index == read_len) continue;
   \   000084   85..82       MOV       DPL,?XSP + 0
   \   000087   85..83       MOV       DPH,?XSP + 1
   \   00008A   E0           MOVX      A,@DPTR
   \   00008B   65..         XRL       A,?V0
   \   00008D   7004         JNZ       ??WiFiRecv_9
   \   00008F   A3           INC       DPTR
   \   000090   E0           MOVX      A,@DPTR
   \   000091   65..         XRL       A,?V1
   \                     ??WiFiRecv_9:
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??WiFiRecv_0 & 0xFFFF
    640                      buffer[++ r_index] = '\0';
   \                     ??WiFiRecv_8:
   \   000098   05..         INC       ?V0
   \   00009A   E5..         MOV       A,?V0
   \   00009C   7002         JNZ       ??WiFiRecv_10
   \   00009E   05..         INC       ?V1
   \                     ??WiFiRecv_10:
   \   0000A0   7402         MOV       A,#0x2
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
    641                      // TODO: 这里有个bug，当连接数较多时，可能出现
    642                      if (strcmp((char *)(buffer + r_index + 1), ",CLOSED\r\n") == 0) {
   \   0000AA                ; Setup parameters for call to function strcmp
   \   0000AA   7C..         MOV       R4,#`?<Constant ",CLOSED\\r\\n">` & 0xff
   \   0000AC   7D..         MOV       R5,#(`?<Constant ",CLOSED\\r\\n">` >> 8) & 0xff
   \   0000AE   A3           INC       DPTR
   \   0000AF   AA82         MOV       R2,DPL
   \   0000B1   AB83         MOV       R3,DPH
   \   0000B3   12....       LCALL     `??strcmp::?relay`; Banked call to: strcmp
   \   0000B6   EA           MOV       A,R2
   \   0000B7   4B           ORL       A,R3
   \   0000B8   6003         JZ        $+5
   \   0000BA   02....       LJMP      ??WiFiRecv_0 & 0xFFFF
    643                          debug(buffer + l_index);
   \   0000BD   7402         MOV       A,#0x2
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E582         MOV       A,DPL
   \   0000C4   2E           ADD       A,R6
   \   0000C5   F5..         MOV       ?V2,A
   \   0000C7   E583         MOV       A,DPH
   \   0000C9   3F           ADDC      A,R7
   \   0000CA   F5..         MOV       ?V3,A
   \   0000CC                ; Setup parameters for call to function _UARTSend
   \   0000CC   AA..         MOV       R2,?V2
   \   0000CE   FB           MOV       R3,A
   \   0000CF   7900         MOV       R1,#0x0
   \   0000D1   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    644                          strcpy((char *)buff, (char *)(buffer + l_index));
   \   0000D4                ; Setup parameters for call to function strcpy
   \   0000D4   AC..         MOV       R4,?V2
   \   0000D6   AD..         MOV       R5,?V3
   \   0000D8   AA..         MOV       R2,?V4
   \   0000DA   AB..         MOV       R3,?V5
   \   0000DC   12....       LCALL     `??strcpy::?relay`; Banked call to: strcpy
    645                          debug("%d\r\n", r_index + 1 - l_index);
   \   0000DF                ; Setup parameters for call to function _UARTSend
   \   0000DF   E5..         MOV       A,?V0
   \   0000E1   2401         ADD       A,#0x1
   \   0000E3   F8           MOV       R0,A
   \   0000E4   E4           CLR       A
   \   0000E5   35..         ADDC      A,?V1
   \   0000E7   F9           MOV       R1,A
   \   0000E8   E8           MOV       A,R0
   \   0000E9   C3           CLR       C
   \   0000EA   9E           SUBB      A,R6
   \   0000EB   F5..         MOV       ?V2,A
   \   0000ED   E9           MOV       A,R1
   \   0000EE   9F           SUBB      A,R7
   \   0000EF   F5..         MOV       ?V3,A
   \   0000F1   78..         MOV       R0,#?V2
   \   0000F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000F6   7A..         MOV       R2,#`?<Constant "%d\\r\\n">` & 0xff
   \   0000F8   7B..         MOV       R3,#(`?<Constant "%d\\r\\n">` >> 8) & 0xff
   \   0000FA   7900         MOV       R1,#0x0
   \   0000FC   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   0000FF   7402         MOV       A,#0x2
   \   000101   12....       LCALL     ?DEALLOC_XSTACK8
    646                          return (r_index - l_index);
   \   000104   E5..         MOV       A,?V0
   \   000106   C3           CLR       C
   \   000107   9E           SUBB      A,R6
   \   000108   FA           MOV       R2,A
   \   000109   E5..         MOV       A,?V1
   \   00010B   9F           SUBB      A,R7
   \   00010C   FB           MOV       R3,A
   \   00010D   7434         MOV       A,#0x34
   \   00010F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000112   7F06         MOV       R7,#0x6
   \   000114   02....       LJMP      ?BANKED_LEAVE_XDATA
    647                      }
    648                  }
    649              }
    650          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E582         MOV       A,DPL
   \   000002   25..         ADD       A,?V0
   \   000004   F582         MOV       DPL,A
   \   000006   E583         MOV       A,DPH
   \   000008   35..         ADDC      A,?V1
   \   00000A   F583         MOV       DPH,A
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiRecv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiRecv

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter AP Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter AP Mode\015\012"
   \            72204150
   \            204D6F64
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter STA Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter STA Mode\015\012"
   \            72205354
   \            41204D6F
   \            64650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=2\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=2\015\012"
   \            574D4F44
   \            453D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
   \   000000   41542B43     DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"
   \            57534150
   \            3D224553
   \            50383236
   \            36222C22
   \            31323334
   \            3536222C
   \            31312C30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=0\015\012"
   \            49504D4F
   \            44453D30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8266\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3236360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SSID">`:
   \   000000   53534944     DB "SSID"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PSWD">`:
   \   000000   50535744     DB "PSWD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RST\\r\\n">`:
   \   000000   41542B52     DB "AT+RST\015\012"
   \            53540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready\\r\\n">`:
   \   000000   72656164     DB "ready\015\012"
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"">`:
   \   000000   41542B43     DB "AT+CWJAP=\""
   \            574A4150
   \            3D2200  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read Flash Failed\\r\\n">`:
   \   000000   52656164     DB "Read Flash Failed\015\012"
   \            20466C61
   \            73682046
   \            61696C65
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\",\\"">`:
   \   000000   222C2200     DB "\",\""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"\\r\\n\\000">`:
   \   000000   220D0A00     DB 22H, 0DH, 0AH, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"liuchen\\",\\"l...">`:
   \   000000   41542B43     DB "AT+CWJAP=\"liuchen\",\"liuchen88\"\015\012"
   \            574A4150
   \            3D226C69
   \            75636865
   \            6E222C22
   \            6C697563
   \            68656E38
   \            38220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"192.168.1.104\",8000\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2231
   \            39322E31
   \            36382E31
   \            2E313034
   \            222C3830
   \            30300D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "heart beat\\r\\n">`:
   \   000000   68656172     DB "heart beat\015\012"
   \            74206265
   \            61740D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",CLOSED\\r\\n">`:
   \   000000   2C434C4F     DB ",CLOSED\015\012"
   \            5345440D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d\\r\\n">`:
   \   000000   25640D0A     DB "%d\015\012"
   \            00      

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   SampleApp_HandleKeys
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_set_event
      0    145   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
        0     10   -> HalUARTWrite
      0    139   SampleApp_ProcessEvent
        0    135   -> HalUARTOpen
        0    135   -> SampleApp_MessageMSGCB
        0    135   -> SampleApp_SendPeriodicMessage
        0    135   -> WiFiRecv
        0    135   -> _UARTSend
        0    135   -> _delay_ms
        0    135   -> exit_send
        0    138   -> osal_memcmp
        0    138   -> osal_memcpy
        0    135   -> osal_msg_deallocate
        0    135   -> osal_msg_receive
        0    137   -> osal_nv_item_init
        0    139   -> osal_nv_read
        0    139   -> osal_nv_write
        0    135   -> osal_rand
        0    135   -> osal_set_event
        0    135   -> osal_start_timerEx
        0    137   -> wait_for
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0    164   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0    203   WiFiRecv
        0     66   -> _UARTRead
        0     66   -> _UARTSend
        0     68   -> _UARTSend
        0     66   -> _delay_ms
        0     66   -> strcmp
        0     66   -> strcpy
      0     77   _UARTRead
        0      9   -> HalUARTRead
      1    213   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0    144   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      0    144   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    205   wait_for
        0     68   -> _UARTRead
        0     68   -> _UARTSend
        0     68   -> _delay_ms
        0     68   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant "%d\r\n">
       4  ?<Constant "+++">
      10  ?<Constant ",CLOSED\r\n">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=0\r\n">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8266\r\n">
      41  ?<Constant "AT+CIPSTART=\"TCP\",\"19...">
      11  ?<Constant "AT+CWJAP=\"">
      33  ?<Constant "AT+CWJAP=\"liuchen\",\"l...">
      14  ?<Constant "AT+CWMODE=1\r\n">
      14  ?<Constant "AT+CWMODE=2\r\n">
      35  ?<Constant "AT+CWSAP=\"ESP8266\",\"1...">
       9  ?<Constant "AT+RST\r\n">
       9  ?<Constant "CLOSED\r\n">
       8  ?<Constant "ERROR\r\n">
      16  ?<Constant "Enter AP Mode\r\n">
      17  ?<Constant "Enter STA Mode\r\n">
       7  ?<Constant "FAIL\r\n">
       8  ?<Constant "Group 1">
      12  ?<Constant "I get data\n">
       5  ?<Constant "OK\r\n">
       5  ?<Constant "PSWD">
      20  ?<Constant "Read Flash Failed\r\n">
       5  ?<Constant "SSID">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       4  ?<Constant "\",\"">
       5  ?<Constant "\"\r\n\000">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      13  ?<Constant "heart beat\r\n">
       8  ?<Constant "ready\r\n">
      11  ?<Constant "received\r\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       4  ??Subroutine19_0
       6  ??Subroutine20_0
      11  ??Subroutine21_0
      11  ??Subroutine22_0
       6  ??Subroutine23_0
       5  ??Subroutine24_0
       5  ??Subroutine25_0
       6  ??Subroutine26_0
      13  ??Subroutine27_0
       8  ?Subroutine0
       3  ?Subroutine1
       4  ?Subroutine10
       4  ?Subroutine11
       5  ?Subroutine12
      21  ?Subroutine13
      13  ?Subroutine14
      13  ?Subroutine15
       9  ?Subroutine16
      19  ?Subroutine17
      13  ?Subroutine18
       5  ?Subroutine2
       2  ?Subroutine3
       4  ?Subroutine4
       2  ?Subroutine5
       6  ?Subroutine6
      16  ?Subroutine7
       2  ?Subroutine8
      11  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
       3  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     155  SampleApp_Init
       6  SampleApp_Init::?relay
     140  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
    1402  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     115  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      97  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     279  WiFiRecv
       6  WiFiRecv::?relay
       1  _A_P0
      81  _UARTRead
       6  _UARTRead::?relay
      90  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
      21  exit_send
       6  exit_send::?relay
     330  wait_for
       6  wait_for::?relay

 
 3 009 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   490 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    78 bytes of CODE     memory
   490 bytes of CONST    memory
     0 bytes of DATA     memory (+ 1 byte shared)
 3 009 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
