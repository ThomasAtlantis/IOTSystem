###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               17/Jul/2019  14:50:32
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EW8F12.tmp
#        (F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D HAL_LCD=FALSE -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D
#        xMT_ZDO_FUNC -D HAL_UART_DMA=1 -D HAL_UART_ISR=2 -lC
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\Gateway\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /*********************************************************************
      2              This application isn't intended to do anything useful, it is
      3              intended to be a simple example of an application's structure.
      4          
      5              This application sends it's messages either as broadcast or
      6              broadcast filtered group messages.    The other (more normal)
      7              message addressing is unicast.    Most of the other sample
      8              applications are written to support the unicast message model.
      9          
     10              Key control:
     11                  SW1:    Sends a flash command to all devices in Group 1.
     12                  SW2:    Adds/Removes (toggles) this device in and out
     13                          of Group 1.    This will enable and disable the
     14                          reception of the flash command.
     15          *********************************************************************/
     16          
     17          #include "OSAL.h"
     18          #include "ZGlobals.h"
     19          #include "AF.h"
     20          #include "aps_groups.h"
     21          #include "ZDApp.h"
     22          
     23          #include "SampleApp.h"
     24          #include "SampleAppHw.h"
     25          
     26          #include "OnBoard.h"
     27          
     28          /* HAL */
     29          #include "hal_lcd.h"
     30          #include "hal_led.h"
     31          #include "hal_key.h"
     32          #include "hal_uart.h"
     33          #include "MT_UART.h"
     34          
     35          /* SYS */
     36          #include <string.h>
     37          #include <stdio.h>
     38          #include <stdarg.h>
     39          
     40          #define UartDefaultRxLen 50
     41          #define UartDefaultTxLen 64
     42          
     43          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
     44          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
     45          #define debug_and_print(x,...) do{\
     46              _UARTSend(0,x,##__VA_ARGS__);\
     47              _UARTSend(1,x,##__VA_ARGS__);\
     48          }while(0)
     49          
     50          void _UARTSend(uint8 port, uint8 *fmt, ...);
     51          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
     52          void _delay_us(uint16 n);
     53          void _delay_ms(uint16 n);
     54          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
     55          void exit_send(void);
     56          
     57          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     58          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     59          {
     60              SAMPLEAPP_PERIODIC_CLUSTERID,
     61              SAMPLEAPP_FLASH_CLUSTERID
     62          };
     63          

   \                                 In  segment XDATA_ROM_C, align 1
     64          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     65          {
     66              SAMPLEAPP_ENDPOINT,                //    int    Endpoint;
     67              SAMPLEAPP_PROFID,                  //    uint16 AppProfId[2];
     68              SAMPLEAPP_DEVICEID,                //    uint16 AppDeviceId[2];
     69              SAMPLEAPP_DEVICE_VERSION,          //    int    AppDevVer:4;
     70              SAMPLEAPP_FLAGS,                   //    int    AppFlags:4;
     71              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     72              (cId_t *)SampleApp_ClusterList,    //    uint8  *pAppInClusterList;
     73              SAMPLEAPP_MAX_CLUSTERS,            //    uint8  AppNumInClusters;
     74              (cId_t *)SampleApp_ClusterList     //    uint8  *pAppInClusterList;
     75          };
     76          
     77          // This is the Endpoint/Interface description.    It is defined here, but
     78          // filled-in in SampleApp_Init().    Another way to go would be to fill
     79          // in the structure here and make it a "const" (in code space).    The
     80          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 SampleApp_TaskID;     // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     95                                      // This variable will be received when
     96                                      // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     98          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          uint8 SampleApp_TransID;    // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    105          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          
    109          /*********************************************************************
    110           * LOCAL FUNCTIONS
    111           */
    112          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    113          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    114          void SampleApp_SendPeriodicMessage( void );
    115          void SampleApp_SendFlashMessage( uint16 flashTime );
    116          
    117          /*********************************************************************
    118           * NETWORK LAYER CALLBACKS
    119           */
    120          
    121          /*********************************************************************
    122           * PUBLIC FUNCTIONS
    123           */
    124          
    125          /*********************************************************************
    126           * @fn            SampleApp_Init
    127           *
    128           * @brief     Initialization function for the Generic App Task.
    129           *            This is called during initialization and should contain
    130           *            any application specific initialization (ie. hardware
    131           *            initialization/setup, table initialization, power up
    132           *            notificaiton ... ).
    133           *
    134           * @param     task_id - the ID assigned by OSAL.    This ID should be
    135           *            used to send messages and set timers.
    136           *
    137           * @return    none
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    141              SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    142              SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    143              SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    144              
    145              MT_UartInit();
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    146              MT_UartRegisterTaskID(task_id);
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    147              
    148              // Device hardware initialization can be added here or in main() (Zmain.c).
    149              // If the hardware is application specific - add it here.
    150              // If the hardware is other parts of the device add it in main().
    151          
    152           #if defined ( BUILD_ALL_DEVICES )
    153              // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    154              // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    155              // together - if they are - we will start up a coordinator. Otherwise,
    156              // the device will start as a router.
    157              if ( readCoordinatorJumper() )
    158                  zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    159              else
    160                  zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    161          #endif // BUILD_ALL_DEVICES
    162          
    163          #if defined ( HOLD_AUTO_START )
    164              // HOLD_AUTO_START is a compile option that will surpress ZDApp
    165              //    from starting the device and wait for the application to
    166              //    start the device.
    167              ZDOInitDevice(0);
    168          #endif
    169          
    170              // Setup for the periodic message's destination address
    171              // Broadcast to everyone
    172              SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    173              SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    174              SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    175          
    176              // Setup for the flash command's destination address - Group 1
    177              SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    178              SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    179              SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine4 & 0xFFFF
    180          
    181              // Fill out the endpoint description.
    182              SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_28:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    183              SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    184              SampleApp_epDesc.simpleDesc
    185                  = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    186              SampleApp_epDesc.latencyReq = noLatencyReqs;
    187          
    188              // Register the endpoint description with the AF
    189              afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_24:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    190          
    191              // Register for all key events - This app will handle all key events
    192              RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    193          
    194              // By default, all devices start out in Group 1
    195              SampleApp_Group.ID = 0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine4 & 0xFFFF
    196              osal_memcpy(SampleApp_Group.name, "Group 1", 7);
   \                     ??CrossCallReturnLabel_29:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV       A,#0x3
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    197              aps_AddGroup(SAMPLEAPP_ENDPOINT, &SampleApp_Group);
   \   00008A                ; Setup parameters for call to function aps_AddGroup
   \   00008A   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008C   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008E   7914         MOV       R1,#0x14
   \   000090   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    198          
    199          #if defined ( LCD_SUPPORTED )
    200              HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    201          #endif
    202              osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \   000093                ; Setup parameters for call to function osal_set_event
   \   000093   7A02         MOV       R2,#0x2
   \   000095   12....       LCALL     ??Subroutine16_0 & 0xFFFF
    203          }
   \                     ??CrossCallReturnLabel_32:
   \   000098   7F03         MOV       R7,#0x3
   \   00009A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine15_0
   \   000002                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET
    204          
    205          /*********************************************************************
    206           * @fn        SampleApp_ProcessEvent
    207           *
    208           * @brief     Generic Application Task event processor.    This function
    209           *            is called to process all events for the task.    Events
    210           *            include timers, messages and any other user defined events.
    211           *
    212           * @param     task_id    - The OSAL assigned task ID.
    213           * @param     events - events to process.    This is a bit map and can
    214           *            contain more than one event.
    215           *
    216           * @return    none
    217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    219          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    220              afIncomingMSGPacket_t *MSGpkt;
    221              halUARTCfg_t uartConfig;
    222              (void)task_id;    // Intentionally unreferenced parameter
    223              if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6058         JZ        ??SampleApp_ProcessEvent_0
    224              {
    225                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8022         SJMP      ??SampleApp_ProcessEvent_1
    226                  while ( MSGpkt )
    227                  {
    228                      switch ( MSGpkt->hdr.event )
    229                      {
    230                          // Received when a key is pressed
    231                          case KEY_CHANGE:
    232                              SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state,
    233                                  ((keyChange_t *)MSGpkt)->keys );
    234                              break;
    235          
    236                          // Received when a messages is received (OTA) for this endpoint
    237                          case AF_INCOMING_MSG_CMD:
    238                              SampleApp_MessageMSGCB( MSGpkt );
    239                              break;
    240          
    241                          // Received whenever the device changes state in the network
    242                          case ZDO_STATE_CHANGE:
    243                              SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    244                              if ( (SampleApp_NwkState == DEV_ZB_COORD)
    245                                      || (SampleApp_NwkState == DEV_ROUTER)
    246                                      || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7007         JNZ       ??CrossCallReturnLabel_21
    247                              {
    248                                  // Start sending the periodic message in a regular interval.
    249                                  osal_start_timerEx( SampleApp_TaskID,
    250                                      SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    251                                      SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7C88         MOV       R4,#-0x78
   \   00002A   7D13         MOV       R5,#0x13
   \   00002C   12....       LCALL     ?Subroutine5 & 0xFFFF
    252                              }
    253                              else
    254                              {
    255                                  // Device is no longer in the network
    256                              }
    257                              break;
    258          
    259                          default:
    260                              break;
    261                      }
    262          
    263                      // Release the memory
    264                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_21:
   \   00002F                ; Setup parameters for call to function osal_msg_deallocate
   \   00002F   AA..         MOV       R2,?V0
   \   000031   AB..         MOV       R3,?V1
   \   000033   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    265          
    266                      // Next - if one is available
    267                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000036                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000036   90....       MOV       DPTR,#SampleApp_TaskID
   \   000039   E0           MOVX      A,@DPTR
   \   00003A   F9           MOV       R1,A
   \   00003B   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003E   8A..         MOV       ?V0,R2
   \   000040   8B..         MOV       ?V1,R3
   \   000042   E5..         MOV       A,?V0
   \   000044   45..         ORL       A,?V1
   \   000046   601A         JZ        ??SampleApp_ProcessEvent_4
   \   000048   85..82       MOV       DPL,?V0
   \   00004B   85..83       MOV       DPH,?V1
   \   00004E   E0           MOVX      A,@DPTR
   \   00004F   24E6         ADD       A,#-0x1a
   \   000051   6006         JZ        ??SampleApp_ProcessEvent_5
   \   000053   2449         ADD       A,#0x49
   \   000055   60BD         JZ        ??SampleApp_ProcessEvent_2
   \   000057   80D6         SJMP      ??CrossCallReturnLabel_21
   \                     ??SampleApp_ProcessEvent_5:
   \   000059                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000059   AA..         MOV       R2,?V0
   \   00005B   AB..         MOV       R3,?V1
   \   00005D   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000060   80CD         SJMP      ??CrossCallReturnLabel_21
    268                  }
    269          
    270                  // return unprocessed events
    271                  return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000062   EE           MOV       A,R6
   \   000063   FA           MOV       R2,A
   \   000064   EF           MOV       A,R7
   \   000065   6480         XRL       A,#0x80
   \   000067   02....       LJMP      ??SampleApp_ProcessEvent_6 & 0xFFFF
    272              }
    273          
    274              // Send a message out - This event is generated by a timer
    275              //    (setup in SampleApp_Init()).
    276              if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   00006A   EA           MOV       A,R2
   \   00006B   A2E0         MOV       C,0xE0 /* A   */.0
   \   00006D   5017         JNC       ??SampleApp_ProcessEvent_7
    277              {
    278                  // Send the periodic message
    279                  SampleApp_SendPeriodicMessage();
   \   00006F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00006F   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    280                  // Setup to send message again in normal period (+ a little jitter)
    281                  osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    282                          (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000072                ; Setup parameters for call to function osal_rand
   \   000072   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000075                ; Setup parameters for call to function osal_start_timerEx
   \   000075   EA           MOV       A,R2
   \   000076   2488         ADD       A,#-0x78
   \   000078   FC           MOV       R4,A
   \   000079   E4           CLR       A
   \   00007A   3413         ADDC      A,#0x13
   \   00007C   FD           MOV       R5,A
   \   00007D   12....       LCALL     ?Subroutine5 & 0xFFFF
    283          
    284                  // return unprocessed events
    285                  return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \                     ??CrossCallReturnLabel_22:
   \   000080   EE           MOV       A,R6
   \   000081   6401         XRL       A,#0x1
   \   000083   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    286              }
    287              
    288              if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_7:
   \   000086   5402         ANL       A,#0x2
   \   000088   6063         JZ        ??SampleApp_ProcessEvent_9
    289          
    290                  // initialize uart_1
    291                  uartConfig.configured           = TRUE;
   \   00008A   85..82       MOV       DPL,?XSP + 0
   \   00008D   85..83       MOV       DPH,?XSP + 1
   \   000090   7401         MOV       A,#0x1
   \   000092   F0           MOVX      @DPTR,A
    292                  uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000093   12....       LCALL     ?XSTACK_DISP0_8
   \   000096   7404         MOV       A,#0x4
   \   000098   F0           MOVX      @DPTR,A
    293                  uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   000099   7402         MOV       A,#0x2
   \   00009B   12....       LCALL     ?XSTACK_DISP0_8
   \   00009E   E4           CLR       A
   \   00009F   F0           MOVX      @DPTR,A
    294                  uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000A0   7403         MOV       A,#0x3
   \   0000A2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A5   7440         MOV       A,#0x40
   \   0000A7   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    295                  uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_25:
   \   0000AA   740A         MOV       A,#0xa
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7480         MOV       A,#-0x80
   \   0000B1   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    296                  uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_26:
   \   0000B4   7412         MOV       A,#0x12
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   7480         MOV       A,#-0x80
   \   0000BB   12....       LCALL     ??Subroutine15_0 & 0xFFFF
    297                  uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_27:
   \   0000BE   7405         MOV       A,#0x5
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   7406         MOV       A,#0x6
   \   0000C5   F0           MOVX      @DPTR,A
    298                  uartConfig.intEnable            = TRUE;
   \   0000C6   7416         MOV       A,#0x16
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   F0           MOVX      @DPTR,A
    299                  uartConfig.callBackFunc         = NULL;
   \   0000CE   741B         MOV       A,#0x1b
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   E4           CLR       A
   \   0000D4   F0           MOVX      @DPTR,A
   \   0000D5   A3           INC       DPTR
   \   0000D6   F0           MOVX      @DPTR,A
    300                  HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000D7                ; Setup parameters for call to function HalUARTOpen
   \   0000D7   AA..         MOV       R2,?XSP + 0
   \   0000D9   AB..         MOV       R3,?XSP + 1
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    301                  debug("UART_1 INITIALIZED!\r\n");
   \   0000E0                ; Setup parameters for call to function _UARTSend
   \   0000E0   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000E2   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000E4   12....       LCALL     ?Subroutine2 & 0xFFFF
    302                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
    303                  return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_30:
   \   0000E7   EE           MOV       A,R6
   \   0000E8   6402         XRL       A,#0x2
   \   0000EA   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    304              }
    305          
    306              if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_9:
   \   0000ED   EA           MOV       A,R2
   \   0000EE   5404         ANL       A,#0x4
   \   0000F0   7003         JNZ       $+5
   \   0000F2   02....       LJMP      ??SampleApp_ProcessEvent_10 & 0xFFFF
    307                  // initialize esp8266
    308                  do {
    309                      exit_send();
   \                     ??SampleApp_ProcessEvent_11:
   \   0000F5                ; Setup parameters for call to function exit_send
   \   0000F5   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    310                      do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_12:
   \   0000F8   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   0000FB   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   0000FE                ; Setup parameters for call to function _UARTSend
   \   0000FE   12....       LCALL     ?Subroutine6 & 0xFFFF
    311                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_2:
   \   000101   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000104   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000107   12....       LCALL     ?DEALLOC_XSTACK8
   \   00010A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_12
    312                      // do debug_and_print("AT+CWJAP=\"liuchen\",\"liuchen88\"\r\n");
    313                      do debug_and_print("AT+CWJAP=\"Atlantis\",\"21396878335\"\r\n");
   \                     ??SampleApp_ProcessEvent_13:
   \   00010D   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"Atlantis\\",\\"...">` & 0xff
   \   000110   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"Atlantis\\",\\"...">` >> 8) & 0xff
   \   000113                ; Setup parameters for call to function _UARTSend
   \   000113   12....       LCALL     ?Subroutine6 & 0xFFFF
    314                      while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \                     ??CrossCallReturnLabel_3:
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000119   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   00011B   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   00011D   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000120   12....       LCALL     ?DEALLOC_XSTACK8
   \   000123   B900E7       CJNE      R1,#0x0,??SampleApp_ProcessEvent_13
    315                      do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   000126   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   000129   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   00012C                ; Setup parameters for call to function _UARTSend
   \   00012C   12....       LCALL     ?Subroutine6 & 0xFFFF
    316                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_4:
   \   00012F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000132   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000135   12....       LCALL     ?DEALLOC_XSTACK8
   \   000138   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    317                      do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_15:
   \   00013B   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   00013E   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   000141                ; Setup parameters for call to function _UARTSend
   \   000141   12....       LCALL     ?Subroutine6 & 0xFFFF
    318                      while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_5:
   \   000144   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000147   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00014A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00014D   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    319                      do debug_and_print("AT+CIPSTART=\"TCP\",\"192.168.43.2\",8000\r\n");
   \                     ??SampleApp_ProcessEvent_16:
   \   000150   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` & 0xff
   \   000153   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">` >> 8) & 0xff
   \   000156                ; Setup parameters for call to function _UARTSend
   \   000156   12....       LCALL     ?Subroutine6 & 0xFFFF
    320                      // do debug_and_print("AT+CIPSTART=\"TCP\",\"192.168.1.104\",8000\r\n");
    321                      while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \                     ??CrossCallReturnLabel_6:
   \   000159   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015C   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   00015E   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   000160   12....       LCALL     ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000163   12....       LCALL     ?DEALLOC_XSTACK8
   \   000166   B900E7       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    322                      debug_and_print("AT+CIPSEND\r\n");
   \   000169   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   00016C   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   00016F                ; Setup parameters for call to function _UARTSend
   \   00016F   12....       LCALL     ?Subroutine6 & 0xFFFF
    323                  } while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_7:
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000177   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000179   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   00017B   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   00017D   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000180   12....       LCALL     ?DEALLOC_XSTACK8
   \   000183   E9           MOV       A,R1
   \   000184   6003         JZ        $+5
   \   000186   02....       LJMP      ??SampleApp_ProcessEvent_11 & 0xFFFF
    324                  
    325                  // drive initial events
    326                  _delay_ms(50);
   \   000189                ; Setup parameters for call to function _delay_ms
   \   000189   7A32         MOV       R2,#0x32
   \   00018B   7B00         MOV       R3,#0x0
   \   00018D   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    327                  osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000190                ; Setup parameters for call to function osal_set_event
   \   000190   7A08         MOV       R2,#0x8
   \   000192   12....       LCALL     ??Subroutine16_0 & 0xFFFF
    328                  return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_33:
   \   000195   EE           MOV       A,R6
   \   000196   6404         XRL       A,#0x4
   \   000198   803F         SJMP      ??SampleApp_ProcessEvent_8
    329              }
    330          
    331              if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_10:
   \   00019A   EA           MOV       A,R2
   \   00019B   5408         ANL       A,#0x8
   \   00019D   603F         JZ        ??SampleApp_ProcessEvent_17
    332                  debug_and_print("heart beat\r\n");
   \   00019F   75....       MOV       ?V0,#`?<Constant "heart beat\\r\\n">` & 0xff
   \   0001A2   75....       MOV       ?V1,#(`?<Constant "heart beat\\r\\n">` >> 8) & 0xff
   \   0001A5                ; Setup parameters for call to function _UARTSend
   \   0001A5   12....       LCALL     ?Subroutine11 & 0xFFFF
    333                  if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \                     ??CrossCallReturnLabel_12:
   \   0001A8                ; Setup parameters for call to function wait_for
   \   0001A8   75..C8       MOV       ?V0,#-0x38
   \   0001AB   75..00       MOV       ?V1,#0x0
   \   0001AE   78..         MOV       R0,#?V0
   \   0001B0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B3   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0001B5   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0001B7   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   0001B9   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   0001BB   12....       LCALL     ??Subroutine13_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0001BE   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C1   E9           MOV       A,R1
   \   0001C2   6009         JZ        ??SampleApp_ProcessEvent_18
    334                      debug("WIFI RESET\r\n");
   \   0001C4                ; Setup parameters for call to function _UARTSend
   \   0001C4   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   0001C6   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   0001C8   12....       LCALL     ?Subroutine2 & 0xFFFF
    335                      osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
    336                  } else {
   \                     ??CrossCallReturnLabel_31:
   \   0001CB   8009         SJMP      ??CrossCallReturnLabel_23
    337                      osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_18:
   \   0001CD                ; Setup parameters for call to function osal_start_timerEx
   \   0001CD   7CD0         MOV       R4,#-0x30
   \   0001CF   7D07         MOV       R5,#0x7
   \   0001D1   7A08         MOV       R2,#0x8
   \   0001D3   12....       LCALL     ??Subroutine14_0 & 0xFFFF
    338                  }
    339                  return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??CrossCallReturnLabel_23:
   \   0001D6   EE           MOV       A,R6
   \   0001D7   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_8:
   \   0001D9   FA           MOV       R2,A
   \   0001DA   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_6:
   \   0001DB   FB           MOV       R3,A
   \   0001DC   8004         SJMP      ??SampleApp_ProcessEvent_19
    340              }
    341          
    342              // Discard unknown events
    343              return 0;
   \                     ??SampleApp_ProcessEvent_17:
   \   0001DE   7A00         MOV       R2,#0x0
   \   0001E0   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_19:
   \   0001E2   741D         MOV       A,#0x1d
   \   0001E4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001E7   7F04         MOV       R7,#0x4
   \   0001E9   02....       LJMP      ?BANKED_LEAVE_XDATA
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine12_0
   \   000004                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine13_0
   \   000004                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V0,A
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A01         MOV       R2,#0x1
   \   000002                REQUIRE ??Subroutine14_0
   \   000002                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function osal_set_event
   \   000005                ; Setup parameters for call to function osal_set_event
   \   000005   7A04         MOV       R2,#0x4
   \   000007                REQUIRE ??Subroutine16_0
   \   000007                ; // Fall through to label ??Subroutine16_0
    345          
    346          /*********************************************************************
    347           * Event Generation Functions
    348           */
    349          /*********************************************************************
    350           * @fn            SampleApp_HandleKeys
    351           *
    352           * @brief     Handles all key events for this device.
    353           *
    354           * @param     shift - true if in shift/alt.
    355           * @param     keys - bit field for key events. Valid entries:
    356           *                                 HAL_KEY_SW_2
    357           *                                 HAL_KEY_SW_1
    358           *
    359           * @return    none
    360           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    362          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    363              (void)shift;    // Intentionally unreferenced parameter
    364              
    365              if ( keys & HAL_KEY_SW_6 ) { // S1
    366                  
    367              }
    368          
    369              if ( keys & HAL_KEY_SW_7 ) { // S2
    370                  
    371              }
    372          }
   \   000000   02....       LJMP      ?BRET
    373          
    374          /*********************************************************************
    375           * @fn            SampleApp_MessageMSGCB
    376           *
    377           * @brief     Data message processor callback.    This function processes
    378           *                    any incoming data - probably from other devices.    So, based
    379           *                    on cluster ID, perform the intended action.
    380           *
    381           * @param     none
    382           *
    383           * @return    none
    384           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    386          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    387              uint16 flashTime;
    388          
    389              switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    390              {
    391                  case SAMPLEAPP_PERIODIC_CLUSTERID:
    392                      HalUARTWrite(0,"I get data\n",11);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    393                      HalUARTWrite(0, &pkt->cmd.Data[0],10);
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00003B   FA           MOV       R2,A
   \   00003C   A3           INC       DPTR
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   FB           MOV       R3,A
   \   00003F   7900         MOV       R1,#0x0
   \   000041   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    394                      HalUARTWrite(0,"\n",1);
   \   000044                ; Setup parameters for call to function HalUARTWrite
   \   000044   7C01         MOV       R4,#0x1
   \   000046   7D00         MOV       R5,#0x0
   \   000048   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   00004A   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00004C   7900         MOV       R1,#0x0
   \   00004E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    395                      break;
   \   000051   8036         SJMP      ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000053   EA           MOV       A,R2
   \   000054   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000057   F8           MOV       R0,A
   \   000058   A3           INC       DPTR
   \   000059   E0           MOVX      A,@DPTR
   \   00005A   F9           MOV       R1,A
   \   00005B                ; Setup parameters for call to function HalLedBlink
   \   00005B   8882         MOV       DPL,R0
   \   00005D   F583         MOV       DPH,A
   \   00005F   A3           INC       DPTR
   \   000060   E0           MOVX      A,@DPTR
   \   000061   FA           MOV       R2,A
   \   000062   8882         MOV       DPL,R0
   \   000064   8983         MOV       DPH,R1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F8           MOV       R0,A
   \   00006A   E4           CLR       A
   \   00006B   C8           XCH       A,R0
   \   00006C   F9           MOV       R1,A
   \   00006D   EA           MOV       A,R2
   \   00006E   28           ADD       A,R0
   \   00006F   F5..         MOV       ?V0,A
   \   000071   E4           CLR       A
   \   000072   39           ADDC      A,R1
   \   000073   F5..         MOV       ?V1,A
   \   000075   7402         MOV       A,#0x2
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?US_SHR
   \   00007C   AC..         MOV       R4,?V0
   \   00007E   AD..         MOV       R5,?V1
   \   000080   7B32         MOV       R3,#0x32
   \   000082   7A04         MOV       R2,#0x4
   \   000084   7908         MOV       R1,#0x8
    396          
    397                  case SAMPLEAPP_FLASH_CLUSTERID:
    398                      flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    399                      HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000086   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    400                      break;
    401              }
    402          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000089   02....       LJMP      ??Subroutine17_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   E0           MOVX      A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    403          
    404          /*********************************************************************
    405           * @fn            SampleApp_SendPeriodicMessage
    406           *
    407           * @brief     Send the periodic message.
    408           *
    409           * @param     none
    410           *
    411           * @return    none
    412           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void SampleApp_SendPeriodicMessage( void ) {
   \                     SampleApp_SendPeriodicMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    414              uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    415              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc, SAMPLEAPP_PERIODIC_CLUSTERID,
    416                  10, data, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    417              } else {
    418                  // Error occurred in request to send.
    419              }
    420          }
   \   00005C   740A         MOV       A,#0xa
   \   00005E   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine17_0
   \   000003                ; // Fall through to label ??Subroutine17_0
    421          
    422          /*********************************************************************
    423           * @fn            SampleApp_SendFlashMessage
    424           *
    425           * @brief     Send the flash message to group 1.
    426           *
    427           * @param     flashTime - in milliseconds
    428           *
    429           * @return    none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void SampleApp_SendFlashMessage( uint16 flashTime ) {
   \                     SampleApp_SendFlashMessage:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    432              uint8 buffer[3];
    433              buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    434              buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    435              buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    436          
    437              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc, 
    438                  SAMPLEAPP_FLASH_CLUSTERID, 3, buffer, &SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS ) {
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    439              } else {
    440                  // Error occurred in request to send.
    441              }
    442          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   80..         SJMP      ?Subroutine0
    443          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    444          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    445              va_list arg_ptr;
    446              uint8 _buffer[UartDefaultTxLen], cnt;
    447              uint16 length = 0;
    448              for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    449                  _buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    450              va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   85..82       MOV       DPL,?XSP + 0
   \   000020   85..83       MOV       DPH,?XSP + 1
   \   000023   E8           MOV       A,R0
   \   000024   F0           MOVX      @DPTR,A
   \   000025   A3           INC       DPTR
   \   000026   E9           MOV       A,R1
   \   000027   F0           MOVX      @DPTR,A
    451              length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \   000028                ; Setup parameters for call to function vsprintf
   \   000028   A8..         MOV       R0,?XSP + 0
   \   00002A   A9..         MOV       R1,?XSP + 1
   \   00002C   88..         MOV       ?V0,R0
   \   00002E   89..         MOV       ?V1,R1
   \   000030   78..         MOV       R0,#?V0
   \   000032   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000035   EA           MOV       A,R2
   \   000036   FC           MOV       R4,A
   \   000037   EB           MOV       A,R3
   \   000038   FD           MOV       R5,A
   \   000039   7404         MOV       A,#0x4
   \   00003B   12....       LCALL     ?XSTACK_DISP101_8
   \   00003E   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   000041   7402         MOV       A,#0x2
   \   000043   12....       LCALL     ?DEALLOC_XSTACK8
   \   000046   8A..         MOV       ?V0,R2
   \   000048   8B..         MOV       ?V1,R3
   \   00004A   AC..         MOV       R4,?V0
   \   00004C   AD..         MOV       R5,?V1
    452              va_end(arg_ptr);
    453              HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00004E                ; Setup parameters for call to function HalUARTWrite
   \   00004E   7402         MOV       A,#0x2
   \   000050   12....       LCALL     ?XSTACK_DISP101_8
   \   000053   EE           MOV       A,R6
   \   000054   F9           MOV       R1,A
   \   000055   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    454          }
   \   000058   7442         MOV       A,#0x42
   \   00005A                REQUIRE ?Subroutine0
   \   00005A                ; // Fall through to label ?Subroutine0
    455          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    457              for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    458                  _buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   28           ADD       A,R0
   \   00001E   F582         MOV       DPL,A
   \   000020   EB           MOV       A,R3
   \   000021   39           ADDC      A,R1
   \   000022   F583         MOV       DPH,A
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2401         ADD       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   3400         ADDC      A,#0x0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   C3           CLR       C
   \   000038   E0           MOVX      A,@DPTR
   \   000039   9432         SUBB      A,#0x32
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   40D2         JC        ??_UARTRead_0
    459              *length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   000041                ; Setup parameters for call to function HalUARTRead
   \   000041   7C32         MOV       R4,#0x32
   \   000043   7D00         MOV       R5,#0x0
   \   000045   A9..         MOV       R1,?V0
   \   000047   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   EA           MOV       A,R2
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   F0           MOVX      @DPTR,A
    460          }
   \   000053                REQUIRE ?Subroutine1
   \   000053                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    461          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    463              while (timeout --) {
    464                 _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    465              }
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    466          }
   \   000022   80..         SJMP      ?Subroutine1
    467          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    469              uint8 cnt;
    470              while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    471                  cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    472                  while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    473                      asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    474                  }
    475              }    
    476          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    477          
    478          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 52
   \   000005   74CC         MOV       A,#-0x34
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    480              uint16 wait_len, read_len, err_len;
    481              int16 i, index;
    482              uint8 buffer[UartDefaultRxLen], flag;
    483              wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    484              err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7444         MOV       A,#0x44
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    485              while (1) {
    486                  _UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   7901         MOV       R1,#0x1
   \   00003B   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
    487                  _delay_ms(1);
   \   00003E                ; Setup parameters for call to function _delay_ms
   \   00003E   7A01         MOV       R2,#0x1
   \   000040   7B00         MOV       R3,#0x0
   \   000042   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    488                  if (read_len > 2) { // at least 0x0D 0x0A
   \   000045   85..82       MOV       DPL,?XSP + 0
   \   000048   85..83       MOV       DPH,?XSP + 1
   \   00004B   C3           CLR       C
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   9403         SUBB      A,#0x3
   \   00004F   A3           INC       DPTR
   \   000050   E0           MOVX      A,@DPTR
   \   000051   9400         SUBB      A,#0x0
   \   000053   5003         JNC       $+5
   \   000055   02....       LJMP      ??wait_for_1 & 0xFFFF
    489                      index = 0;
   \   000058   7A00         MOV       R2,#0x0
   \   00005A   7B00         MOV       R3,#0x0
    490                      for (i = read_len - 1; i >= 0; i --) {
   \   00005C   85..82       MOV       DPL,?XSP + 0
   \   00005F   85..83       MOV       DPH,?XSP + 1
   \   000062   E0           MOVX      A,@DPTR
   \   000063   24FF         ADD       A,#-0x1
   \   000065   F8           MOV       R0,A
   \   000066   A3           INC       DPTR
   \   000067   E0           MOVX      A,@DPTR
   \   000068   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   00006A   E8           MOV       A,R0
   \   00006B   24FF         ADD       A,#-0x1
   \   00006D   18           DEC       R0
   \   00006E   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00006F   34FF         ADDC      A,#-0x1
   \   000071   F9           MOV       R1,A
   \   000072   C3           CLR       C
   \   000073   E9           MOV       A,R1
   \   000074   9400         SUBB      A,#0x0
   \   000076   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000078   65D0         XRL       A,PSW
   \   00007A   33           RLC       A
   \   00007B   4032         JC        ??wait_for_4
    491                          if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00007D   7402         MOV       A,#0x2
   \   00007F   12....       LCALL     ?XSTACK_DISP0_8
   \   000082   E582         MOV       A,DPL
   \   000084   28           ADD       A,R0
   \   000085   F582         MOV       DPL,A
   \   000087   E583         MOV       A,DPH
   \   000089   39           ADDC      A,R1
   \   00008A   F583         MOV       DPH,A
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   640A         XRL       A,#0xa
   \   00008F   70D9         JNZ       ??wait_for_3
   \   000091   85..82       MOV       DPL,?XSP + 0
   \   000094   85..83       MOV       DPH,?XSP + 1
   \   000097   E0           MOVX      A,@DPTR
   \   000098   24FF         ADD       A,#-0x1
   \   00009A   FC           MOV       R4,A
   \   00009B   A3           INC       DPTR
   \   00009C   E0           MOVX      A,@DPTR
   \   00009D   34FF         ADDC      A,#-0x1
   \   00009F   FD           MOV       R5,A
   \   0000A0   EC           MOV       A,R4
   \   0000A1   68           XRL       A,R0
   \   0000A2   7002         JNZ       ??wait_for_5
   \   0000A4   ED           MOV       A,R5
   \   0000A5   69           XRL       A,R1
   \                     ??wait_for_5:
   \   0000A6   60C2         JZ        ??wait_for_3
    492                              index = i + 1;
   \   0000A8   E8           MOV       A,R0
   \   0000A9   2401         ADD       A,#0x1
   \   0000AB   FA           MOV       R2,A
   \   0000AC   E4           CLR       A
   \   0000AD   39           ADDC      A,R1
   \   0000AE   FB           MOV       R3,A
    493                              break;
    494                          }
    495                      }
    496                      
    497                      if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   0000AF   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000B2   65..         XRL       A,?V2
   \   0000B4   7003         JNZ       ??wait_for_6
   \   0000B6   E9           MOV       A,R1
   \   0000B7   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000B9   703B         JNZ       ??wait_for_7
    498                          flag = 1;
    499                          for (i = 0; i < err_len; i ++) {
   \   0000BB   7800         MOV       R0,#0x0
   \   0000BD   7900         MOV       R1,#0x0
   \   0000BF   801F         SJMP      ??wait_for_8
    500                              if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000C1   EA           MOV       A,R2
   \   0000C2   28           ADD       A,R0
   \   0000C3   FC           MOV       R4,A
   \   0000C4   EB           MOV       A,R3
   \   0000C5   39           ADDC      A,R1
   \   0000C6   FD           MOV       R5,A
   \   0000C7   7402         MOV       A,#0x2
   \   0000C9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CC   12....       LCALL     ?Subroutine9 & 0xFFFF
    501                                  flag = 0;
    502                                  break;
    503                              }
    504                          }
   \                     ??CrossCallReturnLabel_8:
   \   0000CF   EE           MOV       A,R6
   \   0000D0   28           ADD       A,R0
   \   0000D1   F582         MOV       DPL,A
   \   0000D3   EF           MOV       A,R7
   \   0000D4   39           ADDC      A,R1
   \   0000D5   F583         MOV       DPH,A
   \   0000D7   E0           MOVX      A,@DPTR
   \   0000D8   6C           XRL       A,R4
   \   0000D9   701B         JNZ       ??wait_for_7
   \   0000DB   08           INC       R0
   \   0000DC   E8           MOV       A,R0
   \   0000DD   7001         JNZ       ??wait_for_8
   \   0000DF   09           INC       R1
   \                     ??wait_for_8:
   \   0000E0   C3           CLR       C
   \   0000E1   E8           MOV       A,R0
   \   0000E2   95..         SUBB      A,?V2
   \   0000E4   E9           MOV       A,R1
   \   0000E5   95..         SUBB      A,?V3
   \   0000E7   40D8         JC        ??wait_for_9
    505                          if (flag == 1) {
    506                              debug(err);
   \   0000E9                ; Setup parameters for call to function _UARTSend
   \   0000E9   EE           MOV       A,R6
   \   0000EA   FA           MOV       R2,A
   \   0000EB   EF           MOV       A,R7
   \   0000EC   FB           MOV       R3,A
   \   0000ED   7900         MOV       R1,#0x0
   \   0000EF   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    507                              return 1;
   \   0000F2   7901         MOV       R1,#0x1
   \   0000F4   8060         SJMP      ??wait_for_10
    508                          }
    509                      }
    510          
    511                      if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000F6   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000F9   65..         XRL       A,?V6
   \   0000FB   7003         JNZ       ??wait_for_11
   \   0000FD   E9           MOV       A,R1
   \   0000FE   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   000100   703D         JNZ       ??wait_for_1
    512                          flag = 1;
    513                          for (i = 0; i < wait_len; i ++) {
   \   000102   7800         MOV       R0,#0x0
   \   000104   7900         MOV       R1,#0x0
   \   000106   8021         SJMP      ??wait_for_12
    514                              if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   000108   EA           MOV       A,R2
   \   000109   28           ADD       A,R0
   \   00010A   FC           MOV       R4,A
   \   00010B   EB           MOV       A,R3
   \   00010C   39           ADDC      A,R1
   \   00010D   FD           MOV       R5,A
   \   00010E   7402         MOV       A,#0x2
   \   000110   12....       LCALL     ?XSTACK_DISP0_8
   \   000113   12....       LCALL     ?Subroutine9 & 0xFFFF
    515                                  flag = 0;
    516                                  break;
    517                              }
    518                          }
   \                     ??CrossCallReturnLabel_9:
   \   000116   E5..         MOV       A,?V0
   \   000118   28           ADD       A,R0
   \   000119   F582         MOV       DPL,A
   \   00011B   E5..         MOV       A,?V1
   \   00011D   39           ADDC      A,R1
   \   00011E   F583         MOV       DPH,A
   \   000120   E0           MOVX      A,@DPTR
   \   000121   6C           XRL       A,R4
   \   000122   701B         JNZ       ??wait_for_1
   \   000124   08           INC       R0
   \   000125   E8           MOV       A,R0
   \   000126   7001         JNZ       ??wait_for_12
   \   000128   09           INC       R1
   \                     ??wait_for_12:
   \   000129   C3           CLR       C
   \   00012A   E8           MOV       A,R0
   \   00012B   95..         SUBB      A,?V6
   \   00012D   E9           MOV       A,R1
   \   00012E   95..         SUBB      A,?V7
   \   000130   40D6         JC        ??wait_for_13
    519                          if (flag == 1) {
    520                              debug(str);
   \   000132                ; Setup parameters for call to function _UARTSend
   \   000132   AA..         MOV       R2,?V0
   \   000134   AB..         MOV       R3,?V1
   \   000136   7900         MOV       R1,#0x0
   \   000138   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    521                              return 0;
   \   00013B   7900         MOV       R1,#0x0
   \   00013D   8017         SJMP      ??wait_for_10
    522                          }
    523                      }
    524                  }
    525                  timeout --;
    526                  if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00013F   E5..         MOV       A,?V4
   \   000141   24FF         ADD       A,#-0x1
   \   000143   F5..         MOV       ?V4,A
   \   000145   E5..         MOV       A,?V5
   \   000147   34FF         ADDC      A,#-0x1
   \   000149   F5..         MOV       ?V5,A
   \   00014B   E5..         MOV       A,?V4
   \   00014D   45..         ORL       A,?V5
   \   00014F   6003         JZ        $+5
   \   000151   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000154   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000156   7434         MOV       A,#0x34
   \   000158   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015B   7F08         MOV       R7,#0x8
   \   00015D   02....       LJMP      ?BANKED_LEAVE_XDATA
    527              }
    528          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET
    529          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    531              print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine7 & 0xFFFF
    532              _delay_ms(10);
    533              print("+++");
   \                     ??CrossCallReturnLabel_34:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine7 & 0xFFFF
    534              _delay_ms(10);
    535              print("\r\n");
   \                     ??CrossCallReturnLabel_35:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine18_0 & 0xFFFF
    536              _delay_ms(10);
    537          }
   \                     ??CrossCallReturnLabel_36:
   \   000012   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine18_0
   \   000004                ; // Fall through to label ??Subroutine18_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"Atlantis\\",\\"...">`:
   \   000000   41542B43     DB "AT+CWJAP=\"Atlantis\",\"21396878335\"\015\012"
   \            574A4150
   \            3D224174
   \            6C616E74
   \            6973222C
   \            22323133
   \            39363837
   \            38333335
   \            220D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"19...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"192.168.43.2\",8000\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2231
   \            39322E31
   \            36382E34
   \            332E3222
   \            2C383030
   \            300D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "heart beat\\r\\n">`:
   \   000000   68656172     DB "heart beat\015\012"
   \            74206265
   \            61740D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   SampleApp_HandleKeys
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_set_event
      0     51   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
        0     10   -> HalUARTWrite
      0     43   SampleApp_ProcessEvent
        0     41   -> HalUARTOpen
        0     41   -> SampleApp_MessageMSGCB
        0     41   -> SampleApp_SendPeriodicMessage
        0     41   -> _UARTSend
        0     41   -> _delay_ms
        0     41   -> exit_send
        0     41   -> osal_msg_deallocate
        0     41   -> osal_msg_receive
        0     41   -> osal_rand
        0     41   -> osal_set_event
        0     41   -> osal_start_timerEx
        0     43   -> wait_for
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     70   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0     77   _UARTRead
        0      9   -> HalUARTRead
      1    146   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0     77   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      0     50   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    111   wait_for
        0     68   -> _UARTRead
        0     68   -> _UARTSend
        0     68   -> _delay_ms
        0     68   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "+++">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      40  ?<Constant "AT+CIPSTART=\"TCP\",\"19...">
      36  ?<Constant "AT+CWJAP=\"Atlantis\",\"...">
      14  ?<Constant "AT+CWMODE=1\r\n">
       9  ?<Constant "CLOSED\r\n">
       8  ?<Constant "ERROR\r\n">
       7  ?<Constant "FAIL\r\n">
       8  ?<Constant "Group 1">
      12  ?<Constant "I get data\n">
       5  ?<Constant "OK\r\n">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      13  ?<Constant "heart beat\r\n">
      11  ?<Constant "received\r\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       4  ??Subroutine12_0
       6  ??Subroutine13_0
      11  ??Subroutine14_0
       5  ??Subroutine15_0
      11  ??Subroutine16_0
       5  ??Subroutine17_0
      13  ??Subroutine18_0
       3  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine10
      19  ?Subroutine11
       7  ?Subroutine2
      16  ?Subroutine3
       2  ?Subroutine4
       2  ?Subroutine5
      11  ?Subroutine6
       4  ?Subroutine7
       4  ?Subroutine8
      13  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
       3  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     157  SampleApp_Init
       6  SampleApp_Init::?relay
     140  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     492  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     115  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      97  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
      83  _UARTRead
       6  _UARTRead::?relay
      90  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
      21  exit_send
       6  exit_send::?relay
     352  wait_for
       6  wait_for::?relay

 
 1 770 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
   277 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    72 bytes of CODE     memory
   277 bytes of CONST    memory
 1 770 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
