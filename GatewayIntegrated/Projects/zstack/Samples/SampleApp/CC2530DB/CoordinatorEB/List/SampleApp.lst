###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               25/Jul/2019  20:54:12
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EWDB46.tmp
#        (F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        HAL_UART_DMA=1 -D HAL_UART_ISR=2 -D HAL_LCD=FALSE -lC
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50          	SW1:  Sends a flash command to all devices in Group 1.
     51          	SW2:  Adds/Removes (toggles) this device in and out
     52          		  of Group 1.  This will enable and disable the
     53          		  reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "OSAL_Nv.h"
     61          #include "ZGlobals.h"
     62          #include "AF.h"
     63          #include "aps_groups.h"
     64          #include "ZDApp.h"
     65          
     66          #include "SampleApp.h"
     67          #include "SampleAppHw.h"
     68          
     69          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     70          
     71          /* HAL */
     72          #include "hal_lcd.h"
     73          #include "hal_led.h"
     74          #include "hal_key.h"
     75          #include "hal_uart.h"
     76          #include "MT_UART.h"
     77          
     78          /* SYS */
     79          #include <string.h>
     80          #include <stdio.h>
     81          #include <stdarg.h>
     82          
     83          #define UartDefaultRxLen 64
     84          #define UartDefaultTxLen 64
     85          #define Key_S1 P0_0
     86          #define Key_S2 P0_1
     87          #define Key_Active 0
     88          #define LED_RED P1_0
     89          #define LED_YELLOW P1_1
     90          #define LED_ORANGE P1_4
     91          
     92          // ¿ÉÐÐ·¶Î§£º0x0401 ¡ª 0x0FFF
     93          #define ZD_NV_IP_ID 0x0440
     94          #define ZD_NV_PORT_ID 0x0430
     95          #define ZD_NV_SSID_ID 0x0420
     96          #define ZD_NV_PSWD_ID 0x0410
     97          
     98          // ³¤¶È¶¨Òå£¬ÐèÎª4µÄÕûÊý±¶
     99          // Êµ¼Ê³¤¶È <= LENGTH - 1
    100          #define SSID_MAX_LENGTH 20
    101          #define PSWD_MAX_LENGTH 20
    102          #define PORT_MAX_LENGTH 8
    103          #define IP_MAX_LENGTH   16
    104          
    105          #define isPressed(x) (x == Key_Active)
    106          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
    107          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
    108          #define debug_and_print(x,...) do{\
    109          	_UARTSend(0,x,##__VA_ARGS__);\
    110          	_UARTSend(1,x,##__VA_ARGS__);\
    111          }while(0)
    112          
    113          void _UARTSend(uint8 port, uint8 *fmt, ...);
    114          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
    115          void _delay_us(uint16 n);
    116          void _delay_ms(uint16 n);
    117          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
    118          void exit_send(void);
    119          uint16 WiFiRecv(uint8 *buff);
    120          uint8 WiFiSend(uint8 *fmt, ...);
    121          void _zigbeeSend(uint8 *fmt, ...);
    122          
    123          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    124          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    125          {
    126            SAMPLEAPP_PERIODIC_CLUSTERID,
    127            SAMPLEAPP_FLASH_CLUSTERID,
    128          };
    129          

   \                                 In  segment XDATA_ROM_C, align 1
    130          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    131          {
    132            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    133            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    134            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    135            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    136            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    137            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    138            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    139            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    140            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    141          };
    142          
    143          // This is the Endpoint/Interface description.  It is defined here, but
    144          // filled-in in SampleApp_Init().  Another way to go would be to fill
    145          // in the structure here and make it a "const" (in code space).  The
    146          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * EXTERNAL VARIABLES
    151           */
    152          
    153          /*********************************************************************
    154           * EXTERNAL FUNCTIONS
    155           */
    156          
    157          /*********************************************************************
    158           * LOCAL VARIABLES
    159           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          						  // This variable will be received when
    162          						  // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          afAddrType_t SampleApp_Flash_DstAddr; //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          aps_Group_t SampleApp_Group; //×é
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    174          
    175          /*********************************************************************
    176           * LOCAL FUNCTIONS
    177           */
    178          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    179          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    180          void SampleApp_SendPeriodicMessage( void );
    181          void SampleApp_SendFlashMessage( uint16 flashTime );
    182          void SampleApp_SendGroupMessage(void); //Íø·ä×é²¥Í¨Ñ¶·¢ËÍº¯Êý¶¨Òå.
    183          
    184          /*********************************************************************
    185           * NETWORK LAYER CALLBACKS
    186           */
    187          
    188          /*********************************************************************
    189           * PUBLIC FUNCTIONS
    190           */
    191          
    192          /*********************************************************************
    193           * @fn      SampleApp_Init
    194           *
    195           * @brief   Initialization function for the Generic App Task.
    196           *          This is called during initialization and should contain
    197           *          any application specific initialization (ie. hardware
    198           *          initialization/setup, table initialization, power up
    199           *          notificaiton ... ).
    200           *
    201           * @param   task_id - the ID assigned by OSAL.  This ID should be
    202           *                    used to send messages and set timers.
    203           *
    204           * @return  none
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    208            SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    209            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    210            SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    211            
    212            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    213            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    214            
    215            // Device hardware initialization can be added here or in main() (Zmain.c).
    216            // If the hardware is application specific - add it here.
    217            // If the hardware is other parts of the device add it in main().
    218          
    219           #if defined ( BUILD_ALL_DEVICES )
    220            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    221            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    222            // together - if they are - we will start up a coordinator. Otherwise,
    223            // the device will start as a router.
    224            if ( readCoordinatorJumper() )
    225          	zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    226            else
    227          	zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    228          #endif // BUILD_ALL_DEVICES
    229          
    230          #if defined ( HOLD_AUTO_START )
    231            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    232            //  from starting the device and wait for the application to
    233            //  start the device.
    234            ZDOInitDevice(0);
    235          #endif
    236          
    237            // Setup for the periodic message's destination address
    238            // Broadcast to everyone
    239            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    240            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    241            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    242          
    243            // Setup for the flash command's destination address - Group 1
    244            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    245            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    246            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine5 & 0xFFFF
    247            
    248          
    249            // Fill out the endpoint description.
    250            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_61:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    251            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    252            SampleApp_epDesc.simpleDesc
    253          			= (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    254            SampleApp_epDesc.latencyReq = noLatencyReqs;
    255          
    256            // Register the endpoint description with the AF
    257            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_57:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    258          
    259            // Register for all key events - This app will handle all key events
    260            RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    261          
    262            // By default, all devices start out in Group 1
    263            SampleApp_Group.ID = SAMPLEAPP_FLASH_GROUP;//0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine5 & 0xFFFF
    264            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_62:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV       A,#0x3
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    265            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00008A                ; Setup parameters for call to function aps_AddGroup
   \   00008A   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008C   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008E   7914         MOV       R1,#0x14
   \   000090   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    266            
    267          
    268          #if defined ( LCD_SUPPORTED )
    269            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    270          #endif
    271            osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \   000093                ; Setup parameters for call to function osal_set_event
   \   000093   7A02         MOV       R2,#0x2
   \   000095   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    272          }
   \                     ??CrossCallReturnLabel_54:
   \   000098   7F03         MOV       R7,#0x3
   \   00009A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine28_0
   \   000002                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    273          
    274          /*********************************************************************
    275           * @fn      SampleApp_ProcessEvent
    276           *
    277           * @brief   Generic Application Task event processor.  This function
    278           *          is called to process all events for the task.  Events
    279           *          include timers, messages and any other user defined events.
    280           *
    281           * @param   task_id  - The OSAL assigned task ID.
    282           * @param   events - events to process.  This is a bit map and can
    283           *                   contain more than one event.
    284           *
    285           * @return  none
    286           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    288          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 159
   \   000005   7461         MOV       A,#0x61
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    289            afIncomingMSGPacket_t *MSGpkt;
    290          	halUARTCfg_t uartConfig;
    291          	uint8 _buffer[UartDefaultRxLen];
    292          	uint8 InitNVStatus, readNVStatus, writeNVStatus;
    293          	uint8 SSID[SSID_MAX_LENGTH], PSWD[PSWD_MAX_LENGTH];
    294          	uint8 PORT[PORT_MAX_LENGTH], MYIP[IP_MAX_LENGTH];
    295          	uint16 length, nv_id, nv_len, prefix_len;
    296            (void)task_id;  // Intentionally unreferenced parameter
    297          
    298            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6079         JZ        ??SampleApp_ProcessEvent_0
    299            {
    300          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   802B         SJMP      ??SampleApp_ProcessEvent_1
    301          	while ( MSGpkt )
    302          	{
    303          	  switch ( MSGpkt->hdr.event )
    304          	  {
    305          		// Received when a key is pressed
    306          		case KEY_CHANGE:
    307          		  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    308          		  break;
    309          
    310          		// Received when a messages is received (OTA) for this endpoint
    311          		case AF_INCOMING_MSG_CMD:
    312          		  SampleApp_MessageMSGCB( MSGpkt );
    313          		  break;
    314          
    315          		// Received whenever the device changes state in the network
    316          		case ZDO_STATE_CHANGE:
    317          		  SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    318          		  if ( (SampleApp_NwkState == DEV_ZB_COORD)||
    319          			   (SampleApp_NwkState == DEV_ROUTER)
    320          			  || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7010         JNZ       ??SampleApp_ProcessEvent_4
    321          		  {
    322          			// Start sending the periodic message in a regular interval.
    323          			osal_start_timerEx( SampleApp_TaskID,
    324          							  SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    325          							  SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7C88         MOV       R4,#-0x78
   \   00002A   7D13         MOV       R5,#0x13
   \   00002C   7A01         MOV       R2,#0x1
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   90....       MOV       DPTR,#SampleApp_TaskID
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    326          		  }
    327          		  else
    328          		  {
    329          			// Device is no longer in the network
    330          		  }
    331          		  break;
    332          
    333          		default:
    334          		  break;
    335          	  }
    336          
    337          	  // Release the memory
    338          	  osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV       R2,?V0
   \   00003A   AB..         MOV       R3,?V1
   \   00003C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    339          
    340          	  // Next - if one is available
    341          	  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000047   8A..         MOV       ?V0,R2
   \   000049   8B..         MOV       ?V1,R3
   \   00004B   E5..         MOV       A,?V0
   \   00004D   45..         ORL       A,?V1
   \   00004F   6032         JZ        ??SampleApp_ProcessEvent_5
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   24E6         ADD       A,#-0x1a
   \   00005A   601E         JZ        ??SampleApp_ProcessEvent_6
   \   00005C   245A         ADD       A,#0x5a
   \   00005E   6006         JZ        ??SampleApp_ProcessEvent_7
   \   000060   24EF         ADD       A,#-0x11
   \   000062   60B0         JZ        ??SampleApp_ProcessEvent_2
   \   000064   80D2         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000066                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000078   80BE         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00007A                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007A   AA..         MOV       R2,?V0
   \   00007C   AB..         MOV       R3,?V1
   \   00007E   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000081   80B5         SJMP      ??SampleApp_ProcessEvent_4
    342          	}
    343          
    344          	// return unprocessed events
    345          	return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000083   EE           MOV       A,R6
   \   000084   FA           MOV       R2,A
   \   000085   EF           MOV       A,R7
   \   000086   6480         XRL       A,#0x80
   \   000088   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    346            }
    347          
    348            if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_0:
   \   00008B   EA           MOV       A,R2
   \   00008C   5402         ANL       A,#0x2
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??SampleApp_ProcessEvent_9 & 0xFFFF
    349          
    350          		// initialize uart_1
    351          		uartConfig.configured           = TRUE;
   \   000093   740A         MOV       A,#0xa
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   7401         MOV       A,#0x1
   \   00009A   F0           MOVX      @DPTR,A
    352          		uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   00009B   740B         MOV       A,#0xb
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   7404         MOV       A,#0x4
   \   0000A2   F0           MOVX      @DPTR,A
    353          		uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   0000A3   740C         MOV       A,#0xc
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
    354          		uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000AA   740D         MOV       A,#0xd
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7440         MOV       A,#0x40
   \   0000B1   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    355          		uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_58:
   \   0000B4   7414         MOV       A,#0x14
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   7480         MOV       A,#-0x80
   \   0000BB   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    356          		uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_59:
   \   0000BE   741C         MOV       A,#0x1c
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   7480         MOV       A,#-0x80
   \   0000C5   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    357          		uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_60:
   \   0000C8   740F         MOV       A,#0xf
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   7406         MOV       A,#0x6
   \   0000CF   F0           MOVX      @DPTR,A
    358          		uartConfig.intEnable            = TRUE;
   \   0000D0   7420         MOV       A,#0x20
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   F0           MOVX      @DPTR,A
    359          		uartConfig.callBackFunc         = NULL;
   \   0000D8   7425         MOV       A,#0x25
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E4           CLR       A
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   F0           MOVX      @DPTR,A
    360          		HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000E1                ; Setup parameters for call to function HalUARTOpen
   \   0000E1   740A         MOV       A,#0xa
   \   0000E3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E6   7901         MOV       R1,#0x1
   \   0000E8   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    361          		debug("UART_1 INITIALIZED!\r\n");
   \   0000EB                ; Setup parameters for call to function _UARTSend
   \   0000EB   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000ED   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000EF   7900         MOV       R1,#0x0
   \   0000F1   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    362          
    363          		if (isPressed(Key_S1)) {
   \   0000F4   A280         MOV       C,0x80.0
   \   0000F6   400D         JC        ??SampleApp_ProcessEvent_10
    364          			debug("Enter AP Mode\r\n");
   \   0000F8                ; Setup parameters for call to function _UARTSend
   \   0000F8   7A..         MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
   \   0000FA   7B..         MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
   \   0000FC   7900         MOV       R1,#0x0
   \   0000FE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    365          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \   000101                ; Setup parameters for call to function osal_set_event
   \   000101   7A10         MOV       R2,#0x10
   \   000103   800B         SJMP      ??SampleApp_ProcessEvent_11
    366          		} else {
    367          			debug("Enter STA Mode\r\n");
   \                     ??SampleApp_ProcessEvent_10:
   \   000105                ; Setup parameters for call to function _UARTSend
   \   000105   7A..         MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
   \   000107   7B..         MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
   \   000109   7900         MOV       R1,#0x0
   \   00010B   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    368          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   00010E                ; Setup parameters for call to function osal_set_event
   \   00010E   7A04         MOV       R2,#0x4
    369          		}
   \                     ??SampleApp_ProcessEvent_11:
   \   000110   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    370          		return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_55:
   \   000113   EE           MOV       A,R6
   \   000114   6402         XRL       A,#0x2
   \   000116   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    371          	}
    372          
    373          	if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_9:
   \   000119   EA           MOV       A,R2
   \   00011A   5410         ANL       A,#0x10
   \   00011C   7003         JNZ       $+5
   \   00011E   02....       LJMP      ??SampleApp_ProcessEvent_13 & 0xFFFF
    374          		exit_send();
   \   000121                ; Setup parameters for call to function exit_send
   \   000121   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    375          		_UARTRead(HAL_UART_PORT_1, _buffer, &length);
   \   000124                ; Setup parameters for call to function _UARTRead
   \   000124   AC..         MOV       R4,?XSP + 0
   \   000126   AD..         MOV       R5,?XSP + 1
   \   000128   745F         MOV       A,#0x5f
   \   00012A   12....       LCALL     ?XSTACK_DISP101_8
   \   00012D   7901         MOV       R1,#0x1
   \   00012F   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
    376          		do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   000132   12....       LCALL     ?Subroutine10 & 0xFFFF
    377          		while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_41:
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000138   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00013A   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00013C   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   00013E   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   000140   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   \   000146   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    378          		do debug_and_print("AT+CWMODE=2\r\n");
   \                     ??SampleApp_ProcessEvent_15:
   \   000149   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
   \   00014C   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
   \   00014F                ; Setup parameters for call to function _UARTSend
   \   00014F   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    379          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_43:
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000158   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015B   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    380          		do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n"); // TODO: ADD MACRO
   \                     ??SampleApp_ProcessEvent_16:
   \   00015E   75....       MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
   \   000161   75....       MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
   \   000164                ; Setup parameters for call to function _UARTSend
   \   000164   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    381          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_44:
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    382          		do debug_and_print("AT+CIPMODE=0\r\n");
   \                     ??SampleApp_ProcessEvent_17:
   \   000173   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
   \   000176   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
   \   000179                ; Setup parameters for call to function _UARTSend
   \   000179   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    383          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_45:
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017F   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000182   12....       LCALL     ?DEALLOC_XSTACK8
   \   000185   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
    384          		do debug_and_print("AT+CIPMUX=1\r\n");
   \                     ??SampleApp_ProcessEvent_18:
   \   000188   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   00018B   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   00018E                ; Setup parameters for call to function _UARTSend
   \   00018E   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    385          		while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
   \                     ??CrossCallReturnLabel_46:
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000194   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000197   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_18
    386          		do debug_and_print("AT+CIPSERVER=1,8266\r\n");
   \                     ??SampleApp_ProcessEvent_19:
   \   00019D   75....       MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
   \   0001A0   75....       MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
   \   0001A3                ; Setup parameters for call to function _UARTSend
   \   0001A3   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    387          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_47:
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   0001AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AF   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_19
    388          		do {
    389          			while (wait_for("0,CONNECT\r\n", "0,CONNECT FAIL\r\n", 0));
   \                     ??SampleApp_ProcessEvent_20:
   \   0001B2                ; Setup parameters for call to function wait_for
   \   0001B2   78..         MOV       R0,#?V0
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B7   7C..         MOV       R4,#`?<Constant "0,CONNECT FAIL\\r\\n">` & 0xff
   \   0001B9   7D..         MOV       R5,#(`?<Constant "0,CONNECT FAIL\\r\\n">` >> 8) & 0xff
   \   0001BB   7A..         MOV       R2,#`?<Constant "0,CONNECT\\r\\n">` & 0xff
   \   0001BD   7B..         MOV       R3,#(`?<Constant "0,CONNECT\\r\\n">` >> 8) & 0xff
   \   0001BF   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    390          		} while (WiFiSend("CTS\r\n")); // ¸æËßAPPÁ¬½ÓÒÑ½¨Á¢£¬¶þ´ÎÎÕÊÖ
   \                     ??CrossCallReturnLabel_81:
   \   0001C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C5   B900EA       CJNE      R1,#0x0,??SampleApp_ProcessEvent_20
   \   0001C8                ; Setup parameters for call to function WiFiSend
   \   0001C8   7A..         MOV       R2,#`?<Constant "CTS\\r\\n">` & 0xff
   \   0001CA   7B..         MOV       R3,#(`?<Constant "CTS\\r\\n">` >> 8) & 0xff
   \   0001CC   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
   \   0001CF   E9           MOV       A,R1
   \   0001D0   70E0         JNZ       ??SampleApp_ProcessEvent_20
    391          		while (1) {
    392          			length = WiFiRecv(_buffer);
   \                     ??SampleApp_ProcessEvent_21:
   \   0001D2                ; Setup parameters for call to function WiFiRecv
   \   0001D2   745F         MOV       A,#0x5f
   \   0001D4   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D7   12....       LCALL     ?Subroutine14 & 0xFFFF
    393          			if (length > 6) { // min: SSIDx\r\n ÔÊÐí19Î»³¤¶È
   \                     ??CrossCallReturnLabel_11:
   \   0001DA   85..82       MOV       DPL,?XSP + 0
   \   0001DD   85..83       MOV       DPH,?XSP + 1
   \   0001E0   C3           CLR       C
   \   0001E1   E0           MOVX      A,@DPTR
   \   0001E2   9407         SUBB      A,#0x7
   \   0001E4   A3           INC       DPTR
   \   0001E5   E0           MOVX      A,@DPTR
   \   0001E6   9400         SUBB      A,#0x0
   \   0001E8   5003         JNC       $+5
   \   0001EA   02....       LJMP      ??SampleApp_ProcessEvent_22 & 0xFFFF
    394          				if (osal_memcmp(_buffer, "IP", 2)) {
   \   0001ED                ; Setup parameters for call to function osal_memcmp
   \   0001ED   75....       MOV       ?V0,#`?<Constant "IP">` & 0xff
   \   0001F0   75....       MOV       ?V1,#(`?<Constant "IP">` >> 8) & 0xff
   \   0001F3   75..00       MOV       ?V2,#0x0
   \   0001F6   78..         MOV       R0,#?V0
   \   0001F8   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001FB   7C02         MOV       R4,#0x2
   \   0001FD   7D00         MOV       R5,#0x0
   \   0001FF   7462         MOV       A,#0x62
   \   000201   12....       LCALL     ?XSTACK_DISP0_8
   \   000204   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000207   12....       LCALL     ?DEALLOC_XSTACK8
   \   00020A   E9           MOV       A,R1
   \   00020B   6016         JZ        ??SampleApp_ProcessEvent_23
    395          					nv_id = ZD_NV_IP_ID;
   \   00020D   75..40       MOV       ?V4,#0x40
   \   000210   75..04       MOV       ?V5,#0x4
    396          					nv_len = IP_MAX_LENGTH;
   \   000213   75..10       MOV       ?V0,#0x10
   \   000216   75..00       MOV       ?V1,#0x0
    397          					prefix_len = 2;
   \   000219   75..02       MOV       ?V6,#0x2
    398          					WiFiSend("GOT IP\r\n");
   \   00021C                ; Setup parameters for call to function WiFiSend
   \   00021C   7A..         MOV       R2,#`?<Constant "GOT IP\\r\\n">` & 0xff
   \   00021E   7B..         MOV       R3,#(`?<Constant "GOT IP\\r\\n">` >> 8) & 0xff
   \   000220   02....       LJMP      ??SampleApp_ProcessEvent_24 & 0xFFFF
    399          				} else 
    400          				if (osal_memcmp(_buffer, "PORT", 4)) {
   \                     ??SampleApp_ProcessEvent_23:
   \   000223                ; Setup parameters for call to function osal_memcmp
   \   000223   75....       MOV       ?V0,#`?<Constant "PORT">` & 0xff
   \   000226   75....       MOV       ?V1,#(`?<Constant "PORT">` >> 8) & 0xff
   \   000229   78..         MOV       R0,#?V0
   \   00022B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00022E   7C04         MOV       R4,#0x4
   \   000230   7D00         MOV       R5,#0x0
   \   000232   7462         MOV       A,#0x62
   \   000234   12....       LCALL     ?XSTACK_DISP0_8
   \   000237   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00023A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00023D   E9           MOV       A,R1
   \   00023E   6015         JZ        ??SampleApp_ProcessEvent_25
    401          					nv_id = ZD_NV_PORT_ID;
   \   000240   75..30       MOV       ?V4,#0x30
   \   000243   75..04       MOV       ?V5,#0x4
    402          					nv_len = PORT_MAX_LENGTH;
   \   000246   75..08       MOV       ?V0,#0x8
   \   000249   75..00       MOV       ?V1,#0x0
    403          					prefix_len = 4;
   \   00024C   75..04       MOV       ?V6,#0x4
    404          					WiFiSend("GOT PORT\r\n");
   \   00024F                ; Setup parameters for call to function WiFiSend
   \   00024F   7A..         MOV       R2,#`?<Constant "GOT PORT\\r\\n">` & 0xff
   \   000251   7B..         MOV       R3,#(`?<Constant "GOT PORT\\r\\n">` >> 8) & 0xff
   \   000253   8065         SJMP      ??SampleApp_ProcessEvent_24
    405          				} else 
    406          				if (osal_memcmp(_buffer, "SSID", 4)) {
   \                     ??SampleApp_ProcessEvent_25:
   \   000255                ; Setup parameters for call to function osal_memcmp
   \   000255   75....       MOV       ?V0,#`?<Constant "SSID">` & 0xff
   \   000258   75....       MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
   \   00025B   78..         MOV       R0,#?V0
   \   00025D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000260   7C04         MOV       R4,#0x4
   \   000262   7D00         MOV       R5,#0x0
   \   000264   7462         MOV       A,#0x62
   \   000266   12....       LCALL     ?XSTACK_DISP0_8
   \   000269   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00026C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00026F   E9           MOV       A,R1
   \   000270   6015         JZ        ??SampleApp_ProcessEvent_26
    407          					nv_id = ZD_NV_SSID_ID;
   \   000272   75..20       MOV       ?V4,#0x20
   \   000275   75..04       MOV       ?V5,#0x4
    408          					nv_len = SSID_MAX_LENGTH;
   \   000278   75..14       MOV       ?V0,#0x14
   \   00027B   75..00       MOV       ?V1,#0x0
    409          					prefix_len = 4;
   \   00027E   75..04       MOV       ?V6,#0x4
    410          					WiFiSend("GOT SSID\r\n");
   \   000281                ; Setup parameters for call to function WiFiSend
   \   000281   7A..         MOV       R2,#`?<Constant "GOT SSID\\r\\n">` & 0xff
   \   000283   7B..         MOV       R3,#(`?<Constant "GOT SSID\\r\\n">` >> 8) & 0xff
   \   000285   8033         SJMP      ??SampleApp_ProcessEvent_24
    411          				} else 
    412          				if (osal_memcmp(_buffer, "PSWD", 4)) {
   \                     ??SampleApp_ProcessEvent_26:
   \   000287                ; Setup parameters for call to function osal_memcmp
   \   000287   75....       MOV       ?V0,#`?<Constant "PSWD">` & 0xff
   \   00028A   75....       MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
   \   00028D   78..         MOV       R0,#?V0
   \   00028F   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000292   7C04         MOV       R4,#0x4
   \   000294   7D00         MOV       R5,#0x0
   \   000296   7462         MOV       A,#0x62
   \   000298   12....       LCALL     ?XSTACK_DISP0_8
   \   00029B   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00029E   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002A1   E9           MOV       A,R1
   \   0002A2   7003         JNZ       $+5
   \   0002A4   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    413          					nv_id = ZD_NV_PSWD_ID;
   \   0002A7   75..10       MOV       ?V4,#0x10
   \   0002AA   75..04       MOV       ?V5,#0x4
    414          					nv_len = PSWD_MAX_LENGTH;
   \   0002AD   75..14       MOV       ?V0,#0x14
   \   0002B0   75..00       MOV       ?V1,#0x0
    415          					prefix_len = 4;
   \   0002B3   75..04       MOV       ?V6,#0x4
    416          					WiFiSend("GOT PSWD\r\n");
   \   0002B6                ; Setup parameters for call to function WiFiSend
   \   0002B6   7A..         MOV       R2,#`?<Constant "GOT PSWD\\r\\n">` & 0xff
   \   0002B8   7B..         MOV       R3,#(`?<Constant "GOT PSWD\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_24:
   \   0002BA   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    417          				} else continue;
    418          				length -= 2; // \r\n
   \   0002BD   85..82       MOV       DPL,?XSP + 0
   \   0002C0   85..83       MOV       DPH,?XSP + 1
   \   0002C3   E0           MOVX      A,@DPTR
   \   0002C4   24FE         ADD       A,#-0x2
   \   0002C6   F0           MOVX      @DPTR,A
   \   0002C7   A3           INC       DPTR
   \   0002C8   E0           MOVX      A,@DPTR
   \   0002C9   34FF         ADDC      A,#-0x1
   \   0002CB   F0           MOVX      @DPTR,A
    419          				while (length < nv_len + prefix_len + 2) _buffer[length ++] = '\0';
   \   0002CC   E5..         MOV       A,?V0
   \   0002CE   25..         ADD       A,?V6
   \   0002D0   F8           MOV       R0,A
   \   0002D1   E4           CLR       A
   \   0002D2   3400         ADDC      A,#0x0
   \   0002D4   F9           MOV       R1,A
   \   0002D5   E8           MOV       A,R0
   \   0002D6   2402         ADD       A,#0x2
   \   0002D8   FA           MOV       R2,A
   \   0002D9   E4           CLR       A
   \   0002DA   39           ADDC      A,R1
   \   0002DB   FB           MOV       R3,A
   \   0002DC   85..82       MOV       DPL,?XSP + 0
   \   0002DF   85..83       MOV       DPH,?XSP + 1
   \   0002E2   E0           MOVX      A,@DPTR
   \   0002E3   F8           MOV       R0,A
   \   0002E4   A3           INC       DPTR
   \   0002E5   E0           MOVX      A,@DPTR
   \   0002E6   F9           MOV       R1,A
   \   0002E7   EA           MOV       A,R2
   \   0002E8   98           SUBB      A,R0
   \   0002E9   F8           MOV       R0,A
   \   0002EA   EB           MOV       A,R3
   \   0002EB   99           SUBB      A,R1
   \   0002EC   F9           MOV       R1,A
   \   0002ED   85..82       MOV       DPL,?XSP + 0
   \   0002F0   85..83       MOV       DPH,?XSP + 1
   \   0002F3   C3           CLR       C
   \   0002F4   E0           MOVX      A,@DPTR
   \   0002F5   9A           SUBB      A,R2
   \   0002F6   A3           INC       DPTR
   \   0002F7   E0           MOVX      A,@DPTR
   \   0002F8   9B           SUBB      A,R3
   \   0002F9   5033         JNC       ??SampleApp_ProcessEvent_27
   \   0002FB   85..82       MOV       DPL,?XSP + 0
   \   0002FE   85..83       MOV       DPH,?XSP + 1
   \   000301   745F         MOV       A,#0x5f
   \   000303   12....       LCALL     ?XSTACK_DISP101_8
   \   000306   8B..         MOV       ?V3,R3
   \   000308   E0           MOVX      A,@DPTR
   \   000309   2A           ADD       A,R2
   \   00030A   FA           MOV       R2,A
   \   00030B   A3           INC       DPTR
   \   00030C   E0           MOVX      A,@DPTR
   \   00030D   35..         ADDC      A,?V3
   \   00030F   8A82         MOV       DPL,R2
   \   000311   F583         MOV       DPH,A
   \                     ??SampleApp_ProcessEvent_28:
   \   000313   E4           CLR       A
   \   000314   F0           MOVX      @DPTR,A
   \   000315   A3           INC       DPTR
   \   000316   E8           MOV       A,R0
   \   000317   24FF         ADD       A,#-0x1
   \   000319   18           DEC       R0
   \   00031A   E9           MOV       A,R1
   \   00031B   34FF         ADDC      A,#-0x1
   \   00031D   F9           MOV       R1,A
   \   00031E   48           ORL       A,R0
   \   00031F   70F2         JNZ       ??SampleApp_ProcessEvent_28
   \   000321   85..82       MOV       DPL,?XSP + 0
   \   000324   85..83       MOV       DPH,?XSP + 1
   \   000327   E0           MOVX      A,@DPTR
   \   000328   28           ADD       A,R0
   \   000329   F0           MOVX      @DPTR,A
   \   00032A   A3           INC       DPTR
   \   00032B   E0           MOVX      A,@DPTR
   \   00032C   39           ADDC      A,R1
   \   00032D   F0           MOVX      @DPTR,A
    420          				InitNVStatus = osal_nv_item_init(nv_id, nv_len, NULL);
   \                     ??SampleApp_ProcessEvent_27:
   \   00032E                ; Setup parameters for call to function osal_nv_item_init
   \   00032E   E4           CLR       A
   \   00032F   F5..         MOV       ?V3,A
   \   000331   78..         MOV       R0,#?V2
   \   000333   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000336   AC..         MOV       R4,?V0
   \   000338   AD..         MOV       R5,?V1
   \   00033A   AA..         MOV       R2,?V4
   \   00033C   AB..         MOV       R3,?V5
   \   00033E   12....       LCALL     ??Subroutine24_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000341   12....       LCALL     ?DEALLOC_XSTACK8
    421          				writeNVStatus = osal_nv_write(nv_id, 0, nv_len, _buffer + prefix_len);
   \   000344   745F         MOV       A,#0x5f
   \   000346   12....       LCALL     ?XSTACK_DISP0_8
   \   000349   E582         MOV       A,DPL
   \   00034B   25..         ADD       A,?V6
   \   00034D   F5..         MOV       ?V2,A
   \   00034F   E4           CLR       A
   \   000350   3583         ADDC      A,DPH
   \   000352   F5..         MOV       ?V3,A
   \   000354                ; Setup parameters for call to function osal_nv_write
   \   000354   78..         MOV       R0,#?V2
   \   000356   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000359   78..         MOV       R0,#?V0
   \   00035B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00035E   7C00         MOV       R4,#0x0
   \   000360   7D00         MOV       R5,#0x0
   \   000362   AA..         MOV       R2,?V4
   \   000364   AB..         MOV       R3,?V5
   \   000366   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000369   7404         MOV       A,#0x4
   \   00036B   12....       LCALL     ?DEALLOC_XSTACK8
    422          				HalUARTWrite(1, _buffer + prefix_len, nv_len);
   \   00036E                ; Setup parameters for call to function HalUARTWrite
   \   00036E   AC..         MOV       R4,?V0
   \   000370   AD..         MOV       R5,?V1
   \   000372   AA..         MOV       R2,?V2
   \   000374   AB..         MOV       R3,?V3
   \   000376   7901         MOV       R1,#0x1
   \   000378   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    423          				(void) writeNVStatus;
   \   00037B   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    424          			} else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
   \                     ??SampleApp_ProcessEvent_22:
   \   00037E   85..82       MOV       DPL,?XSP + 0
   \   000381   85..83       MOV       DPH,?XSP + 1
   \   000384   E0           MOVX      A,@DPTR
   \   000385   6404         XRL       A,#0x4
   \   000387   7002         JNZ       ??SampleApp_ProcessEvent_29
   \   000389   A3           INC       DPTR
   \   00038A   E0           MOVX      A,@DPTR
   \                     ??SampleApp_ProcessEvent_29:
   \   00038B   6003         JZ        $+5
   \   00038D   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
   \   000390                ; Setup parameters for call to function osal_memcmp
   \   000390   75....       MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
   \   000393   75....       MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000396   75..00       MOV       ?V2,#0x0
   \   000399   78..         MOV       R0,#?V0
   \   00039B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00039E   7C04         MOV       R4,#0x4
   \   0003A0   7D00         MOV       R5,#0x0
   \   0003A2   7462         MOV       A,#0x62
   \   0003A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0003A7   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0003AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003AD   E9           MOV       A,R1
   \   0003AE   7003         JNZ       $+5
   \   0003B0   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    425          				WiFiSend("OVER\r\n");
   \   0003B3                ; Setup parameters for call to function WiFiSend
   \   0003B3   7A..         MOV       R2,#`?<Constant "OVER\\r\\n">` & 0xff
   \   0003B5   7B..         MOV       R3,#(`?<Constant "OVER\\r\\n">` >> 8) & 0xff
   \   0003B7   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    426          				_delay_ms(10);
   \   0003BA                ; Setup parameters for call to function _delay_ms
   \   0003BA   7A0A         MOV       R2,#0xa
   \   0003BC   7B00         MOV       R3,#0x0
   \   0003BE   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    427          				do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_30:
   \   0003C1   12....       LCALL     ?Subroutine10 & 0xFFFF
    428          				while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_42:
   \   0003C4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003C7   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0003C9   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0003CB   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   0003CD   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   0003CF   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0003D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003D5   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_30
    429          				break;
    430          			}
    431          		}
    432          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0003D8                ; Setup parameters for call to function osal_set_event
   \   0003D8   12....       LCALL     ?Subroutine6 & 0xFFFF
    433          		return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_52:
   \   0003DB   EE           MOV       A,R6
   \   0003DC   6410         XRL       A,#0x10
   \   0003DE   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    434          	}
    435          
    436          	if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_13:
   \   0003E1   EA           MOV       A,R2
   \   0003E2   5404         ANL       A,#0x4
   \   0003E4   7003         JNZ       $+5
   \   0003E6   02....       LJMP      ??SampleApp_ProcessEvent_31 & 0xFFFF
    437          		// initialize esp8266
    438          		do {
    439          			exit_send();
   \                     ??SampleApp_ProcessEvent_32:
   \   0003E9                ; Setup parameters for call to function exit_send
   \   0003E9   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    440          			InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, SSID_MAX_LENGTH, NULL);
   \   0003EC                ; Setup parameters for call to function osal_nv_item_init
   \   0003EC   E4           CLR       A
   \   0003ED   F5..         MOV       ?V0,A
   \   0003EF   F5..         MOV       ?V1,A
   \   0003F1   78..         MOV       R0,#?V0
   \   0003F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003F6   7C14         MOV       R4,#0x14
   \   0003F8   7D00         MOV       R5,#0x0
   \   0003FA   7A20         MOV       R2,#0x20
   \   0003FC   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0003FF   12....       LCALL     ?DEALLOC_XSTACK8
   \   000402   E9           MOV       A,R1
   \   000403   F5..         MOV       ?V0,A
    441          			readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, SSID_MAX_LENGTH, SSID);
    442          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000405                ; Setup parameters for call to function osal_nv_read
   \   000405   744B         MOV       A,#0x4b
   \   000407   12....       LCALL     ?XSTACK_DISP100_8
   \   00040A   88..         MOV       ?V2,R0
   \   00040C   89..         MOV       ?V3,R1
   \   00040E   78..         MOV       R0,#?V2
   \   000410   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000413   75..14       MOV       ?V2,#0x14
   \   000416   75..00       MOV       ?V3,#0x0
   \   000419   78..         MOV       R0,#?V2
   \   00041B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00041E   7C00         MOV       R4,#0x0
   \   000420   7D00         MOV       R5,#0x0
   \   000422   7A20         MOV       R2,#0x20
   \   000424   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000427   12....       LCALL     ?DEALLOC_XSTACK8
   \   00042A   E9           MOV       A,R1
   \   00042B   6003         JZ        $+5
   \   00042D   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
   \   000430   E5..         MOV       A,?V0
   \   000432   6003         JZ        $+5
   \   000434   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
    443          				debug("Read Flash Failed\r\n");
    444          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    445          			}
    446          			debug(SSID);
   \   000437                ; Setup parameters for call to function _UARTSend
   \   000437   744B         MOV       A,#0x4b
   \   000439   12....       LCALL     ?XSTACK_DISP101_8
   \   00043C   12....       LCALL     ?Subroutine15 & 0xFFFF
    447          			InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, PSWD_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_13:
   \   00043F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000442   7C14         MOV       R4,#0x14
   \   000444   7D00         MOV       R5,#0x0
   \   000446   7A10         MOV       R2,#0x10
   \   000448   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00044B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00044E   E9           MOV       A,R1
   \   00044F   F5..         MOV       ?V0,A
    448          			readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, PSWD_MAX_LENGTH, PSWD);
    449          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000451                ; Setup parameters for call to function osal_nv_read
   \   000451   7437         MOV       A,#0x37
   \   000453   12....       LCALL     ?XSTACK_DISP100_8
   \   000456   88..         MOV       ?V2,R0
   \   000458   89..         MOV       ?V3,R1
   \   00045A   78..         MOV       R0,#?V2
   \   00045C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00045F   75..14       MOV       ?V2,#0x14
   \   000462   75..00       MOV       ?V3,#0x0
   \   000465   78..         MOV       R0,#?V2
   \   000467   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00046A   7C00         MOV       R4,#0x0
   \   00046C   7D00         MOV       R5,#0x0
   \   00046E   7A10         MOV       R2,#0x10
   \   000470   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000473   12....       LCALL     ?DEALLOC_XSTACK8
   \   000476   E9           MOV       A,R1
   \   000477   6003         JZ        $+5
   \   000479   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
   \   00047C   E5..         MOV       A,?V0
   \   00047E   6003         JZ        $+5
   \   000480   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
    450          				debug("Read Flash Failed\r\n");
    451          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    452          			}
    453          			debug(PSWD);
   \   000483                ; Setup parameters for call to function _UARTSend
   \   000483   7437         MOV       A,#0x37
   \   000485   12....       LCALL     ?XSTACK_DISP101_8
   \   000488   12....       LCALL     ?Subroutine15 & 0xFFFF
    454          			InitNVStatus = osal_nv_item_init(ZD_NV_IP_ID, IP_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_14:
   \   00048B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00048E   7C10         MOV       R4,#0x10
   \   000490   7D00         MOV       R5,#0x0
   \   000492   7A40         MOV       R2,#0x40
   \   000494   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000497   12....       LCALL     ?DEALLOC_XSTACK8
   \   00049A   E9           MOV       A,R1
   \   00049B   F5..         MOV       ?V0,A
    455          			readNVStatus = osal_nv_read(ZD_NV_IP_ID, 0, IP_MAX_LENGTH, MYIP);
    456          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   00049D                ; Setup parameters for call to function osal_nv_read
   \   00049D   7427         MOV       A,#0x27
   \   00049F   12....       LCALL     ?XSTACK_DISP100_8
   \   0004A2   88..         MOV       ?V2,R0
   \   0004A4   89..         MOV       ?V3,R1
   \   0004A6   78..         MOV       R0,#?V2
   \   0004A8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004AB   75..10       MOV       ?V2,#0x10
   \   0004AE   75..00       MOV       ?V3,#0x0
   \   0004B1   78..         MOV       R0,#?V2
   \   0004B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004B6   7C00         MOV       R4,#0x0
   \   0004B8   7D00         MOV       R5,#0x0
   \   0004BA   7A40         MOV       R2,#0x40
   \   0004BC   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0004BF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004C2   E9           MOV       A,R1
   \   0004C3   704A         JNZ       ??SampleApp_ProcessEvent_33
   \   0004C5   E5..         MOV       A,?V0
   \   0004C7   7046         JNZ       ??SampleApp_ProcessEvent_33
    457          				debug("Read Flash Failed\r\n");
    458          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    459          			}
    460          			debug(MYIP);
   \   0004C9                ; Setup parameters for call to function _UARTSend
   \   0004C9   7427         MOV       A,#0x27
   \   0004CB   12....       LCALL     ?XSTACK_DISP101_8
   \   0004CE   12....       LCALL     ?Subroutine15 & 0xFFFF
    461          			InitNVStatus = osal_nv_item_init(ZD_NV_PORT_ID, PORT_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_15:
   \   0004D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004D4   7C08         MOV       R4,#0x8
   \   0004D6   7D00         MOV       R5,#0x0
   \   0004D8   7A30         MOV       R2,#0x30
   \   0004DA   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0004DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004E0   E9           MOV       A,R1
   \   0004E1   F5..         MOV       ?V0,A
    462          			readNVStatus = osal_nv_read(ZD_NV_PORT_ID, 0, PORT_MAX_LENGTH, PORT);
    463          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0004E3                ; Setup parameters for call to function osal_nv_read
   \   0004E3   7402         MOV       A,#0x2
   \   0004E5   12....       LCALL     ?XSTACK_DISP100_8
   \   0004E8   88..         MOV       ?V2,R0
   \   0004EA   89..         MOV       ?V3,R1
   \   0004EC   78..         MOV       R0,#?V2
   \   0004EE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004F1   75..08       MOV       ?V2,#0x8
   \   0004F4   75..00       MOV       ?V3,#0x0
   \   0004F7   78..         MOV       R0,#?V2
   \   0004F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004FC   7C00         MOV       R4,#0x0
   \   0004FE   7D00         MOV       R5,#0x0
   \   000500   7A30         MOV       R2,#0x30
   \   000502   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000505   12....       LCALL     ?DEALLOC_XSTACK8
   \   000508   E9           MOV       A,R1
   \   000509   7004         JNZ       ??SampleApp_ProcessEvent_33
   \   00050B   E5..         MOV       A,?V0
   \   00050D   600C         JZ        ??SampleApp_ProcessEvent_34
    464          				debug("Read Flash Failed\r\n");
   \                     ??SampleApp_ProcessEvent_33:
   \   00050F                ; Setup parameters for call to function _UARTSend
   \   00050F   7A..         MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
   \   000511   7B..         MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
   \   000513   7900         MOV       R1,#0x0
   \   000515   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    465          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000518   02....       LJMP      ??CrossCallReturnLabel_56 & 0xFFFF
    466          			}
    467          			debug(PORT);
   \                     ??SampleApp_ProcessEvent_34:
   \   00051B                ; Setup parameters for call to function _UARTSend
   \   00051B   7402         MOV       A,#0x2
   \   00051D   12....       LCALL     ?XSTACK_DISP101_8
   \   000520   7900         MOV       R1,#0x0
   \   000522   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    468          
    469          			do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_35:
   \   000525   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   000528   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   00052B                ; Setup parameters for call to function _UARTSend
   \   00052B   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    470          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_48:
   \   00052E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000531   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000534   12....       LCALL     ?DEALLOC_XSTACK8
   \   000537   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_35
    471          			do debug_and_print("AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PSWD);
   \                     ??SampleApp_ProcessEvent_36:
   \   00053A   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
   \   00053D   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
   \   000540                ; Setup parameters for call to function _UARTSend
   \   000540   7437         MOV       A,#0x37
   \   000542   12....       LCALL     ?XSTACK_DISP100_8
   \   000545   88..         MOV       ?V2,R0
   \   000547   89..         MOV       ?V3,R1
   \   000549   78..         MOV       R0,#?V2
   \   00054B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00054E   744D         MOV       A,#0x4d
   \   000550   12....       LCALL     ?XSTACK_DISP100_8
   \   000553   88..         MOV       ?V2,R0
   \   000555   89..         MOV       ?V3,R1
   \   000557   78..         MOV       R0,#?V2
   \   000559   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00055C   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   00055F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000562                ; Setup parameters for call to function _UARTSend
   \   000562   7437         MOV       A,#0x37
   \   000564   12....       LCALL     ?XSTACK_DISP100_8
   \   000567   88..         MOV       ?V2,R0
   \   000569   89..         MOV       ?V3,R1
   \   00056B   78..         MOV       R0,#?V2
   \   00056D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000570   744D         MOV       A,#0x4d
   \   000572   12....       LCALL     ?XSTACK_DISP100_8
   \   000575   88..         MOV       ?V2,R0
   \   000577   89..         MOV       ?V3,R1
   \   000579   78..         MOV       R0,#?V2
   \   00057B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00057E   AA..         MOV       R2,?V0
   \   000580   AB..         MOV       R3,?V1
   \   000582   7901         MOV       R1,#0x1
   \   000584   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000587   12....       LCALL     ?DEALLOC_XSTACK8
    472          			while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \   00058A                ; Setup parameters for call to function wait_for
   \   00058A   E4           CLR       A
   \   00058B   F5..         MOV       ?V0,A
   \   00058D   F5..         MOV       ?V1,A
   \   00058F   78..         MOV       R0,#?V0
   \   000591   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000594   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   000596   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   000598   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00059B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00059E   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_36
    473          			do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_37:
   \   0005A1   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   0005A4   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   0005A7                ; Setup parameters for call to function _UARTSend
   \   0005A7   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    474          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_49:
   \   0005AA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005AD   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0005B0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005B3   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_37
    475          			do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_38:
   \   0005B6   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0005B9   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0005BC                ; Setup parameters for call to function _UARTSend
   \   0005BC   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    476          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_50:
   \   0005BF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005C2   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0005C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005C8   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_38
    477          			do debug_and_print("AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", MYIP, PORT);
   \                     ??SampleApp_ProcessEvent_39:
   \   0005CB   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` & 0xff
   \   0005CE   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` >> 8) & 0xff
   \   0005D1                ; Setup parameters for call to function _UARTSend
   \   0005D1   7402         MOV       A,#0x2
   \   0005D3   12....       LCALL     ?XSTACK_DISP100_8
   \   0005D6   88..         MOV       ?V2,R0
   \   0005D8   89..         MOV       ?V3,R1
   \   0005DA   78..         MOV       R0,#?V2
   \   0005DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005DF   7429         MOV       A,#0x29
   \   0005E1   12....       LCALL     ?XSTACK_DISP100_8
   \   0005E4   88..         MOV       ?V2,R0
   \   0005E6   89..         MOV       ?V3,R1
   \   0005E8   78..         MOV       R0,#?V2
   \   0005EA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005ED   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0005F0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005F3                ; Setup parameters for call to function _UARTSend
   \   0005F3   7402         MOV       A,#0x2
   \   0005F5   12....       LCALL     ?XSTACK_DISP100_8
   \   0005F8   88..         MOV       ?V2,R0
   \   0005FA   89..         MOV       ?V3,R1
   \   0005FC   78..         MOV       R0,#?V2
   \   0005FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000601   7429         MOV       A,#0x29
   \   000603   12....       LCALL     ?XSTACK_DISP100_8
   \   000606   88..         MOV       ?V2,R0
   \   000608   89..         MOV       ?V3,R1
   \   00060A   78..         MOV       R0,#?V2
   \   00060C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00060F   AA..         MOV       R2,?V0
   \   000611   AB..         MOV       R3,?V1
   \   000613   7901         MOV       R1,#0x1
   \   000615   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000618   12....       LCALL     ?DEALLOC_XSTACK8
    478          			while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \   00061B                ; Setup parameters for call to function wait_for
   \   00061B   E4           CLR       A
   \   00061C   F5..         MOV       ?V0,A
   \   00061E   F5..         MOV       ?V1,A
   \   000620   78..         MOV       R0,#?V0
   \   000622   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000625   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   000627   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   000629   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00062C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00062F   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_39
    479          			debug_and_print("AT+CIPSEND\r\n");
   \   000632   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   000635   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   000638                ; Setup parameters for call to function _UARTSend
   \   000638   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    480          		} while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_51:
   \   00063B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00063E   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000640   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000642   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   000644   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   000646   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   000649   12....       LCALL     ?DEALLOC_XSTACK8
   \   00064C   E9           MOV       A,R1
   \   00064D   6003         JZ        $+5
   \   00064F   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    481          		
    482          		// drive initial events
    483          		_delay_ms(50);
   \   000652                ; Setup parameters for call to function _delay_ms
   \   000652   7A32         MOV       R2,#0x32
   \   000654   7B00         MOV       R3,#0x0
   \   000656   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    484          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000659                ; Setup parameters for call to function osal_set_event
   \   000659   7A08         MOV       R2,#0x8
   \   00065B   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    485          		return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_56:
   \   00065E   EE           MOV       A,R6
   \   00065F   6404         XRL       A,#0x4
   \   000661   8078         SJMP      ??SampleApp_ProcessEvent_12
    486          	}
    487          
    488          	if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_31:
   \   000663   EA           MOV       A,R2
   \   000664   5408         ANL       A,#0x8
   \   000666   6078         JZ        ??SampleApp_ProcessEvent_40
    489          		length = WiFiRecv(_buffer);
   \   000668                ; Setup parameters for call to function WiFiRecv
   \   000668   745F         MOV       A,#0x5f
   \   00066A   12....       LCALL     ?XSTACK_DISP101_8
   \   00066D   12....       LCALL     ?Subroutine14 & 0xFFFF
    490          		if (osal_memcmp(_buffer, "humidify\r\n", 10)) {
   \                     ??CrossCallReturnLabel_12:
   \   000670                ; Setup parameters for call to function osal_memcmp
   \   000670   75....       MOV       ?V0,#`?<Constant "humidify\\r\\n">` & 0xff
   \   000673   75....       MOV       ?V1,#(`?<Constant "humidify\\r\\n">` >> 8) & 0xff
   \   000676   75..00       MOV       ?V2,#0x0
   \   000679   78..         MOV       R0,#?V0
   \   00067B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00067E   7C0A         MOV       R4,#0xa
   \   000680   7D00         MOV       R5,#0x0
   \   000682   7462         MOV       A,#0x62
   \   000684   12....       LCALL     ?XSTACK_DISP0_8
   \   000687   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00068A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00068D   E9           MOV       A,R1
   \   00068E   6007         JZ        ??SampleApp_ProcessEvent_41
    491          			_zigbeeSend("humidify\r\n\0");
   \   000690                ; Setup parameters for call to function _zigbeeSend
   \   000690   7A..         MOV       R2,#`?<Constant "humidify\\r\\n\\000">` & 0xff
   \   000692   7B..         MOV       R3,#(`?<Constant "humidify\\r\\n\\000">` >> 8) & 0xff
   \   000694   12....       LCALL     `??_zigbeeSend::?relay`; Banked call to: _zigbeeSend
    492          		}
    493          		WiFiSend("OK\r\n");
   \                     ??SampleApp_ProcessEvent_41:
   \   000697                ; Setup parameters for call to function WiFiSend
   \   000697   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000699   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   00069B   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    494          		if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \   00069E                ; Setup parameters for call to function wait_for
   \   00069E   75..C8       MOV       ?V0,#-0x38
   \   0006A1   75..00       MOV       ?V1,#0x0
   \   0006A4   78..         MOV       R0,#?V0
   \   0006A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0006A9   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0006AB   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0006AD   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   0006AF   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   0006B1   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   0006B4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0006B7   E9           MOV       A,R1
   \   0006B8   600E         JZ        ??SampleApp_ProcessEvent_42
    495          			debug("WIFI RESET\r\n");
   \   0006BA                ; Setup parameters for call to function _UARTSend
   \   0006BA   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   0006BC   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   0006BE   7900         MOV       R1,#0x0
   \   0006C0   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    496          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0006C3                ; Setup parameters for call to function osal_set_event
   \   0006C3   12....       LCALL     ?Subroutine6 & 0xFFFF
    497          		} else {
   \                     ??CrossCallReturnLabel_53:
   \   0006C6   8010         SJMP      ??SampleApp_ProcessEvent_43
    498          			osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_42:
   \   0006C8                ; Setup parameters for call to function osal_start_timerEx
   \   0006C8   7CD0         MOV       R4,#-0x30
   \   0006CA   7D07         MOV       R5,#0x7
   \   0006CC   7A08         MOV       R2,#0x8
   \   0006CE   7B00         MOV       R3,#0x0
   \   0006D0   90....       MOV       DPTR,#SampleApp_TaskID
   \   0006D3   E0           MOVX      A,@DPTR
   \   0006D4   F9           MOV       R1,A
   \   0006D5   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    499          		}
    500          		return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??SampleApp_ProcessEvent_43:
   \   0006D8   EE           MOV       A,R6
   \   0006D9   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_12:
   \   0006DB   FA           MOV       R2,A
   \   0006DC   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0006DD   FB           MOV       R3,A
   \   0006DE   8004         SJMP      ??SampleApp_ProcessEvent_44
    501          	}
    502            
    503            // Discard unknown events
    504            return 0;
   \                     ??SampleApp_ProcessEvent_40:
   \   0006E0   7A00         MOV       R2,#0x0
   \   0006E2   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_44:
   \   0006E4   749F         MOV       A,#-0x61
   \   0006E6                REQUIRE ?Subroutine0
   \   0006E6                REQUIRE _A_P0
   \   0006E6                ; // Fall through to label ?Subroutine0
    505          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7B04         MOV       R3,#0x4
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7B04         MOV       R3,#0x4
   \   000002                REQUIRE ??Subroutine24_0
   \   000002                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006                REQUIRE ??Subroutine25_0
   \   000006                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EA           MOV       A,R2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   EB           MOV       A,R3
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   75....       MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
   \   000003   75....       MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V0,A
   \   000015   F5..         MOV       ?V1,A
   \   000017   78..         MOV       R0,#?V0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine27_0
   \   000002                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine32_0
   \   000004                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine33_0
   \   000004                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    506          
    507          /*********************************************************************
    508           * Event Generation Functions
    509           */
    510          /*********************************************************************
    511           * @fn      SampleApp_HandleKeys
    512           *
    513           * @brief   Handles all key events for this device.
    514           *
    515           * @param   shift - true if in shift/alt.
    516           * @param   keys - bit field for key events. Valid entries:
    517           *                 HAL_KEY_SW_2
    518           *                 HAL_KEY_SW_1
    519           *
    520           * @return  none
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    523          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    524            (void)shift;  // Intentionally unreferenced parameter
    525            
    526            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5007         JNC       ??SampleApp_HandleKeys_0
    527            {
    528          	/* This key sends the Flash Command is sent to Group 1.
    529          	 * This device will not receive the Flash Command from this
    530          	 * device (even if it belongs to group 1).
    531          	 */
    532          	SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    533            }
    534          
    535            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5021         JNC       ??SampleApp_HandleKeys_1
    536            {
    537          	/* The Flashr Command is sent to Group 1.
    538          	 * This key toggles this device in and out of group 1.
    539          	 * If this device doesn't belong to group 1, this application
    540          	 * will not receive the Flash command sent to group 1.
    541          	 */
    542          	aps_Group_t *grp;
    543          	grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    544          	if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A02         MOV       R2,#0x2
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7914         MOV       R1,#0x14
   \   00001D   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   600B         JZ        ??SampleApp_HandleKeys_2
    545          	{
    546          	  // Remove from the group
    547          	  aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000024                ; Setup parameters for call to function aps_RemoveGroup
   \   000024   7A02         MOV       R2,#0x2
   \   000026   7B00         MOV       R3,#0x0
   \   000028   7914         MOV       R1,#0x14
   \   00002A   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00002D   8009         SJMP      ??SampleApp_HandleKeys_1
    548          	}
    549          	else
    550          	{
    551          	  // Add to the flash group
    552          	  aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   00002F                ; Setup parameters for call to function aps_AddGroup
   \   00002F   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000031   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000033   7914         MOV       R1,#0x14
   \   000035   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    553          	}
    554            }
    555          }
   \                     ??SampleApp_HandleKeys_1:
   \   000038   02....       LJMP      ??Subroutine30_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    556          
    557          /*********************************************************************
    558           * LOCAL FUNCTIONS
    559           */
    560          
    561          /*********************************************************************
    562           * @fn      SampleApp_MessageMSGCB
    563           *
    564           * @brief   Data message processor callback.  This function processes
    565           *          any incoming data - probably from other devices.  So, based
    566           *          on cluster ID, perform the intended action.
    567           *
    568           * @param   none
    569           *
    570           * @return  none
    571           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    572          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    573          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    574            //uint16 flashTime;
    575          
    576            switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    577            {
    578          	 case SAMPLEAPP_PERIODIC_CLUSTERID:
    579          	  HalUARTWrite(0,"I get data\n",11);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    580          	  HalUARTWrite(0, &(pkt->cmd.Data[0]),10); //´òÓ¡ÊÕµ½Êý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   2422         ADD       A,#0x22
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   12....       LCALL     ?Subroutine7 & 0xFFFF
    581          	  HalUARTWrite(0,"\n",1);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \                     ??CrossCallReturnLabel_3:
   \   000041                ; Setup parameters for call to function HalUARTWrite
   \   000041   7C01         MOV       R4,#0x1
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   000047   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000049   02....       LJMP      ??SampleApp_MessageMSGCB_3 & 0xFFFF
    582          	  break;
    583          
    584          	 case SAMPLEAPP_FLASH_CLUSTERID:
    585          	   if(pkt->cmd.Data[4]=='E' && pkt->cmd.Data[5] =='2')
   \                     ??SampleApp_MessageMSGCB_2:
   \   00004C   EA           MOV       A,R2
   \   00004D   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000050   F8           MOV       R0,A
   \   000051   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6445         XRL       A,#0x45
   \   000057   705A         JNZ       ??SampleApp_MessageMSGCB_4
   \   000059   EA           MOV       A,R2
   \   00005A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00005D   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6432         XRL       A,#0x32
   \   000064   704D         JNZ       ??SampleApp_MessageMSGCB_4
    586          	   {
    587          		 HalUARTWrite(0,"Temp is:",8);
   \   000066                ; Setup parameters for call to function HalUARTWrite
   \   000066   7C08         MOV       R4,#0x8
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A..         MOV       R2,#`?<Constant "Temp is:">` & 0xff
   \   00006C   7B..         MOV       R3,#(`?<Constant "Temp is:">` >> 8) & 0xff
   \   00006E   7900         MOV       R1,#0x0
   \   000070   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    588          		 HalUARTWrite(0,&pkt->cmd.Data[0],2);
   \   000073   EE           MOV       A,R6
   \   000074   2422         ADD       A,#0x22
   \   000076   F5..         MOV       ?V0,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   F5..         MOV       ?V1,A
   \   00007C                ; Setup parameters for call to function HalUARTWrite
   \   00007C   7C02         MOV       R4,#0x2
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   85..82       MOV       DPL,?V0
   \   000083   12....       LCALL     ?Subroutine7 & 0xFFFF
    589          		 HalUARTWrite(0,"\r\n",2);
   \                     ??CrossCallReturnLabel_4:
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   7C02         MOV       R4,#0x2
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00008E   7900         MOV       R1,#0x0
   \   000090   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    590          
    591          		 HalUARTWrite(0,"Humidity is:",12);
   \   000093                ; Setup parameters for call to function HalUARTWrite
   \   000093   7C0C         MOV       R4,#0xc
   \   000095   7D00         MOV       R5,#0x0
   \   000097   7A..         MOV       R2,#`?<Constant "Humidity is:">` & 0xff
   \   000099   7B..         MOV       R3,#(`?<Constant "Humidity is:">` >> 8) & 0xff
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    592          		 HalUARTWrite(0,&pkt->cmd.Data[2],2);
   \   0000A0                ; Setup parameters for call to function HalUARTWrite
   \   0000A0   7C02         MOV       R4,#0x2
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   85..82       MOV       DPL,?V0
   \   0000A7   85..83       MOV       DPH,?V1
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   2C           ADD       A,R4
   \   0000AC   FA           MOV       R2,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   3400         ADDC      A,#0x0
   \   0000B1   8018         SJMP      ??SampleApp_MessageMSGCB_5
    593          		 HalUARTWrite(0,"\r\n",2);
    594          	   }
    595          	   else
    596          	   {
    597          	  HalUARTWrite(0,"I get data:\n",12);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000B3                ; Setup parameters for call to function HalUARTWrite
   \   0000B3   7C0C         MOV       R4,#0xc
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   7A..         MOV       R2,#`?<Constant "I get data:\\n">` & 0xff
   \   0000B9   7B..         MOV       R3,#(`?<Constant "I get data:\\n">` >> 8) & 0xff
   \   0000BB   7900         MOV       R1,#0x0
   \   0000BD   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    598          	  HalUARTWrite(0, &pkt->cmd.Data[0],20); //´òÓ¡ÊÕµ½Êý¾Ý
   \   0000C0                ; Setup parameters for call to function HalUARTWrite
   \   0000C0   7C14         MOV       R4,#0x14
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   EE           MOV       A,R6
   \   0000C5   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000C8   FA           MOV       R2,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000CB   FB           MOV       R3,A
   \   0000CC   7900         MOV       R1,#0x0
   \   0000CE   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    599          	  HalUARTWrite(0,"\r\n",2);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \   0000D1                ; Setup parameters for call to function HalUARTWrite
   \   0000D1   7C02         MOV       R4,#0x2
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000D7   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    600          	//  flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    601          	 // HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    602          	   }
    603          	  break;
    604            }
    605          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000DE   02....       LJMP      ??Subroutine30_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FB           MOV       R3,A
   \   000007   7900         MOV       R1,#0x0
   \   000009   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   00000C   22           RET
    606          
    607          /*********************************************************************
    608           * @fn      SampleApp_SendPeriodicMessage
    609           *
    610           * @brief   Send the periodic message.
    611           *
    612           * @param   none
    613           *
    614           * @return  none
    615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    616          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    617          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    618            uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};//×Ô¶¨ÒåÊý¾Ý
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    619            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    620          					   SAMPLEAPP_PERIODIC_CLUSTERID,
    621          					   10,//×Ö½ÚÊý
    622          					   data,//Ö¸ÕëÍ·
    623          					   &SampleApp_TransID,
    624          					   AF_DISCV_ROUTE,
    625          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    626            {
    627            }
    628            else
    629            {
    630          	// Error occurred in request to send.
    631            }
    632          }
   \   00005A   740A         MOV       A,#0xa
   \   00005C   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000003   7409         MOV       A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0
    633          
    634          /*********************************************************************
    635           * @fn      SampleApp_SendFlashMessage
    636           *
    637           * @brief   Send the flash message to group 1.
    638           *
    639           * @param   flashTime - in milliseconds
    640           *
    641           * @return  none
    642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    643          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    645            uint8 buffer[3];
    646            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    647            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    648            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    649          
    650            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    651          					   SAMPLEAPP_FLASH_CLUSTERID,
    652          					   3,
    653          					   buffer,
    654          					   &SampleApp_TransID,
    655          					   AF_DISCV_ROUTE,
    656          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    657            {
    658            }
    659            else
    660            {
    661          	// Error occurred in request to send.
    662            }
    663          }
   \   000063   7403         MOV       A,#0x3
   \   000065   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7920         MOV       R1,#0x20
   \   000002   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000008   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine29_0
   \   00000A                ; // Fall through to label ??Subroutine29_0
    664          
    665          /*********************************************************************
    666          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    667          void SampleApp_SendGroupMessage( void )
   \                     SampleApp_SendGroupMessage:
    668          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    669            uint8 data[20]="I am Coordinator\r\n\0";
   \   00000A   90....       MOV       DPTR,#`?<Constant "I am Coordinator\\r\\n\\000">`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    670            //uint8 data[20]="I am EndDevice1\r\n\0";
    671            //uint8 data[20]="I am EndDevice2\r\n\0";
    672            if ( AF_DataRequest( & SampleApp_Flash_DstAddr,
    673          					   &SampleApp_epDesc,
    674          					   SAMPLEAPP_FLASH_CLUSTERID,
    675          					   20,
    676          					   data,
    677          					   &SampleApp_TransID,
    678          					   AF_DISCV_ROUTE,
    679          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..14       MOV       ?V0,#0x14
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..02       MOV       ?V0,#0x2
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
    680            {
    681            }
    682            else
    683            {
    684          	// Error occurred in request to send.
    685            }
    686          }
   \   000050   7414         MOV       A,#0x14
   \   000052   02....       LJMP      ?Subroutine1 & 0xFFFF
    687          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    688          void _zigbeeSend(uint8 *fmt, ...) {
   \                     _zigbeeSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    689          	va_list arg_ptr;
    690          	uint8 _buffer[UartDefaultTxLen], cnt;
    691          	uint16 length = 0;
    692          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    693          		_buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??_zigbeeSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??_zigbeeSend_0
    694          	va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine4 & 0xFFFF
    695          	length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_0:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    696          	va_end(arg_ptr);
    697          	if (AF_DataRequest(&SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    698          		SAMPLEAPP_FLASH_CLUSTERID, length, _buffer,
    699          		&SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV       ?V2,#0x1e
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV       ?V2,#SampleApp_TransID & 0xff
   \   000041   75....       MOV       ?V3,#(SampleApp_TransID >> 8) & 0xff
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7405         MOV       A,#0x5
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V2,R0
   \   000050   89..         MOV       ?V3,R1
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75..02       MOV       ?V0,#0x2
   \   00005F   75..00       MOV       ?V1,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00006A                REQUIRE ?Subroutine2
   \   00006A                ; // Fall through to label ?Subroutine2
    700          	} else {}
    701          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7442         MOV       A,#0x42
   \   000005   12....       LCALL     ?DEALLOC_XSTACK8
   \   000008   7F04         MOV       R7,#0x4
   \   00000A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    702          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    704          	va_list arg_ptr;
    705          	uint8 _buffer[UartDefaultTxLen], cnt;
    706          	uint16 length = 0;
    707          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    708          		_buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    709          	va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   12....       LCALL     ?Subroutine4 & 0xFFFF
    710          	length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_1:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   EA           MOV       A,R2
   \   000024   FC           MOV       R4,A
   \   000025   EB           MOV       A,R3
   \   000026   FD           MOV       R5,A
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
    711          	va_end(arg_ptr);
    712          	HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00003C                ; Setup parameters for call to function HalUARTWrite
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   EE           MOV       A,R6
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    713          }
   \   000046   7442         MOV       A,#0x42
   \   000048                REQUIRE ?Subroutine1
   \   000048                ; // Fall through to label ?Subroutine1
    714          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    716          	for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    717          		_buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   28           ADD       A,R0
   \   00001E   F582         MOV       DPL,A
   \   000020   EB           MOV       A,R3
   \   000021   39           ADDC      A,R1
   \   000022   F583         MOV       DPH,A
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2401         ADD       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   3400         ADDC      A,#0x0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   C3           CLR       C
   \   000038   E0           MOVX      A,@DPTR
   \   000039   9440         SUBB      A,#0x40
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   40D2         JC        ??_UARTRead_0
    718          	*length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   000041                ; Setup parameters for call to function HalUARTRead
   \   000041   7C40         MOV       R4,#0x40
   \   000043   7D00         MOV       R5,#0x0
   \   000045   A9..         MOV       R1,?V0
   \   000047   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   EA           MOV       A,R2
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   F0           MOVX      @DPTR,A
    719          }
   \   000053                REQUIRE ?Subroutine3
   \   000053                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    720          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    721          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    722          	while (timeout --) {
    723          	   _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    724          	}
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    725          }
   \   000022   80..         SJMP      ?Subroutine3
    726          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    728          	uint8 cnt;
    729          	while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    730          		cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    731          		while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    732          			asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    733          		}
    734          	}    
    735          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    736          
    737          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    739          	uint16 wait_len, read_len, err_len;
    740          	int16 i, index;
    741          	uint8 buffer[UartDefaultRxLen], flag;
    742          	wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    743          	err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7452         MOV       A,#0x52
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    744          	while (1) {
    745          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     ?Subroutine13 & 0xFFFF
    746          		_delay_ms(1);
    747          		if (read_len > 2) { // at least 0x0D 0x0A
   \                     ??CrossCallReturnLabel_9:
   \   00003C   9403         SUBB      A,#0x3
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   9400         SUBB      A,#0x0
   \   000042   5003         JNC       $+5
   \   000044   02....       LJMP      ??wait_for_1 & 0xFFFF
    748          			index = 0;
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    749          			for (i = read_len - 1; i >= 0; i --) {
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   24FF         ADD       A,#-0x1
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   000059   E8           MOV       A,R0
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   18           DEC       R0
   \   00005D   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   F9           MOV       R1,A
   \   000061   C3           CLR       C
   \   000062   E9           MOV       A,R1
   \   000063   9400         SUBB      A,#0x0
   \   000065   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000067   65D0         XRL       A,PSW
   \   000069   33           RLC       A
   \   00006A   4032         JC        ??wait_for_4
    750          				if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E582         MOV       A,DPL
   \   000073   28           ADD       A,R0
   \   000074   F582         MOV       DPL,A
   \   000076   E583         MOV       A,DPH
   \   000078   39           ADDC      A,R1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   640A         XRL       A,#0xa
   \   00007E   70D9         JNZ       ??wait_for_3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   24FF         ADD       A,#-0x1
   \   000089   FC           MOV       R4,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   34FF         ADDC      A,#-0x1
   \   00008E   FD           MOV       R5,A
   \   00008F   EC           MOV       A,R4
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??wait_for_5
   \   000093   ED           MOV       A,R5
   \   000094   69           XRL       A,R1
   \                     ??wait_for_5:
   \   000095   60C2         JZ        ??wait_for_3
    751          					index = i + 1;
   \   000097   E8           MOV       A,R0
   \   000098   2401         ADD       A,#0x1
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
    752          					break;
    753          				}
    754          			}
    755          			
    756          			if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   00009E   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000A1   65..         XRL       A,?V2
   \   0000A3   7003         JNZ       ??wait_for_6
   \   0000A5   E9           MOV       A,R1
   \   0000A6   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000A8   703B         JNZ       ??wait_for_7
    757          				flag = 1;
    758          				for (i = 0; i < err_len; i ++) {
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   801F         SJMP      ??wait_for_8
    759          					if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000B0   EA           MOV       A,R2
   \   0000B1   28           ADD       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EB           MOV       A,R3
   \   0000B4   39           ADDC      A,R1
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine19 & 0xFFFF
    760          						flag = 0;
    761          						break;
    762          					}
    763          				}
   \                     ??CrossCallReturnLabel_22:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   28           ADD       A,R0
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6C           XRL       A,R4
   \   0000C8   701B         JNZ       ??wait_for_7
   \   0000CA   08           INC       R0
   \   0000CB   E8           MOV       A,R0
   \   0000CC   7001         JNZ       ??wait_for_8
   \   0000CE   09           INC       R1
   \                     ??wait_for_8:
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V2
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V3
   \   0000D6   40D8         JC        ??wait_for_9
    764          				if (flag == 1) {
    765          					debug(err);
   \   0000D8                ; Setup parameters for call to function _UARTSend
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    766          					return 1;
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   8060         SJMP      ??wait_for_10
    767          				}
    768          			}
    769          
    770          			if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000E5   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E8   65..         XRL       A,?V6
   \   0000EA   7003         JNZ       ??wait_for_11
   \   0000EC   E9           MOV       A,R1
   \   0000ED   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   0000EF   703D         JNZ       ??wait_for_1
    771          				flag = 1;
    772          				for (i = 0; i < wait_len; i ++) {
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   8021         SJMP      ??wait_for_12
    773          					if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   28           ADD       A,R0
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EB           MOV       A,R3
   \   0000FB   39           ADDC      A,R1
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine19 & 0xFFFF
    774          						flag = 0;
    775          						break;
    776          					}
    777          				}
   \                     ??CrossCallReturnLabel_23:
   \   000105   E5..         MOV       A,?V0
   \   000107   28           ADD       A,R0
   \   000108   F582         MOV       DPL,A
   \   00010A   E5..         MOV       A,?V1
   \   00010C   39           ADDC      A,R1
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6C           XRL       A,R4
   \   000111   701B         JNZ       ??wait_for_1
   \   000113   08           INC       R0
   \   000114   E8           MOV       A,R0
   \   000115   7001         JNZ       ??wait_for_12
   \   000117   09           INC       R1
   \                     ??wait_for_12:
   \   000118   C3           CLR       C
   \   000119   E8           MOV       A,R0
   \   00011A   95..         SUBB      A,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   95..         SUBB      A,?V7
   \   00011F   40D6         JC        ??wait_for_13
    778          				if (flag == 1) {
    779          					debug(str);
   \   000121                ; Setup parameters for call to function _UARTSend
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   7900         MOV       R1,#0x0
   \   000127   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    780          					return 0;
   \   00012A   7900         MOV       R1,#0x0
   \   00012C   8017         SJMP      ??wait_for_10
    781          				}
    782          			}
    783          		}
    784          		timeout --;
    785          		if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00012E   E5..         MOV       A,?V4
   \   000130   24FF         ADD       A,#-0x1
   \   000132   F5..         MOV       ?V4,A
   \   000134   E5..         MOV       A,?V5
   \   000136   34FF         ADDC      A,#-0x1
   \   000138   F5..         MOV       ?V5,A
   \   00013A   E5..         MOV       A,?V4
   \   00013C   45..         ORL       A,?V5
   \   00013E   6003         JZ        $+5
   \   000140   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000143   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000145   7442         MOV       A,#0x42
    786          	}
   \   000147   02....       LJMP      ?Subroutine0 & 0xFFFF
    787          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    788          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    789          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    790          	print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine12 & 0xFFFF
    791          	_delay_ms(10);
    792          	print("+++");
   \                     ??CrossCallReturnLabel_67:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine12 & 0xFFFF
    793          	_delay_ms(10);
    794          	print("\r\n");
   \                     ??CrossCallReturnLabel_68:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine31_0 & 0xFFFF
    795          	_delay_ms(10);
    796          }
   \                     ??CrossCallReturnLabel_69:
   \   000012   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine31_0
   \   000004                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET
    797          
    798          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    799          uint8 WiFiSend(uint8 *fmt, ...) {
   \                     WiFiSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    800          	va_list arg_ptr;
    801          	uint8 buffer[UartDefaultTxLen], cnt;
    802          	uint16 length = 0;
    803          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    804          		buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??WiFiSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??WiFiSend_0
    805          	va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine4 & 0xFFFF
    806          	length = vsprintf((char *)buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_2:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    807          	va_end(arg_ptr);
    808          	debug_and_print("AT+CIPSEND=0,%d\r\n", length);
   \   000036                ; Setup parameters for call to function _UARTSend
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   00003F   7900         MOV       R1,#0x0
   \   000041   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function _UARTSend
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   000050   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    809          	_delay_ms(10);
   \   00005C                ; Setup parameters for call to function _delay_ms
   \   00005C   7A0A         MOV       R2,#0xa
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    810          	// if (wait_for(">", "ERROR\r\n", 0)) return 1;
    811          	HalUARTWrite(1, (uint8 *)buffer, length);
   \   000063                ; Setup parameters for call to function HalUARTWrite
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   7402         MOV       A,#0x2
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    812          	return wait_for("SEND OK\r\n", "SEND FAIL\r\n", 0);
   \   000071                ; Setup parameters for call to function wait_for
   \   000071   E4           CLR       A
   \   000072   F5..         MOV       ?V0,A
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7C..         MOV       R4,#`?<Constant "SEND FAIL\\r\\n">` & 0xff
   \   00007D   7D..         MOV       R5,#(`?<Constant "SEND FAIL\\r\\n">` >> 8) & 0xff
   \   00007F   7A..         MOV       R2,#`?<Constant "SEND OK\\r\\n">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "SEND OK\\r\\n">` >> 8) & 0xff
   \   000083   12....       LCALL     ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000086   02....       LJMP      ?Subroutine2 & 0xFFFF
    813          }
    814          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    815          uint16 WiFiRecv(uint8 *buff) {
   \                     WiFiRecv:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    816          	uint16 read_len, l_index;
    817          	uint8 buffer[UartDefaultRxLen];
    818          	while (1) {
    819          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??WiFiRecv_0:
   \   00000E                ; Setup parameters for call to function _UARTRead
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ?Subroutine13 & 0xFFFF
    820          		_delay_ms(1);
    821          		// at least 11 chars "+IPD,0,X:\r\n"
    822          		if (read_len > 10 
    823          			&& buffer[read_len - 2] == '\r' 
    824          			&& buffer[read_len - 1] == '\n'
    825          		) {
   \                     ??CrossCallReturnLabel_10:
   \   00001A   940B         SUBB      A,#0xb
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   9400         SUBB      A,#0x0
   \   000020   40EC         JC        ??WiFiRecv_0
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP100_8
   \   00002D   89..         MOV       ?V1,R1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   28           ADD       A,R0
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   35..         ADDC      A,?V1
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   24FE         ADD       A,#-0x2
   \   00003A   F582         MOV       DPL,A
   \   00003C   E9           MOV       A,R1
   \   00003D   34FF         ADDC      A,#-0x1
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   640D         XRL       A,#0xd
   \   000044   70C8         JNZ       ??WiFiRecv_0
   \   000046   E8           MOV       A,R0
   \   000047   24FF         ADD       A,#-0x1
   \   000049   F582         MOV       DPL,A
   \   00004B   E9           MOV       A,R1
   \   00004C   34FF         ADDC      A,#-0x1
   \   00004E   F583         MOV       DPH,A
   \   000050   E0           MOVX      A,@DPTR
   \   000051   640A         XRL       A,#0xa
   \   000053   70B9         JNZ       ??WiFiRecv_0
    826          			l_index = 0;
   \   000055   7E00         MOV       R6,#0x0
   \   000057   7F00         MOV       R7,#0x0
   \   000059   8019         SJMP      ??WiFiRecv_1
    827          			while (l_index < read_len && buffer[l_index] != ':') {
   \                     ??WiFiRecv_2:
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E582         MOV       A,DPL
   \   000062   2E           ADD       A,R6
   \   000063   F582         MOV       DPL,A
   \   000065   E583         MOV       A,DPH
   \   000067   3F           ADDC      A,R7
   \   000068   F583         MOV       DPH,A
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   643A         XRL       A,#0x3a
   \   00006D   6029         JZ        ??WiFiRecv_3
    828          				l_index ++;
   \   00006F   0E           INC       R6
   \   000070   EE           MOV       A,R6
   \   000071   7001         JNZ       ??WiFiRecv_1
   \   000073   0F           INC       R7
    829          			}
   \                     ??WiFiRecv_1:
   \   000074   85..82       MOV       DPL,?XSP + 0
   \   000077   85..83       MOV       DPH,?XSP + 1
   \   00007A   E0           MOVX      A,@DPTR
   \   00007B   F8           MOV       R0,A
   \   00007C   A3           INC       DPTR
   \   00007D   E0           MOVX      A,@DPTR
   \   00007E   F9           MOV       R1,A
   \   00007F   C3           CLR       C
   \   000080   EE           MOV       A,R6
   \   000081   98           SUBB      A,R0
   \   000082   EF           MOV       A,R7
   \   000083   99           SUBB      A,R1
   \   000084   40D5         JC        ??WiFiRecv_2
    830          			if (l_index == read_len) continue;
   \   000086   85..82       MOV       DPL,?XSP + 0
   \   000089   85..83       MOV       DPH,?XSP + 1
   \   00008C   E0           MOVX      A,@DPTR
   \   00008D   6E           XRL       A,R6
   \   00008E   7003         JNZ       ??WiFiRecv_4
   \   000090   A3           INC       DPTR
   \   000091   E0           MOVX      A,@DPTR
   \   000092   6F           XRL       A,R7
   \                     ??WiFiRecv_4:
   \   000093   7003         JNZ       $+5
   \   000095   02....       LJMP      ??WiFiRecv_0 & 0xFFFF
    831          			l_index ++;
   \                     ??WiFiRecv_3:
   \   000098   0E           INC       R6
   \   000099   EE           MOV       A,R6
   \   00009A   7001         JNZ       ??WiFiRecv_5
   \   00009C   0F           INC       R7
    832          			osal_memcpy(buff, buffer + l_index, read_len - l_index);
   \                     ??WiFiRecv_5:
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   7402         MOV       A,#0x2
   \   00009F   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A2   E582         MOV       A,DPL
   \   0000A4   2E           ADD       A,R6
   \   0000A5   F5..         MOV       ?V0,A
   \   0000A7   E583         MOV       A,DPH
   \   0000A9   3F           ADDC      A,R7
   \   0000AA   F5..         MOV       ?V1,A
   \   0000AC   75..00       MOV       ?V2,#0x0
   \   0000AF   78..         MOV       R0,#?V0
   \   0000B1   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000B4   7403         MOV       A,#0x3
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   E0           MOVX      A,@DPTR
   \   0000BA   C3           CLR       C
   \   0000BB   9E           SUBB      A,R6
   \   0000BC   FC           MOV       R4,A
   \   0000BD   A3           INC       DPTR
   \   0000BE   E0           MOVX      A,@DPTR
   \   0000BF   9F           SUBB      A,R7
   \   0000C0   FD           MOV       R5,A
   \   0000C1   AA..         MOV       R2,?V4
   \   0000C3   AB..         MOV       R3,?V5
   \   0000C5   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C8   7403         MOV       A,#0x3
   \   0000CA   12....       LCALL     ?DEALLOC_XSTACK8
    833          			return (read_len - l_index);
   \   0000CD   85..82       MOV       DPL,?XSP + 0
   \   0000D0   85..83       MOV       DPH,?XSP + 1
   \   0000D3   E0           MOVX      A,@DPTR
   \   0000D4   C3           CLR       C
   \   0000D5   9E           SUBB      A,R6
   \   0000D6   FA           MOV       R2,A
   \   0000D7   A3           INC       DPTR
   \   0000D8   E0           MOVX      A,@DPTR
   \   0000D9   9F           SUBB      A,R7
   \   0000DA   FB           MOV       R3,A
   \   0000DB   7442         MOV       A,#0x42
   \   0000DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000E0   7F06         MOV       R7,#0x6
   \   0000E2   02....       LJMP      ?BANKED_LEAVE_XDATA
    834          		}
    835          	}
    836          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendGroupMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendGroupMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_zigbeeSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _zigbeeSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiRecv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiRecv

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter AP Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter AP Mode\015\012"
   \            72204150
   \            204D6F64
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter STA Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter STA Mode\015\012"
   \            72205354
   \            41204D6F
   \            64650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RST\\r\\n">`:
   \   000000   41542B52     DB "AT+RST\015\012"
   \            53540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready\\r\\n">`:
   \   000000   72656164     DB "ready\015\012"
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=2\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=2\015\012"
   \            574D4F44
   \            453D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
   \   000000   41542B43     DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"
   \            57534150
   \            3D224553
   \            50383236
   \            36222C22
   \            31323334
   \            3536222C
   \            31312C30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=0\015\012"
   \            49504D4F
   \            44453D30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8266\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3236360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT\015\012"
   \            4E4E4543
   \            540D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT FAIL\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT FAIL\015\012"
   \            4E4E4543
   \            54204641
   \            494C0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CTS\\r\\n">`:
   \   000000   4354530D     DB "CTS\015\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IP">`:
   \   000000   495000       DB "IP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT IP\\r\\n">`:
   \   000000   474F5420     DB "GOT IP\015\012"
   \            49500D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PORT">`:
   \   000000   504F5254     DB "PORT"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PORT\\r\\n">`:
   \   000000   474F5420     DB "GOT PORT\015\012"
   \            504F5254
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SSID">`:
   \   000000   53534944     DB "SSID"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT SSID\\r\\n">`:
   \   000000   474F5420     DB "GOT SSID\015\012"
   \            53534944
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PSWD">`:
   \   000000   50535744     DB "PSWD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PSWD\\r\\n">`:
   \   000000   474F5420     DB "GOT PSWD\015\012"
   \            50535744
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OVER\\r\\n">`:
   \   000000   4F564552     DB "OVER\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read Flash Failed\\r\\n">`:
   \   000000   52656164     DB "Read Flash Failed\015\012"
   \            20466C61
   \            73682046
   \            61696C65
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"%s\",%s\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2225
   \            73222C25
   \            730D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidify\\r\\n">`:
   \   000000   68756D69     DB "humidify\015\012"
   \            64696679
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidify\\r\\n\\000">`:
   \   000000   68756D69     DB 68H, 75H, 6DH, 69H, 64H, 69H, 66H, 79H
   \            64696679
   \   000008   0D0A0000     DB 0DH, 0AH, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temp is:">`:
   \   000000   54656D70     DB "Temp is:"
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Humidity is:">`:
   \   000000   48756D69     DB "Humidity is:"
   \            64697479
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data:\\n">`:
   \   000000   49206765     DB "I get data:\012"
   \            74206461
   \            74613A0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I am Coordinator\\r\\n\\000">`:
   \   000000   4920616D     DB 49H, 20H, 61H, 6DH, 20H, 43H, 6FH, 6FH
   \            20436F6F
   \   000008   7264696E     DB 72H, 64H, 69H, 6EH, 61H, 74H, 6FH, 72H
   \            61746F72
   \   000010   0D0A0000     DB 0DH, 0AH, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,%d\015\012"
   \            49505345
   \            4E443D30
   \            2C25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND OK\\r\\n">`:
   \   000000   53454E44     DB "SEND OK\015\012"
   \            204F4B0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND FAIL\\r\\n">`:
   \   000000   53454E44     DB "SEND FAIL\015\012"
   \            20464149
   \            4C0D0A00

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    185   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_set_event
      0    185   SampleApp_MessageMSGCB
        0     10   -> HalUARTWrite
      0    179   SampleApp_ProcessEvent
        0    175   -> HalUARTOpen
        0    175   -> HalUARTWrite
        0    175   -> SampleApp_HandleKeys
        0    175   -> SampleApp_MessageMSGCB
        0    175   -> WiFiRecv
        0    175   -> WiFiSend
        0    175   -> _UARTRead
        0    175   -> _UARTSend
        0    179   -> _UARTSend
        0    175   -> _delay_ms
        0    175   -> _zigbeeSend
        0    175   -> exit_send
        0    178   -> osal_memcmp
        0    175   -> osal_msg_deallocate
        0    175   -> osal_msg_receive
        0    177   -> osal_nv_item_init
        0    179   -> osal_nv_read
        0    179   -> osal_nv_write
        0    175   -> osal_set_event
        0    175   -> osal_start_timerEx
        0    177   -> wait_for
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     39   SampleApp_SendGroupMessage
        0     39   -> AF_DataRequest
      0     29   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0    258   WiFiRecv
        0     80   -> _UARTRead
        0     80   -> _delay_ms
        0     83   -> osal_memcpy
      1    255   WiFiSend
        0     78   -> HalUARTWrite
        0     80   -> _UARTSend
        0     78   -> _delay_ms
        0     80   -> vsprintf
        0     80   -> wait_for
      0    184   _UARTRead
        0      9   -> HalUARTRead
      1    257   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0    184   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      1    262   _zigbeeSend
        0     87   -> AF_DataRequest
        0     80   -> vsprintf
      0    184   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    259   wait_for
        0     82   -> _UARTRead
        0     82   -> _UARTSend
        0     82   -> _delay_ms
        0     82   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "+++">
      17  ?<Constant "0,CONNECT FAIL\r\n">
      12  ?<Constant "0,CONNECT\r\n">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=0\r\n">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      18  ?<Constant "AT+CIPSEND=0,%d\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8266\r\n">
      28  ?<Constant "AT+CIPSTART=\"TCP\",\"%s...">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      14  ?<Constant "AT+CWMODE=1\r\n">
      14  ?<Constant "AT+CWMODE=2\r\n">
      35  ?<Constant "AT+CWSAP=\"ESP8266\",\"1...">
       9  ?<Constant "AT+RST\r\n">
       9  ?<Constant "CLOSED\r\n">
       6  ?<Constant "CTS\r\n">
       8  ?<Constant "ERROR\r\n">
      16  ?<Constant "Enter AP Mode\r\n">
      17  ?<Constant "Enter STA Mode\r\n">
       7  ?<Constant "FAIL\r\n">
       9  ?<Constant "GOT IP\r\n">
      11  ?<Constant "GOT PORT\r\n">
      11  ?<Constant "GOT PSWD\r\n">
      11  ?<Constant "GOT SSID\r\n">
       8  ?<Constant "Group 1">
      13  ?<Constant "Humidity is:">
      20  ?<Constant "I am Coordinator\r\n\000">
      13  ?<Constant "I get data:\n">
      12  ?<Constant "I get data\n">
       3  ?<Constant "IP">
       5  ?<Constant "OK\r\n">
       7  ?<Constant "OVER\r\n">
       5  ?<Constant "PORT">
       5  ?<Constant "PSWD">
      20  ?<Constant "Read Flash Failed\r\n">
      12  ?<Constant "SEND FAIL\r\n">
      10  ?<Constant "SEND OK\r\n">
       5  ?<Constant "SSID">
       9  ?<Constant "Temp is:">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      11  ?<Constant "humidify\r\n">
      12  ?<Constant "humidify\r\n\000">
       8  ?<Constant "ready\r\n">
      11  ?<Constant "received\r\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       6  ??Subroutine24_0
       6  ??Subroutine25_0
      26  ??Subroutine26_0
      11  ??Subroutine27_0
       5  ??Subroutine28_0
       6  ??Subroutine29_0
       5  ??Subroutine30_0
      13  ??Subroutine31_0
       4  ??Subroutine32_0
       6  ??Subroutine33_0
       8  ?Subroutine0
       3  ?Subroutine1
       6  ?Subroutine10
       4  ?Subroutine11
       4  ?Subroutine12
      21  ?Subroutine13
      15  ?Subroutine14
      11  ?Subroutine15
      12  ?Subroutine16
       6  ?Subroutine17
       2  ?Subroutine18
      13  ?Subroutine19
      13  ?Subroutine2
       8  ?Subroutine20
       5  ?Subroutine21
      10  ?Subroutine22
       9  ?Subroutine23
       5  ?Subroutine3
      22  ?Subroutine4
       2  ?Subroutine5
       2  ?Subroutine6
      13  ?Subroutine7
      11  ?Subroutine8
      16  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      59  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     157  SampleApp_Init
       6  SampleApp_Init::?relay
     225  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
    1766  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     104  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      85  SampleApp_SendGroupMessage
       6  SampleApp_SendGroupMessage::?relay
      95  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     229  WiFiRecv
       6  WiFiRecv::?relay
     137  WiFiSend
       6  WiFiSend::?relay
       1  _A_P0
      83  _UARTRead
       6  _UARTRead::?relay
      72  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
     106  _zigbeeSend
       6  _zigbeeSend::?relay
      21  exit_send
       6  exit_send::?relay
     330  wait_for
       6  wait_for::?relay

 
 3 847 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   627 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    96 bytes of CODE     memory
   627 bytes of CONST    memory
     0 bytes of DATA     memory (+ 1 byte shared)
 3 847 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
