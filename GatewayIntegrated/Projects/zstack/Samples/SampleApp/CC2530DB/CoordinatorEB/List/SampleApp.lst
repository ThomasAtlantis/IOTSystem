###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               26/Jul/2019  15:41:33
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EWC963.tmp
#        (F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        HAL_UART_DMA=1 -D HAL_UART_ISR=2 -D HAL_LCD=FALSE -lC
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50          	SW1:  Sends a flash command to all devices in Group 1.
     51          	SW2:  Adds/Removes (toggles) this device in and out
     52          		  of Group 1.  This will enable and disable the
     53          		  reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "OSAL_Nv.h"
     61          #include "ZGlobals.h"
     62          #include "AF.h"
     63          #include "aps_groups.h"
     64          #include "ZDApp.h"
     65          
     66          #include "SampleApp.h"
     67          #include "SampleAppHw.h"
     68          
     69          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     70          
     71          /* HAL */
     72          #include "hal_lcd.h"
     73          #include "hal_led.h"
     74          #include "hal_key.h"
     75          #include "hal_uart.h"
     76          #include "MT_UART.h"
     77          
     78          /* SYS */
     79          #include <string.h>
     80          #include <stdio.h>
     81          #include <stdarg.h>
     82          
     83          #define UartDefaultRxLen 64
     84          #define UartDefaultTxLen 64
     85          #define Key_S1 P0_0
     86          #define Key_S2 P0_1
     87          #define Key_Active 0
     88          #define LED_RED P1_0
     89          #define LED_YELLOW P1_1
     90          #define LED_ORANGE P1_4
     91          
     92          // ¿ÉÐÐ·¶Î§£º0x0401 ¡ª 0x0FFF
     93          #define ZD_NV_IP_ID 0x0440
     94          #define ZD_NV_PORT_ID 0x0430
     95          #define ZD_NV_SSID_ID 0x0420
     96          #define ZD_NV_PSWD_ID 0x0410
     97          
     98          // ³¤¶È¶¨Òå£¬ÐèÎª4µÄÕûÊý±¶
     99          // Êµ¼Ê³¤¶È <= LENGTH - 1
    100          #define SSID_MAX_LENGTH 20
    101          #define PSWD_MAX_LENGTH 20
    102          #define PORT_MAX_LENGTH 8
    103          #define IP_MAX_LENGTH   16
    104          
    105          #define isPressed(x) (x == Key_Active)
    106          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
    107          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
    108          #define debug_and_print(x,...) do{\
    109          	_UARTSend(0,x,##__VA_ARGS__);\
    110          	_UARTSend(1,x,##__VA_ARGS__);\
    111          }while(0)
    112          
    113          void _UARTSend(uint8 port, uint8 *fmt, ...);
    114          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
    115          void _delay_us(uint16 n);
    116          void _delay_ms(uint16 n);
    117          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
    118          void exit_send(void);
    119          uint16 WiFiRecv(uint8 *buff);
    120          uint8 WiFiSend(uint8 *fmt, ...);
    121          void _zigbeeSend(uint8 *fmt, ...);
    122          
    123          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    124          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    125          {
    126            SAMPLEAPP_PERIODIC_CLUSTERID,
    127            SAMPLEAPP_FLASH_CLUSTERID,
    128          };
    129          

   \                                 In  segment XDATA_ROM_C, align 1
    130          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    131          {
    132            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    133            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    134            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    135            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    136            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    137            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    138            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    139            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    140            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    141          };
    142          
    143          // This is the Endpoint/Interface description.  It is defined here, but
    144          // filled-in in SampleApp_Init().  Another way to go would be to fill
    145          // in the structure here and make it a "const" (in code space).  The
    146          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * EXTERNAL VARIABLES
    151           */
    152          
    153          /*********************************************************************
    154           * EXTERNAL FUNCTIONS
    155           */
    156          
    157          /*********************************************************************
    158           * LOCAL VARIABLES
    159           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    161          						  // This variable will be received when
    162          						  // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          afAddrType_t SampleApp_Flash_DstAddr; //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          aps_Group_t SampleApp_Group; //×é
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    174          
    175          /*********************************************************************
    176           * LOCAL FUNCTIONS
    177           */
    178          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    179          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    180          void SampleApp_SendPeriodicMessage( void );
    181          void SampleApp_SendFlashMessage( uint16 flashTime );
    182          void SampleApp_SendGroupMessage(void); //Íø·ä×é²¥Í¨Ñ¶·¢ËÍº¯Êý¶¨Òå.
    183          
    184          /*********************************************************************
    185           * NETWORK LAYER CALLBACKS
    186           */
    187          
    188          /*********************************************************************
    189           * PUBLIC FUNCTIONS
    190           */
    191          
    192          /*********************************************************************
    193           * @fn      SampleApp_Init
    194           *
    195           * @brief   Initialization function for the Generic App Task.
    196           *          This is called during initialization and should contain
    197           *          any application specific initialization (ie. hardware
    198           *          initialization/setup, table initialization, power up
    199           *          notificaiton ... ).
    200           *
    201           * @param   task_id - the ID assigned by OSAL.  This ID should be
    202           *                    used to send messages and set timers.
    203           *
    204           * @return  none
    205           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    206          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    207          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    208            SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    209            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    210            SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    211            
    212            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    213            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    214            
    215            // Device hardware initialization can be added here or in main() (Zmain.c).
    216            // If the hardware is application specific - add it here.
    217            // If the hardware is other parts of the device add it in main().
    218          
    219           #if defined ( BUILD_ALL_DEVICES )
    220            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    221            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    222            // together - if they are - we will start up a coordinator. Otherwise,
    223            // the device will start as a router.
    224            if ( readCoordinatorJumper() )
    225          	zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    226            else
    227          	zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    228          #endif // BUILD_ALL_DEVICES
    229          
    230          #if defined ( HOLD_AUTO_START )
    231            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    232            //  from starting the device and wait for the application to
    233            //  start the device.
    234            ZDOInitDevice(0);
    235          #endif
    236          
    237            // Setup for the periodic message's destination address
    238            // Broadcast to everyone
    239            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    240            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    241            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    242          
    243            // Setup for the flash command's destination address - Group 1
    244            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    245            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    246            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine6 & 0xFFFF
    247            
    248          
    249            // Fill out the endpoint description.
    250            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_70:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    251            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    252            SampleApp_epDesc.simpleDesc
    253          			= (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    254            SampleApp_epDesc.latencyReq = noLatencyReqs;
    255          
    256            // Register the endpoint description with the AF
    257            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_66:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    258          
    259            // Register for all key events - This app will handle all key events
    260            RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    261          
    262            // By default, all devices start out in Group 1
    263            SampleApp_Group.ID = SAMPLEAPP_FLASH_GROUP;//0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine6 & 0xFFFF
    264            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_71:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV       A,#0x3
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    265            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00008A                ; Setup parameters for call to function aps_AddGroup
   \   00008A   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008C   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008E   7914         MOV       R1,#0x14
   \   000090   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    266            
    267          
    268          #if defined ( LCD_SUPPORTED )
    269            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    270          #endif
    271          }
   \   000093   7F03         MOV       R7,#0x3
   \   000095   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7403         MOV       A,#0x3
   \   000002                REQUIRE ??Subroutine29_0
   \   000002                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    272          
    273          /*********************************************************************
    274           * @fn      SampleApp_ProcessEvent
    275           *
    276           * @brief   Generic Application Task event processor.  This function
    277           *          is called to process all events for the task.  Events
    278           *          include timers, messages and any other user defined events.
    279           *
    280           * @param   task_id  - The OSAL assigned task ID.
    281           * @param   events - events to process.  This is a bit map and can
    282           *                   contain more than one event.
    283           *
    284           * @return  none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events ) {
   \                     SampleApp_ProcessEvent:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 159
   \   000005   7461         MOV       A,#0x61
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    287          	afIncomingMSGPacket_t *MSGpkt;
    288          	halUARTCfg_t uartConfig;
    289          	uint8 _buffer[UartDefaultRxLen];
    290          	uint8 InitNVStatus, readNVStatus, writeNVStatus;
    291          	uint8 SSID[SSID_MAX_LENGTH], PSWD[PSWD_MAX_LENGTH];
    292          	uint8 PORT[PORT_MAX_LENGTH], MYIP[IP_MAX_LENGTH];
    293          	uint16 length, nv_id, nv_len, prefix_len;
    294            (void)task_id;  // Intentionally unreferenced parameter
    295          
    296            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   606E         JZ        ??SampleApp_ProcessEvent_0
    297            {
    298          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   8020         SJMP      ??SampleApp_ProcessEvent_1
    299          	while ( MSGpkt )
    300          	{
    301          	  switch ( MSGpkt->hdr.event )
    302          	  {
    303          		// Received when a key is pressed
    304          		case KEY_CHANGE:
    305          		  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    306          		  break;
    307          
    308          		// Received when a messages is received (OTA) for this endpoint
    309          		case AF_INCOMING_MSG_CMD:
    310          		  SampleApp_MessageMSGCB( MSGpkt );
    311          		  break;
    312          
    313          		// Received whenever the device changes state in the network
    314          		case ZDO_STATE_CHANGE:
    315          		  SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    316          		  if ( (SampleApp_NwkState == DEV_ZB_COORD)||
    317          			   (SampleApp_NwkState == DEV_ROUTER)
    318          			  || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7005         JNZ       ??CrossCallReturnLabel_63
    319          		  {
    320          			// Start sending the periodic message in a regular interval.
    321          			// osal_start_timerEx(SampleApp_TaskID,
    322          			// 				  SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    323          			// 				  SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT);
    324          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_set_event
   \   000028   7A02         MOV       R2,#0x2
   \   00002A   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    325          		  }
    326          		  else
    327          		  {
    328          			// Device is no longer in the network
    329          		  }
    330          		  break;
    331          
    332          		default:
    333          		  break;
    334          	  }
    335          
    336          	  // Release the memory
    337          	  osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??CrossCallReturnLabel_63:
   \   00002D                ; Setup parameters for call to function osal_msg_deallocate
   \   00002D   AA..         MOV       R2,?V0
   \   00002F   AB..         MOV       R3,?V1
   \   000031   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    338          
    339          	  // Next - if one is available
    340          	  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000034                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000034   90....       MOV       DPTR,#SampleApp_TaskID
   \   000037   E0           MOVX      A,@DPTR
   \   000038   F9           MOV       R1,A
   \   000039   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003C   8A..         MOV       ?V0,R2
   \   00003E   8B..         MOV       ?V1,R3
   \   000040   E5..         MOV       A,?V0
   \   000042   45..         ORL       A,?V1
   \   000044   6032         JZ        ??SampleApp_ProcessEvent_4
   \   000046   85..82       MOV       DPL,?V0
   \   000049   85..83       MOV       DPH,?V1
   \   00004C   E0           MOVX      A,@DPTR
   \   00004D   24E6         ADD       A,#-0x1a
   \   00004F   601E         JZ        ??SampleApp_ProcessEvent_5
   \   000051   245A         ADD       A,#0x5a
   \   000053   6006         JZ        ??SampleApp_ProcessEvent_6
   \   000055   24EF         ADD       A,#-0x11
   \   000057   60BB         JZ        ??SampleApp_ProcessEvent_2
   \   000059   80D2         SJMP      ??CrossCallReturnLabel_63
   \                     ??SampleApp_ProcessEvent_6:
   \   00005B                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005B   A3           INC       DPTR
   \   00005C   A3           INC       DPTR
   \   00005D   A3           INC       DPTR
   \   00005E   E0           MOVX      A,@DPTR
   \   00005F   FA           MOV       R2,A
   \   000060   85..82       MOV       DPL,?V0
   \   000063   85..83       MOV       DPH,?V1
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   E0           MOVX      A,@DPTR
   \   000069   F9           MOV       R1,A
   \   00006A   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   00006D   80BE         SJMP      ??CrossCallReturnLabel_63
   \                     ??SampleApp_ProcessEvent_5:
   \   00006F                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00006F   AA..         MOV       R2,?V0
   \   000071   AB..         MOV       R3,?V1
   \   000073   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000076   80B5         SJMP      ??CrossCallReturnLabel_63
    341          	}
    342          
    343          	// return unprocessed events
    344          	return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   000078   EE           MOV       A,R6
   \   000079   FA           MOV       R2,A
   \   00007A   EF           MOV       A,R7
   \   00007B   6480         XRL       A,#0x80
   \   00007D   02....       LJMP      ??SampleApp_ProcessEvent_7 & 0xFFFF
    345            }
    346          
    347            if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_0:
   \   000080   EA           MOV       A,R2
   \   000081   5402         ANL       A,#0x2
   \   000083   7003         JNZ       $+5
   \   000085   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    348          
    349          		// initialize uart_1
    350          		uartConfig.configured           = TRUE;
   \   000088   740A         MOV       A,#0xa
   \   00008A   12....       LCALL     ?XSTACK_DISP0_8
   \   00008D   7401         MOV       A,#0x1
   \   00008F   F0           MOVX      @DPTR,A
    351          		uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000090   740B         MOV       A,#0xb
   \   000092   12....       LCALL     ?XSTACK_DISP0_8
   \   000095   7404         MOV       A,#0x4
   \   000097   F0           MOVX      @DPTR,A
    352          		uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   000098   740C         MOV       A,#0xc
   \   00009A   12....       LCALL     ?XSTACK_DISP0_8
   \   00009D   E4           CLR       A
   \   00009E   F0           MOVX      @DPTR,A
    353          		uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   00009F   740D         MOV       A,#0xd
   \   0000A1   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A4   7440         MOV       A,#0x40
   \   0000A6   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    354          		uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_67:
   \   0000A9   7414         MOV       A,#0x14
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   7480         MOV       A,#-0x80
   \   0000B0   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    355          		uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_68:
   \   0000B3   741C         MOV       A,#0x1c
   \   0000B5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B8   7480         MOV       A,#-0x80
   \   0000BA   12....       LCALL     ??Subroutine29_0 & 0xFFFF
    356          		uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_69:
   \   0000BD   740F         MOV       A,#0xf
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   7406         MOV       A,#0x6
   \   0000C4   F0           MOVX      @DPTR,A
    357          		uartConfig.intEnable            = TRUE;
   \   0000C5   7420         MOV       A,#0x20
   \   0000C7   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CA   7401         MOV       A,#0x1
   \   0000CC   F0           MOVX      @DPTR,A
    358          		uartConfig.callBackFunc         = NULL;
   \   0000CD   7425         MOV       A,#0x25
   \   0000CF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D2   E4           CLR       A
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   F0           MOVX      @DPTR,A
    359          		HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000D6                ; Setup parameters for call to function HalUARTOpen
   \   0000D6   740A         MOV       A,#0xa
   \   0000D8   12....       LCALL     ?XSTACK_DISP101_8
   \   0000DB   7901         MOV       R1,#0x1
   \   0000DD   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    360          		debug("UART_1 INITIALIZED!\r\n");
   \   0000E0                ; Setup parameters for call to function _UARTSend
   \   0000E0   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000E2   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000E4   7900         MOV       R1,#0x0
   \   0000E6   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    361          
    362          		if (isPressed(Key_S1)) {
   \   0000E9   A280         MOV       C,0x80.0
   \   0000EB   400D         JC        ??SampleApp_ProcessEvent_9
    363          			debug("Enter AP Mode\r\n");
   \   0000ED                ; Setup parameters for call to function _UARTSend
   \   0000ED   7A..         MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
   \   0000EF   7B..         MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
   \   0000F1   7900         MOV       R1,#0x0
   \   0000F3   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    364          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \   0000F6                ; Setup parameters for call to function osal_set_event
   \   0000F6   7A10         MOV       R2,#0x10
   \   0000F8   800B         SJMP      ??SampleApp_ProcessEvent_10
    365          		} else {
    366          			debug("Enter STA Mode\r\n");
   \                     ??SampleApp_ProcessEvent_9:
   \   0000FA                ; Setup parameters for call to function _UARTSend
   \   0000FA   7A..         MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
   \   0000FC   7B..         MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
   \   0000FE   7900         MOV       R1,#0x0
   \   000100   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    367          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000103                ; Setup parameters for call to function osal_set_event
   \   000103   7A04         MOV       R2,#0x4
    368          		}
   \                     ??SampleApp_ProcessEvent_10:
   \   000105   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    369          		return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_64:
   \   000108   EE           MOV       A,R6
   \   000109   6402         XRL       A,#0x2
   \   00010B   02....       LJMP      ??SampleApp_ProcessEvent_11 & 0xFFFF
    370          	}
    371          
    372          	if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_8:
   \   00010E   EA           MOV       A,R2
   \   00010F   5410         ANL       A,#0x10
   \   000111   7003         JNZ       $+5
   \   000113   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    373          		exit_send();
   \   000116                ; Setup parameters for call to function exit_send
   \   000116   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    374          		_UARTRead(HAL_UART_PORT_1, _buffer, &length);
   \   000119                ; Setup parameters for call to function _UARTRead
   \   000119   AC..         MOV       R4,?XSP + 0
   \   00011B   AD..         MOV       R5,?XSP + 1
   \   00011D   745F         MOV       A,#0x5f
   \   00011F   12....       LCALL     ?XSTACK_DISP101_8
   \   000122   7901         MOV       R1,#0x1
   \   000124   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
    375          		do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_13:
   \   000127   12....       LCALL     ?Subroutine12 & 0xFFFF
    376          		while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_50:
   \   00012A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00012D   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00012F   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000131   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   000133   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   000135   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000138   12....       LCALL     ?DEALLOC_XSTACK8
   \   00013B   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_13
    377          		do debug_and_print("AT+CWMODE=2\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   00013E   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
   \   000141   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
   \   000144                ; Setup parameters for call to function _UARTSend
   \   000144   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    378          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_52:
   \   000147   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00014A   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   00014D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000150   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    379          		do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n"); // TODO: ADD MACRO
   \                     ??SampleApp_ProcessEvent_15:
   \   000153   75....       MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
   \   000156   75....       MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
   \   000159                ; Setup parameters for call to function _UARTSend
   \   000159   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    380          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_53:
   \   00015C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00015F   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000162   12....       LCALL     ?DEALLOC_XSTACK8
   \   000165   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    381          		do debug_and_print("AT+CIPMODE=0\r\n");
   \                     ??SampleApp_ProcessEvent_16:
   \   000168   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
   \   00016B   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
   \   00016E                ; Setup parameters for call to function _UARTSend
   \   00016E   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    382          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_54:
   \   000171   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000174   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000177   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    383          		do debug_and_print("AT+CIPMUX=1\r\n");
   \                     ??SampleApp_ProcessEvent_17:
   \   00017D   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   000180   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   000183                ; Setup parameters for call to function _UARTSend
   \   000183   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    384          		while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
   \                     ??CrossCallReturnLabel_55:
   \   000186   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000189   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00018C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00018F   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
    385          		do debug_and_print("AT+CIPSERVER=1,8266\r\n");
   \                     ??SampleApp_ProcessEvent_18:
   \   000192   75....       MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
   \   000195   75....       MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
   \   000198                ; Setup parameters for call to function _UARTSend
   \   000198   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    386          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_56:
   \   00019B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019E   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0001A1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001A4   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_18
    387          		do {
    388          			while (wait_for("0,CONNECT\r\n", "0,CONNECT FAIL\r\n", 0));
   \                     ??SampleApp_ProcessEvent_19:
   \   0001A7                ; Setup parameters for call to function wait_for
   \   0001A7   78..         MOV       R0,#?V0
   \   0001A9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AC   7C..         MOV       R4,#`?<Constant "0,CONNECT FAIL\\r\\n">` & 0xff
   \   0001AE   7D..         MOV       R5,#(`?<Constant "0,CONNECT FAIL\\r\\n">` >> 8) & 0xff
   \   0001B0   7A..         MOV       R2,#`?<Constant "0,CONNECT\\r\\n">` & 0xff
   \   0001B2   7B..         MOV       R3,#(`?<Constant "0,CONNECT\\r\\n">` >> 8) & 0xff
   \   0001B4   12....       LCALL     ??Subroutine35_0 & 0xFFFF
    389          		} while (WiFiSend("CTS\r\n")); // ¸æËßAPPÁ¬½ÓÒÑ½¨Á¢£¬¶þ´ÎÎÕÊÖ
   \                     ??CrossCallReturnLabel_94:
   \   0001B7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001BA   B900EA       CJNE      R1,#0x0,??SampleApp_ProcessEvent_19
   \   0001BD                ; Setup parameters for call to function WiFiSend
   \   0001BD   7A..         MOV       R2,#`?<Constant "CTS\\r\\n">` & 0xff
   \   0001BF   7B..         MOV       R3,#(`?<Constant "CTS\\r\\n">` >> 8) & 0xff
   \   0001C1   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
   \   0001C4   E9           MOV       A,R1
   \   0001C5   70E0         JNZ       ??SampleApp_ProcessEvent_19
    390          		while (1) {
    391          			length = WiFiRecv(_buffer);
   \                     ??SampleApp_ProcessEvent_20:
   \   0001C7                ; Setup parameters for call to function WiFiRecv
   \   0001C7   745F         MOV       A,#0x5f
   \   0001C9   12....       LCALL     ?XSTACK_DISP101_8
   \   0001CC   12....       LCALL     ?Subroutine5 & 0xFFFF
    392          			if (length > 6) { // min: SSIDx\r\n ÔÊÐí19Î»³¤¶È
   \                     ??CrossCallReturnLabel_3:
   \   0001CF   C3           CLR       C
   \   0001D0   E0           MOVX      A,@DPTR
   \   0001D1   9407         SUBB      A,#0x7
   \   0001D3   A3           INC       DPTR
   \   0001D4   E0           MOVX      A,@DPTR
   \   0001D5   9400         SUBB      A,#0x0
   \   0001D7   5003         JNC       $+5
   \   0001D9   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    393          				if (osal_memcmp(_buffer, "IP", 2)) {
   \   0001DC                ; Setup parameters for call to function osal_memcmp
   \   0001DC   75....       MOV       ?V0,#`?<Constant "IP">` & 0xff
   \   0001DF   75....       MOV       ?V1,#(`?<Constant "IP">` >> 8) & 0xff
   \   0001E2   75..00       MOV       ?V2,#0x0
   \   0001E5   78..         MOV       R0,#?V0
   \   0001E7   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0001EA   7C02         MOV       R4,#0x2
   \   0001EC   7D00         MOV       R5,#0x0
   \   0001EE   7462         MOV       A,#0x62
   \   0001F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0001F3   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001F6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001F9   E9           MOV       A,R1
   \   0001FA   6016         JZ        ??SampleApp_ProcessEvent_22
    394          					nv_id = ZD_NV_IP_ID;
   \   0001FC   75..40       MOV       ?V4,#0x40
   \   0001FF   75..04       MOV       ?V5,#0x4
    395          					nv_len = IP_MAX_LENGTH;
   \   000202   75..10       MOV       ?V0,#0x10
   \   000205   75..00       MOV       ?V1,#0x0
    396          					prefix_len = 2;
   \   000208   75..02       MOV       ?V6,#0x2
    397          					WiFiSend("GOT IP\r\n");
   \   00020B                ; Setup parameters for call to function WiFiSend
   \   00020B   7A..         MOV       R2,#`?<Constant "GOT IP\\r\\n">` & 0xff
   \   00020D   7B..         MOV       R3,#(`?<Constant "GOT IP\\r\\n">` >> 8) & 0xff
   \   00020F   02....       LJMP      ??SampleApp_ProcessEvent_23 & 0xFFFF
    398          				} else 
    399          				if (osal_memcmp(_buffer, "PORT", 4)) {
   \                     ??SampleApp_ProcessEvent_22:
   \   000212                ; Setup parameters for call to function osal_memcmp
   \   000212   75....       MOV       ?V0,#`?<Constant "PORT">` & 0xff
   \   000215   75....       MOV       ?V1,#(`?<Constant "PORT">` >> 8) & 0xff
   \   000218   78..         MOV       R0,#?V0
   \   00021A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00021D   7C04         MOV       R4,#0x4
   \   00021F   7D00         MOV       R5,#0x0
   \   000221   7462         MOV       A,#0x62
   \   000223   12....       LCALL     ?XSTACK_DISP0_8
   \   000226   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000229   12....       LCALL     ?DEALLOC_XSTACK8
   \   00022C   E9           MOV       A,R1
   \   00022D   6015         JZ        ??SampleApp_ProcessEvent_24
    400          					nv_id = ZD_NV_PORT_ID;
   \   00022F   75..30       MOV       ?V4,#0x30
   \   000232   75..04       MOV       ?V5,#0x4
    401          					nv_len = PORT_MAX_LENGTH;
   \   000235   75..08       MOV       ?V0,#0x8
   \   000238   75..00       MOV       ?V1,#0x0
    402          					prefix_len = 4;
   \   00023B   75..04       MOV       ?V6,#0x4
    403          					WiFiSend("GOT PORT\r\n");
   \   00023E                ; Setup parameters for call to function WiFiSend
   \   00023E   7A..         MOV       R2,#`?<Constant "GOT PORT\\r\\n">` & 0xff
   \   000240   7B..         MOV       R3,#(`?<Constant "GOT PORT\\r\\n">` >> 8) & 0xff
   \   000242   8065         SJMP      ??SampleApp_ProcessEvent_23
    404          				} else 
    405          				if (osal_memcmp(_buffer, "SSID", 4)) {
   \                     ??SampleApp_ProcessEvent_24:
   \   000244                ; Setup parameters for call to function osal_memcmp
   \   000244   75....       MOV       ?V0,#`?<Constant "SSID">` & 0xff
   \   000247   75....       MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
   \   00024A   78..         MOV       R0,#?V0
   \   00024C   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00024F   7C04         MOV       R4,#0x4
   \   000251   7D00         MOV       R5,#0x0
   \   000253   7462         MOV       A,#0x62
   \   000255   12....       LCALL     ?XSTACK_DISP0_8
   \   000258   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00025B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00025E   E9           MOV       A,R1
   \   00025F   6015         JZ        ??SampleApp_ProcessEvent_25
    406          					nv_id = ZD_NV_SSID_ID;
   \   000261   75..20       MOV       ?V4,#0x20
   \   000264   75..04       MOV       ?V5,#0x4
    407          					nv_len = SSID_MAX_LENGTH;
   \   000267   75..14       MOV       ?V0,#0x14
   \   00026A   75..00       MOV       ?V1,#0x0
    408          					prefix_len = 4;
   \   00026D   75..04       MOV       ?V6,#0x4
    409          					WiFiSend("GOT SSID\r\n");
   \   000270                ; Setup parameters for call to function WiFiSend
   \   000270   7A..         MOV       R2,#`?<Constant "GOT SSID\\r\\n">` & 0xff
   \   000272   7B..         MOV       R3,#(`?<Constant "GOT SSID\\r\\n">` >> 8) & 0xff
   \   000274   8033         SJMP      ??SampleApp_ProcessEvent_23
    410          				} else 
    411          				if (osal_memcmp(_buffer, "PSWD", 4)) {
   \                     ??SampleApp_ProcessEvent_25:
   \   000276                ; Setup parameters for call to function osal_memcmp
   \   000276   75....       MOV       ?V0,#`?<Constant "PSWD">` & 0xff
   \   000279   75....       MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
   \   00027C   78..         MOV       R0,#?V0
   \   00027E   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000281   7C04         MOV       R4,#0x4
   \   000283   7D00         MOV       R5,#0x0
   \   000285   7462         MOV       A,#0x62
   \   000287   12....       LCALL     ?XSTACK_DISP0_8
   \   00028A   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00028D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000290   E9           MOV       A,R1
   \   000291   7003         JNZ       $+5
   \   000293   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    412          					nv_id = ZD_NV_PSWD_ID;
   \   000296   75..10       MOV       ?V4,#0x10
   \   000299   75..04       MOV       ?V5,#0x4
    413          					nv_len = PSWD_MAX_LENGTH;
   \   00029C   75..14       MOV       ?V0,#0x14
   \   00029F   75..00       MOV       ?V1,#0x0
    414          					prefix_len = 4;
   \   0002A2   75..04       MOV       ?V6,#0x4
    415          					WiFiSend("GOT PSWD\r\n");
   \   0002A5                ; Setup parameters for call to function WiFiSend
   \   0002A5   7A..         MOV       R2,#`?<Constant "GOT PSWD\\r\\n">` & 0xff
   \   0002A7   7B..         MOV       R3,#(`?<Constant "GOT PSWD\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_23:
   \   0002A9   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    416          				} else continue;
    417          				length -= 2; // \r\n
   \   0002AC   85..82       MOV       DPL,?XSP + 0
   \   0002AF   85..83       MOV       DPH,?XSP + 1
   \   0002B2   E0           MOVX      A,@DPTR
   \   0002B3   24FE         ADD       A,#-0x2
   \   0002B5   F0           MOVX      @DPTR,A
   \   0002B6   A3           INC       DPTR
   \   0002B7   E0           MOVX      A,@DPTR
   \   0002B8   34FF         ADDC      A,#-0x1
   \   0002BA   F0           MOVX      @DPTR,A
    418          				while (length < nv_len + prefix_len + 2) _buffer[length ++] = '\0';
   \   0002BB   E5..         MOV       A,?V0
   \   0002BD   25..         ADD       A,?V6
   \   0002BF   F8           MOV       R0,A
   \   0002C0   E4           CLR       A
   \   0002C1   3400         ADDC      A,#0x0
   \   0002C3   F9           MOV       R1,A
   \   0002C4   E8           MOV       A,R0
   \   0002C5   2402         ADD       A,#0x2
   \   0002C7   FA           MOV       R2,A
   \   0002C8   E4           CLR       A
   \   0002C9   39           ADDC      A,R1
   \   0002CA   FB           MOV       R3,A
   \   0002CB   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0002CE   EA           MOV       A,R2
   \   0002CF   98           SUBB      A,R0
   \   0002D0   F8           MOV       R0,A
   \   0002D1   EB           MOV       A,R3
   \   0002D2   99           SUBB      A,R1
   \   0002D3   F9           MOV       R1,A
   \   0002D4   85..82       MOV       DPL,?XSP + 0
   \   0002D7   85..83       MOV       DPH,?XSP + 1
   \   0002DA   C3           CLR       C
   \   0002DB   E0           MOVX      A,@DPTR
   \   0002DC   9A           SUBB      A,R2
   \   0002DD   A3           INC       DPTR
   \   0002DE   E0           MOVX      A,@DPTR
   \   0002DF   9B           SUBB      A,R3
   \   0002E0   5033         JNC       ??SampleApp_ProcessEvent_26
   \   0002E2   85..82       MOV       DPL,?XSP + 0
   \   0002E5   85..83       MOV       DPH,?XSP + 1
   \   0002E8   745F         MOV       A,#0x5f
   \   0002EA   12....       LCALL     ?XSTACK_DISP101_8
   \   0002ED   8B..         MOV       ?V3,R3
   \   0002EF   E0           MOVX      A,@DPTR
   \   0002F0   2A           ADD       A,R2
   \   0002F1   FA           MOV       R2,A
   \   0002F2   A3           INC       DPTR
   \   0002F3   E0           MOVX      A,@DPTR
   \   0002F4   35..         ADDC      A,?V3
   \   0002F6   8A82         MOV       DPL,R2
   \   0002F8   F583         MOV       DPH,A
   \                     ??SampleApp_ProcessEvent_27:
   \   0002FA   E4           CLR       A
   \   0002FB   F0           MOVX      @DPTR,A
   \   0002FC   A3           INC       DPTR
   \   0002FD   E8           MOV       A,R0
   \   0002FE   24FF         ADD       A,#-0x1
   \   000300   18           DEC       R0
   \   000301   E9           MOV       A,R1
   \   000302   34FF         ADDC      A,#-0x1
   \   000304   F9           MOV       R1,A
   \   000305   48           ORL       A,R0
   \   000306   70F2         JNZ       ??SampleApp_ProcessEvent_27
   \   000308   85..82       MOV       DPL,?XSP + 0
   \   00030B   85..83       MOV       DPH,?XSP + 1
   \   00030E   E0           MOVX      A,@DPTR
   \   00030F   28           ADD       A,R0
   \   000310   F0           MOVX      @DPTR,A
   \   000311   A3           INC       DPTR
   \   000312   E0           MOVX      A,@DPTR
   \   000313   39           ADDC      A,R1
   \   000314   F0           MOVX      @DPTR,A
    419          				InitNVStatus = osal_nv_item_init(nv_id, nv_len, NULL);
   \                     ??SampleApp_ProcessEvent_26:
   \   000315                ; Setup parameters for call to function osal_nv_item_init
   \   000315   E4           CLR       A
   \   000316   F5..         MOV       ?V3,A
   \   000318   78..         MOV       R0,#?V2
   \   00031A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00031D   AC..         MOV       R4,?V0
   \   00031F   AD..         MOV       R5,?V1
   \   000321   AA..         MOV       R2,?V4
   \   000323   AB..         MOV       R3,?V5
   \   000325   12....       LCALL     ??Subroutine25_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000328   12....       LCALL     ?DEALLOC_XSTACK8
    420          				writeNVStatus = osal_nv_write(nv_id, 0, nv_len, _buffer + prefix_len);
   \   00032B   745F         MOV       A,#0x5f
   \   00032D   12....       LCALL     ?XSTACK_DISP0_8
   \   000330   E582         MOV       A,DPL
   \   000332   25..         ADD       A,?V6
   \   000334   F5..         MOV       ?V2,A
   \   000336   E4           CLR       A
   \   000337   3583         ADDC      A,DPH
   \   000339   F5..         MOV       ?V3,A
   \   00033B                ; Setup parameters for call to function osal_nv_write
   \   00033B   78..         MOV       R0,#?V2
   \   00033D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000340   78..         MOV       R0,#?V0
   \   000342   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000345   7C00         MOV       R4,#0x0
   \   000347   7D00         MOV       R5,#0x0
   \   000349   AA..         MOV       R2,?V4
   \   00034B   AB..         MOV       R3,?V5
   \   00034D   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000350   7404         MOV       A,#0x4
   \   000352   12....       LCALL     ?DEALLOC_XSTACK8
    421          				HalUARTWrite(1, _buffer + prefix_len, nv_len);
   \   000355                ; Setup parameters for call to function HalUARTWrite
   \   000355   AC..         MOV       R4,?V0
   \   000357   AD..         MOV       R5,?V1
   \   000359   AA..         MOV       R2,?V2
   \   00035B   AB..         MOV       R3,?V3
   \   00035D   7901         MOV       R1,#0x1
   \   00035F   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    422          				(void) writeNVStatus;
   \   000362   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    423          			} else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
   \                     ??SampleApp_ProcessEvent_21:
   \   000365   85..82       MOV       DPL,?XSP + 0
   \   000368   85..83       MOV       DPH,?XSP + 1
   \   00036B   E0           MOVX      A,@DPTR
   \   00036C   6404         XRL       A,#0x4
   \   00036E   7002         JNZ       ??SampleApp_ProcessEvent_28
   \   000370   A3           INC       DPTR
   \   000371   E0           MOVX      A,@DPTR
   \                     ??SampleApp_ProcessEvent_28:
   \   000372   6003         JZ        $+5
   \   000374   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
   \   000377                ; Setup parameters for call to function osal_memcmp
   \   000377   75....       MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
   \   00037A   75....       MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   00037D   75..00       MOV       ?V2,#0x0
   \   000380   78..         MOV       R0,#?V0
   \   000382   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000385   7C04         MOV       R4,#0x4
   \   000387   7D00         MOV       R5,#0x0
   \   000389   7462         MOV       A,#0x62
   \   00038B   12....       LCALL     ?XSTACK_DISP0_8
   \   00038E   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000391   12....       LCALL     ?DEALLOC_XSTACK8
   \   000394   E9           MOV       A,R1
   \   000395   7003         JNZ       $+5
   \   000397   02....       LJMP      ??SampleApp_ProcessEvent_20 & 0xFFFF
    424          				WiFiSend("OVER\r\n");
   \   00039A                ; Setup parameters for call to function WiFiSend
   \   00039A   7A..         MOV       R2,#`?<Constant "OVER\\r\\n">` & 0xff
   \   00039C   7B..         MOV       R3,#(`?<Constant "OVER\\r\\n">` >> 8) & 0xff
   \   00039E   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    425          				_delay_ms(10);
   \   0003A1                ; Setup parameters for call to function _delay_ms
   \   0003A1   7A0A         MOV       R2,#0xa
   \   0003A3   7B00         MOV       R3,#0x0
   \   0003A5   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    426          				do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_29:
   \   0003A8   12....       LCALL     ?Subroutine12 & 0xFFFF
    427          				while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_51:
   \   0003AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003AE   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0003B0   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0003B2   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   0003B4   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   0003B6   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0003B9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003BC   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_29
    428          				break;
    429          			}
    430          		}
    431          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0003BF                ; Setup parameters for call to function osal_set_event
   \   0003BF   12....       LCALL     ?Subroutine7 & 0xFFFF
    432          		return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_61:
   \   0003C2   EE           MOV       A,R6
   \   0003C3   6410         XRL       A,#0x10
   \   0003C5   02....       LJMP      ??SampleApp_ProcessEvent_11 & 0xFFFF
    433          	}
    434          
    435          	if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_12:
   \   0003C8   EA           MOV       A,R2
   \   0003C9   5404         ANL       A,#0x4
   \   0003CB   7003         JNZ       $+5
   \   0003CD   02....       LJMP      ??SampleApp_ProcessEvent_30 & 0xFFFF
    436          		// initialize esp8266
    437          		do {
    438          			exit_send();
   \                     ??SampleApp_ProcessEvent_31:
   \   0003D0                ; Setup parameters for call to function exit_send
   \   0003D0   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    439          			InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, SSID_MAX_LENGTH, NULL);
   \   0003D3                ; Setup parameters for call to function osal_nv_item_init
   \   0003D3   E4           CLR       A
   \   0003D4   F5..         MOV       ?V0,A
   \   0003D6   F5..         MOV       ?V1,A
   \   0003D8   78..         MOV       R0,#?V0
   \   0003DA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003DD   7C14         MOV       R4,#0x14
   \   0003DF   7D00         MOV       R5,#0x0
   \   0003E1   7A20         MOV       R2,#0x20
   \   0003E3   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0003E6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003E9   E9           MOV       A,R1
   \   0003EA   F5..         MOV       ?V0,A
    440          			readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, SSID_MAX_LENGTH, SSID);
    441          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0003EC                ; Setup parameters for call to function osal_nv_read
   \   0003EC   744B         MOV       A,#0x4b
   \   0003EE   12....       LCALL     ?XSTACK_DISP100_8
   \   0003F1   88..         MOV       ?V2,R0
   \   0003F3   89..         MOV       ?V3,R1
   \   0003F5   78..         MOV       R0,#?V2
   \   0003F7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003FA   75..14       MOV       ?V2,#0x14
   \   0003FD   75..00       MOV       ?V3,#0x0
   \   000400   78..         MOV       R0,#?V2
   \   000402   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000405   7C00         MOV       R4,#0x0
   \   000407   7D00         MOV       R5,#0x0
   \   000409   7A20         MOV       R2,#0x20
   \   00040B   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   00040E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000411   E9           MOV       A,R1
   \   000412   6003         JZ        $+5
   \   000414   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
   \   000417   E5..         MOV       A,?V0
   \   000419   6003         JZ        $+5
   \   00041B   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    442          				debug("Read Flash Failed\r\n");
    443          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    444          			}
    445          			debug(SSID);
   \   00041E                ; Setup parameters for call to function _UARTSend
   \   00041E   744B         MOV       A,#0x4b
   \   000420   12....       LCALL     ?XSTACK_DISP101_8
   \   000423   12....       LCALL     ?Subroutine16 & 0xFFFF
    446          			InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, PSWD_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_13:
   \   000426   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000429   7C14         MOV       R4,#0x14
   \   00042B   7D00         MOV       R5,#0x0
   \   00042D   7A10         MOV       R2,#0x10
   \   00042F   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000432   12....       LCALL     ?DEALLOC_XSTACK8
   \   000435   E9           MOV       A,R1
   \   000436   F5..         MOV       ?V0,A
    447          			readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, PSWD_MAX_LENGTH, PSWD);
    448          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000438                ; Setup parameters for call to function osal_nv_read
   \   000438   7437         MOV       A,#0x37
   \   00043A   12....       LCALL     ?XSTACK_DISP100_8
   \   00043D   88..         MOV       ?V2,R0
   \   00043F   89..         MOV       ?V3,R1
   \   000441   78..         MOV       R0,#?V2
   \   000443   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000446   75..14       MOV       ?V2,#0x14
   \   000449   75..00       MOV       ?V3,#0x0
   \   00044C   78..         MOV       R0,#?V2
   \   00044E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000451   7C00         MOV       R4,#0x0
   \   000453   7D00         MOV       R5,#0x0
   \   000455   7A10         MOV       R2,#0x10
   \   000457   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00045A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00045D   E9           MOV       A,R1
   \   00045E   6003         JZ        $+5
   \   000460   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
   \   000463   E5..         MOV       A,?V0
   \   000465   6003         JZ        $+5
   \   000467   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    449          				debug("Read Flash Failed\r\n");
    450          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    451          			}
    452          			debug(PSWD);
   \   00046A                ; Setup parameters for call to function _UARTSend
   \   00046A   7437         MOV       A,#0x37
   \   00046C   12....       LCALL     ?XSTACK_DISP101_8
   \   00046F   12....       LCALL     ?Subroutine16 & 0xFFFF
    453          			InitNVStatus = osal_nv_item_init(ZD_NV_IP_ID, IP_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_14:
   \   000472   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000475   7C10         MOV       R4,#0x10
   \   000477   7D00         MOV       R5,#0x0
   \   000479   7A40         MOV       R2,#0x40
   \   00047B   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   00047E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000481   E9           MOV       A,R1
   \   000482   F5..         MOV       ?V0,A
    454          			readNVStatus = osal_nv_read(ZD_NV_IP_ID, 0, IP_MAX_LENGTH, MYIP);
    455          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000484                ; Setup parameters for call to function osal_nv_read
   \   000484   7427         MOV       A,#0x27
   \   000486   12....       LCALL     ?XSTACK_DISP100_8
   \   000489   88..         MOV       ?V2,R0
   \   00048B   89..         MOV       ?V3,R1
   \   00048D   78..         MOV       R0,#?V2
   \   00048F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000492   75..10       MOV       ?V2,#0x10
   \   000495   75..00       MOV       ?V3,#0x0
   \   000498   78..         MOV       R0,#?V2
   \   00049A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00049D   7C00         MOV       R4,#0x0
   \   00049F   7D00         MOV       R5,#0x0
   \   0004A1   7A40         MOV       R2,#0x40
   \   0004A3   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0004A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004A9   E9           MOV       A,R1
   \   0004AA   704A         JNZ       ??SampleApp_ProcessEvent_32
   \   0004AC   E5..         MOV       A,?V0
   \   0004AE   7046         JNZ       ??SampleApp_ProcessEvent_32
    456          				debug("Read Flash Failed\r\n");
    457          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    458          			}
    459          			debug(MYIP);
   \   0004B0                ; Setup parameters for call to function _UARTSend
   \   0004B0   7427         MOV       A,#0x27
   \   0004B2   12....       LCALL     ?XSTACK_DISP101_8
   \   0004B5   12....       LCALL     ?Subroutine16 & 0xFFFF
    460          			InitNVStatus = osal_nv_item_init(ZD_NV_PORT_ID, PORT_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_15:
   \   0004B8   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004BB   7C08         MOV       R4,#0x8
   \   0004BD   7D00         MOV       R5,#0x0
   \   0004BF   7A30         MOV       R2,#0x30
   \   0004C1   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0004C4   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004C7   E9           MOV       A,R1
   \   0004C8   F5..         MOV       ?V0,A
    461          			readNVStatus = osal_nv_read(ZD_NV_PORT_ID, 0, PORT_MAX_LENGTH, PORT);
    462          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0004CA                ; Setup parameters for call to function osal_nv_read
   \   0004CA   7402         MOV       A,#0x2
   \   0004CC   12....       LCALL     ?XSTACK_DISP100_8
   \   0004CF   88..         MOV       ?V2,R0
   \   0004D1   89..         MOV       ?V3,R1
   \   0004D3   78..         MOV       R0,#?V2
   \   0004D5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004D8   75..08       MOV       ?V2,#0x8
   \   0004DB   75..00       MOV       ?V3,#0x0
   \   0004DE   78..         MOV       R0,#?V2
   \   0004E0   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004E3   7C00         MOV       R4,#0x0
   \   0004E5   7D00         MOV       R5,#0x0
   \   0004E7   7A30         MOV       R2,#0x30
   \   0004E9   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0004EC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004EF   E9           MOV       A,R1
   \   0004F0   7004         JNZ       ??SampleApp_ProcessEvent_32
   \   0004F2   E5..         MOV       A,?V0
   \   0004F4   600C         JZ        ??SampleApp_ProcessEvent_33
    463          				debug("Read Flash Failed\r\n");
   \                     ??SampleApp_ProcessEvent_32:
   \   0004F6                ; Setup parameters for call to function _UARTSend
   \   0004F6   7A..         MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
   \   0004F8   7B..         MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
   \   0004FA   7900         MOV       R1,#0x0
   \   0004FC   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    464          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0004FF   02....       LJMP      ??CrossCallReturnLabel_65 & 0xFFFF
    465          			}
    466          			debug(PORT);
   \                     ??SampleApp_ProcessEvent_33:
   \   000502                ; Setup parameters for call to function _UARTSend
   \   000502   7402         MOV       A,#0x2
   \   000504   12....       LCALL     ?XSTACK_DISP101_8
   \   000507   7900         MOV       R1,#0x0
   \   000509   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    467          
    468          			do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_34:
   \   00050C   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   00050F   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   000512                ; Setup parameters for call to function _UARTSend
   \   000512   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    469          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_57:
   \   000515   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000518   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00051B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00051E   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_34
    470          			do debug_and_print("AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PSWD);
   \                     ??SampleApp_ProcessEvent_35:
   \   000521   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
   \   000524   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
   \   000527                ; Setup parameters for call to function _UARTSend
   \   000527   7437         MOV       A,#0x37
   \   000529   12....       LCALL     ?XSTACK_DISP100_8
   \   00052C   88..         MOV       ?V2,R0
   \   00052E   89..         MOV       ?V3,R1
   \   000530   78..         MOV       R0,#?V2
   \   000532   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000535   744D         MOV       A,#0x4d
   \   000537   12....       LCALL     ?XSTACK_DISP100_8
   \   00053A   88..         MOV       ?V2,R0
   \   00053C   89..         MOV       ?V3,R1
   \   00053E   78..         MOV       R0,#?V2
   \   000540   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000543   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000546   12....       LCALL     ?DEALLOC_XSTACK8
   \   000549                ; Setup parameters for call to function _UARTSend
   \   000549   7437         MOV       A,#0x37
   \   00054B   12....       LCALL     ?XSTACK_DISP100_8
   \   00054E   88..         MOV       ?V2,R0
   \   000550   89..         MOV       ?V3,R1
   \   000552   78..         MOV       R0,#?V2
   \   000554   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000557   744D         MOV       A,#0x4d
   \   000559   12....       LCALL     ?XSTACK_DISP100_8
   \   00055C   88..         MOV       ?V2,R0
   \   00055E   89..         MOV       ?V3,R1
   \   000560   78..         MOV       R0,#?V2
   \   000562   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000565   AA..         MOV       R2,?V0
   \   000567   AB..         MOV       R3,?V1
   \   000569   7901         MOV       R1,#0x1
   \   00056B   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00056E   12....       LCALL     ?DEALLOC_XSTACK8
    471          			while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \   000571                ; Setup parameters for call to function wait_for
   \   000571   E4           CLR       A
   \   000572   F5..         MOV       ?V0,A
   \   000574   F5..         MOV       ?V1,A
   \   000576   78..         MOV       R0,#?V0
   \   000578   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00057B   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   00057D   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   00057F   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000582   12....       LCALL     ?DEALLOC_XSTACK8
   \   000585   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_35
    472          			do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_36:
   \   000588   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   00058B   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   00058E                ; Setup parameters for call to function _UARTSend
   \   00058E   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    473          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_58:
   \   000591   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000594   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000597   12....       LCALL     ?DEALLOC_XSTACK8
   \   00059A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_36
    474          			do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_37:
   \   00059D   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0005A0   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0005A3                ; Setup parameters for call to function _UARTSend
   \   0005A3   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    475          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_59:
   \   0005A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005A9   12....       LCALL     ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   0005AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005AF   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_37
    476          			do debug_and_print("AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", MYIP, PORT);
   \                     ??SampleApp_ProcessEvent_38:
   \   0005B2   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` & 0xff
   \   0005B5   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` >> 8) & 0xff
   \   0005B8                ; Setup parameters for call to function _UARTSend
   \   0005B8   7402         MOV       A,#0x2
   \   0005BA   12....       LCALL     ?XSTACK_DISP100_8
   \   0005BD   88..         MOV       ?V2,R0
   \   0005BF   89..         MOV       ?V3,R1
   \   0005C1   78..         MOV       R0,#?V2
   \   0005C3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005C6   7429         MOV       A,#0x29
   \   0005C8   12....       LCALL     ?XSTACK_DISP100_8
   \   0005CB   88..         MOV       ?V2,R0
   \   0005CD   89..         MOV       ?V3,R1
   \   0005CF   78..         MOV       R0,#?V2
   \   0005D1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005D4   12....       LCALL     ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0005D7   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005DA                ; Setup parameters for call to function _UARTSend
   \   0005DA   7402         MOV       A,#0x2
   \   0005DC   12....       LCALL     ?XSTACK_DISP100_8
   \   0005DF   88..         MOV       ?V2,R0
   \   0005E1   89..         MOV       ?V3,R1
   \   0005E3   78..         MOV       R0,#?V2
   \   0005E5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005E8   7429         MOV       A,#0x29
   \   0005EA   12....       LCALL     ?XSTACK_DISP100_8
   \   0005ED   88..         MOV       ?V2,R0
   \   0005EF   89..         MOV       ?V3,R1
   \   0005F1   78..         MOV       R0,#?V2
   \   0005F3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005F6   AA..         MOV       R2,?V0
   \   0005F8   AB..         MOV       R3,?V1
   \   0005FA   7901         MOV       R1,#0x1
   \   0005FC   12....       LCALL     ??Subroutine26_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0005FF   12....       LCALL     ?DEALLOC_XSTACK8
    477          			while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \   000602                ; Setup parameters for call to function wait_for
   \   000602   E4           CLR       A
   \   000603   F5..         MOV       ?V0,A
   \   000605   F5..         MOV       ?V1,A
   \   000607   78..         MOV       R0,#?V0
   \   000609   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00060C   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   00060E   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   000610   12....       LCALL     ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000613   12....       LCALL     ?DEALLOC_XSTACK8
   \   000616   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_38
    478          			debug_and_print("AT+CIPSEND\r\n");
   \   000619   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   00061C   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   00061F                ; Setup parameters for call to function _UARTSend
   \   00061F   12....       LCALL     ??Subroutine27_0 & 0xFFFF
    479          		} while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_60:
   \   000622   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000625   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000627   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000629   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   00062B   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   00062D   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000630   12....       LCALL     ?DEALLOC_XSTACK8
   \   000633   E9           MOV       A,R1
   \   000634   6003         JZ        $+5
   \   000636   02....       LJMP      ??SampleApp_ProcessEvent_31 & 0xFFFF
    480          		
    481          		// drive initial events
    482          		_delay_ms(50);
   \   000639                ; Setup parameters for call to function _delay_ms
   \   000639   7A32         MOV       R2,#0x32
   \   00063B   7B00         MOV       R3,#0x0
   \   00063D   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    483          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000640                ; Setup parameters for call to function osal_set_event
   \   000640   7A08         MOV       R2,#0x8
   \   000642   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    484          		return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_65:
   \   000645   EE           MOV       A,R6
   \   000646   6404         XRL       A,#0x4
   \   000648   02....       LJMP      ??SampleApp_ProcessEvent_11 & 0xFFFF
    485          	}
    486          
    487          	if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_30:
   \   00064B   EA           MOV       A,R2
   \   00064C   5408         ANL       A,#0x8
   \   00064E   7003         JNZ       $+5
   \   000650   02....       LJMP      ??SampleApp_ProcessEvent_39 & 0xFFFF
    488          		length = WiFiRecv(_buffer);
   \   000653                ; Setup parameters for call to function WiFiRecv
   \   000653   745F         MOV       A,#0x5f
   \   000655   12....       LCALL     ?XSTACK_DISP101_8
   \   000658   12....       LCALL     ?Subroutine5 & 0xFFFF
    489          		if (length > 0) debug(_buffer);
   \                     ??CrossCallReturnLabel_4:
   \   00065B   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   00065E   E8           MOV       A,R0
   \   00065F   49           ORL       A,R1
   \   000660   600A         JZ        ??SampleApp_ProcessEvent_40
   \   000662                ; Setup parameters for call to function _UARTSend
   \   000662   745F         MOV       A,#0x5f
   \   000664   12....       LCALL     ?XSTACK_DISP101_8
   \   000667   7900         MOV       R1,#0x0
   \   000669   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    490          		if (osal_memcmp(_buffer, "heartbeat\r\n", 11)) { // ÐÄÌø°ü
   \                     ??SampleApp_ProcessEvent_40:
   \   00066C                ; Setup parameters for call to function osal_memcmp
   \   00066C   75....       MOV       ?V0,#`?<Constant "heartbeat\\r\\n">` & 0xff
   \   00066F   75....       MOV       ?V1,#(`?<Constant "heartbeat\\r\\n">` >> 8) & 0xff
   \   000672   75..00       MOV       ?V2,#0x0
   \   000675   78..         MOV       R0,#?V0
   \   000677   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00067A   7C0B         MOV       R4,#0xb
   \   00067C   7D00         MOV       R5,#0x0
   \   00067E   7462         MOV       A,#0x62
   \   000680   12....       LCALL     ?XSTACK_DISP0_8
   \   000683   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000686   12....       LCALL     ?DEALLOC_XSTACK8
   \   000689   E9           MOV       A,R1
   \   00068A   6007         JZ        ??SampleApp_ProcessEvent_41
    491          			WiFiSend("received\r\n");
   \   00068C                ; Setup parameters for call to function WiFiSend
   \   00068C   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   00068E   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   000690   02....       LJMP      ??SampleApp_ProcessEvent_42 & 0xFFFF
    492          		} else
    493          		if (osal_memcmp(_buffer, "environment\r\n", 13)) { // Ò»´Î·µ»ØËùÓÐÊý¾Ý
   \                     ??SampleApp_ProcessEvent_41:
   \   000693                ; Setup parameters for call to function osal_memcmp
   \   000693   75....       MOV       ?V0,#`?<Constant "environment\\r\\n">` & 0xff
   \   000696   75....       MOV       ?V1,#(`?<Constant "environment\\r\\n">` >> 8) & 0xff
   \   000699   78..         MOV       R0,#?V0
   \   00069B   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00069E   7C0D         MOV       R4,#0xd
   \   0006A0   7D00         MOV       R5,#0x0
   \   0006A2   7462         MOV       A,#0x62
   \   0006A4   12....       LCALL     ?XSTACK_DISP0_8
   \   0006A7   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0006AA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0006AD   E9           MOV       A,R1
   \   0006AE   6003         JZ        $+5
   \   0006B0   02....       LJMP      ??SampleApp_ProcessEvent_43 & 0xFFFF
    494          			// data = "humidity?{}&temperature?{}"
    495          			// humidity = [str(i) + "=" + str(random.randint(0, 40)) for i in range(3)]
    496          			// temperature = [str(i) + "=" + str(random.randint(0, 40)) for i in range(3)]
    497          			// random.shuffle(humidity)
    498          			// random.shuffle(temperature)
    499          			// humidity = ",".join(humidity)
    500          			// temperature = ",".join(temperature)
    501          			// s.send(data.format(humidity, temperature).encode('utf-8'))
    502          		} else 
    503          		if (osal_memcmp(_buffer, "temperature", 11)) { // ÎÂ¶È
   \   0006B3                ; Setup parameters for call to function osal_memcmp
   \   0006B3   75....       MOV       ?V0,#`?<Constant "temperature">` & 0xff
   \   0006B6   75....       MOV       ?V1,#(`?<Constant "temperature">` >> 8) & 0xff
   \   0006B9   78..         MOV       R0,#?V0
   \   0006BB   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0006BE   7C0B         MOV       R4,#0xb
   \   0006C0   7D00         MOV       R5,#0x0
   \   0006C2   7462         MOV       A,#0x62
   \   0006C4   12....       LCALL     ?XSTACK_DISP0_8
   \   0006C7   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0006CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0006CD   E9           MOV       A,R1
   \   0006CE   6006         JZ        ??SampleApp_ProcessEvent_44
    504          			_zigbeeSend("temperature\r\n\0");
   \   0006D0                ; Setup parameters for call to function _zigbeeSend
   \   0006D0   7A..         MOV       R2,#`?<Constant "temperature\\r\\n\\000">` & 0xff
   \   0006D2   7B..         MOV       R3,#(`?<Constant "temperature\\r\\n\\000">` >> 8) & 0xff
   \   0006D4   8021         SJMP      ??SampleApp_ProcessEvent_45
    505          			// WiFiSend("OK\r\n");
    506          		} else
    507          		if (osal_memcmp(_buffer, "humidity", 8)) { // Êª¶È
   \                     ??SampleApp_ProcessEvent_44:
   \   0006D6                ; Setup parameters for call to function osal_memcmp
   \   0006D6   75....       MOV       ?V0,#`?<Constant "humidity">` & 0xff
   \   0006D9   75....       MOV       ?V1,#(`?<Constant "humidity">` >> 8) & 0xff
   \   0006DC   78..         MOV       R0,#?V0
   \   0006DE   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0006E1   7C08         MOV       R4,#0x8
   \   0006E3   7D00         MOV       R5,#0x0
   \   0006E5   7462         MOV       A,#0x62
   \   0006E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0006EA   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0006ED   12....       LCALL     ?DEALLOC_XSTACK8
   \   0006F0   E9           MOV       A,R1
   \   0006F1   600A         JZ        ??SampleApp_ProcessEvent_46
    508          			_zigbeeSend("humidity\r\n");
   \   0006F3                ; Setup parameters for call to function _zigbeeSend
   \   0006F3   7A..         MOV       R2,#`?<Constant "humidity\\r\\n">` & 0xff
   \   0006F5   7B..         MOV       R3,#(`?<Constant "humidity\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_45:
   \   0006F7   12....       LCALL     `??_zigbeeSend::?relay`; Banked call to: _zigbeeSend
   \   0006FA   02....       LJMP      ??SampleApp_ProcessEvent_43 & 0xFFFF
    509          			// WiFiSend("OK\r\n");
    510          		} else
    511          		if (osal_memcmp(_buffer, "light-on\r\n", 10)) { // ¿ªµÆ
   \                     ??SampleApp_ProcessEvent_46:
   \   0006FD                ; Setup parameters for call to function osal_memcmp
   \   0006FD   75....       MOV       ?V0,#`?<Constant "light-on\\r\\n">` & 0xff
   \   000700   75....       MOV       ?V1,#(`?<Constant "light-on\\r\\n">` >> 8) & 0xff
   \   000703   78..         MOV       R0,#?V0
   \   000705   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000708   7C0A         MOV       R4,#0xa
   \   00070A   7D00         MOV       R5,#0x0
   \   00070C   7462         MOV       A,#0x62
   \   00070E   12....       LCALL     ?XSTACK_DISP0_8
   \   000711   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000714   12....       LCALL     ?DEALLOC_XSTACK8
   \   000717   E9           MOV       A,R1
   \   000718   6007         JZ        ??SampleApp_ProcessEvent_47
    512          			_zigbeeSend("light-on\r\n");
   \   00071A                ; Setup parameters for call to function _zigbeeSend
   \   00071A   7A..         MOV       R2,#`?<Constant "light-on\\r\\n">` & 0xff
   \   00071C   7B..         MOV       R3,#(`?<Constant "light-on\\r\\n">` >> 8) & 0xff
   \   00071E   02....       LJMP      ??SampleApp_ProcessEvent_48 & 0xFFFF
    513          			WiFiSend("OK\r\n");
    514          		} else
    515          		if (osal_memcmp(_buffer, "humidify\r\n", 10)) { // ¼ÓÊª
   \                     ??SampleApp_ProcessEvent_47:
   \   000721                ; Setup parameters for call to function osal_memcmp
   \   000721   75....       MOV       ?V0,#`?<Constant "humidify\\r\\n">` & 0xff
   \   000724   75....       MOV       ?V1,#(`?<Constant "humidify\\r\\n">` >> 8) & 0xff
   \   000727   78..         MOV       R0,#?V0
   \   000729   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00072C   7C0A         MOV       R4,#0xa
   \   00072E   7D00         MOV       R5,#0x0
   \   000730   7462         MOV       A,#0x62
   \   000732   12....       LCALL     ?XSTACK_DISP0_8
   \   000735   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000738   12....       LCALL     ?DEALLOC_XSTACK8
   \   00073B   E9           MOV       A,R1
   \   00073C   6007         JZ        ??SampleApp_ProcessEvent_49
    516          			_zigbeeSend("humidify\r\n");
   \   00073E                ; Setup parameters for call to function _zigbeeSend
   \   00073E   7A..         MOV       R2,#`?<Constant "humidify\\r\\n">` & 0xff
   \   000740   7B..         MOV       R3,#(`?<Constant "humidify\\r\\n">` >> 8) & 0xff
   \   000742   02....       LJMP      ??SampleApp_ProcessEvent_48 & 0xFFFF
    517          			WiFiSend("OK\r\n");
    518          		} else
    519          		if (osal_memcmp(_buffer, "stop-humidify\r\n", 15)) { // Í£Ö¹¼ÓÊª
   \                     ??SampleApp_ProcessEvent_49:
   \   000745                ; Setup parameters for call to function osal_memcmp
   \   000745   75....       MOV       ?V0,#`?<Constant "stop-humidify\\r\\n">` & 0xff
   \   000748   75....       MOV       ?V1,#(`?<Constant "stop-humidify\\r\\n">` >> 8) & 0xff
   \   00074B   78..         MOV       R0,#?V0
   \   00074D   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000750   7C0F         MOV       R4,#0xf
   \   000752   7D00         MOV       R5,#0x0
   \   000754   7462         MOV       A,#0x62
   \   000756   12....       LCALL     ?XSTACK_DISP0_8
   \   000759   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00075C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00075F   E9           MOV       A,R1
   \   000760   6006         JZ        ??SampleApp_ProcessEvent_50
    520          			_zigbeeSend("stop-humidify\r\n");
   \   000762                ; Setup parameters for call to function _zigbeeSend
   \   000762   7A..         MOV       R2,#`?<Constant "stop-humidify\\r\\n">` & 0xff
   \   000764   7B..         MOV       R3,#(`?<Constant "stop-humidify\\r\\n">` >> 8) & 0xff
   \   000766   8067         SJMP      ??SampleApp_ProcessEvent_48
    521          			WiFiSend("OK\r\n");
    522          		} else
    523          		if (osal_memcmp(_buffer, "drain-water\r\n", 13)) { // ³öË®
   \                     ??SampleApp_ProcessEvent_50:
   \   000768                ; Setup parameters for call to function osal_memcmp
   \   000768   75....       MOV       ?V0,#`?<Constant "drain-water\\r\\n">` & 0xff
   \   00076B   75....       MOV       ?V1,#(`?<Constant "drain-water\\r\\n">` >> 8) & 0xff
   \   00076E   78..         MOV       R0,#?V0
   \   000770   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000773   7C0D         MOV       R4,#0xd
   \   000775   7D00         MOV       R5,#0x0
   \   000777   7462         MOV       A,#0x62
   \   000779   12....       LCALL     ?XSTACK_DISP0_8
   \   00077C   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00077F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000782   E9           MOV       A,R1
   \   000783   6006         JZ        ??SampleApp_ProcessEvent_51
    524          			_zigbeeSend("drain-water\r\n");
   \   000785                ; Setup parameters for call to function _zigbeeSend
   \   000785   7A..         MOV       R2,#`?<Constant "drain-water\\r\\n">` & 0xff
   \   000787   7B..         MOV       R3,#(`?<Constant "drain-water\\r\\n">` >> 8) & 0xff
   \   000789   8044         SJMP      ??SampleApp_ProcessEvent_48
    525          			WiFiSend("OK\r\n");
    526          		} else
    527          		if (osal_memcmp(_buffer, "draw-water\r\n", 12)) { // ½øË®
   \                     ??SampleApp_ProcessEvent_51:
   \   00078B                ; Setup parameters for call to function osal_memcmp
   \   00078B   75....       MOV       ?V0,#`?<Constant "draw-water\\r\\n">` & 0xff
   \   00078E   75....       MOV       ?V1,#(`?<Constant "draw-water\\r\\n">` >> 8) & 0xff
   \   000791   78..         MOV       R0,#?V0
   \   000793   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000796   7C0C         MOV       R4,#0xc
   \   000798   7D00         MOV       R5,#0x0
   \   00079A   7462         MOV       A,#0x62
   \   00079C   12....       LCALL     ?XSTACK_DISP0_8
   \   00079F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0007A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0007A5   E9           MOV       A,R1
   \   0007A6   6006         JZ        ??SampleApp_ProcessEvent_52
    528          			_zigbeeSend("draw-water\r\n");
   \   0007A8                ; Setup parameters for call to function _zigbeeSend
   \   0007A8   7A..         MOV       R2,#`?<Constant "draw-water\\r\\n">` & 0xff
   \   0007AA   7B..         MOV       R3,#(`?<Constant "draw-water\\r\\n">` >> 8) & 0xff
   \   0007AC   8021         SJMP      ??SampleApp_ProcessEvent_48
    529          			WiFiSend("OK\r\n");
    530          		} else
    531          		if (osal_memcmp(_buffer, "change-water\r\n", 14)) { // »»Ë®
   \                     ??SampleApp_ProcessEvent_52:
   \   0007AE                ; Setup parameters for call to function osal_memcmp
   \   0007AE   75....       MOV       ?V0,#`?<Constant "change-water\\r\\n">` & 0xff
   \   0007B1   75....       MOV       ?V1,#(`?<Constant "change-water\\r\\n">` >> 8) & 0xff
   \   0007B4   78..         MOV       R0,#?V0
   \   0007B6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0007B9   7C0E         MOV       R4,#0xe
   \   0007BB   7D00         MOV       R5,#0x0
   \   0007BD   7462         MOV       A,#0x62
   \   0007BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0007C2   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0007C5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0007C8   E9           MOV       A,R1
   \   0007C9   600E         JZ        ??SampleApp_ProcessEvent_43
    532          			_zigbeeSend("change-water\r\n");
   \   0007CB                ; Setup parameters for call to function _zigbeeSend
   \   0007CB   7A..         MOV       R2,#`?<Constant "change-water\\r\\n">` & 0xff
   \   0007CD   7B..         MOV       R3,#(`?<Constant "change-water\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_48:
   \   0007CF   12....       LCALL     `??_zigbeeSend::?relay`; Banked call to: _zigbeeSend
    533          			WiFiSend("OK\r\n");
   \   0007D2                ; Setup parameters for call to function WiFiSend
   \   0007D2   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   0007D4   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_42:
   \   0007D6   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    534          		}
    535          		if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \                     ??SampleApp_ProcessEvent_43:
   \   0007D9                ; Setup parameters for call to function wait_for
   \   0007D9   75..C8       MOV       ?V0,#-0x38
   \   0007DC   75..00       MOV       ?V1,#0x0
   \   0007DF   78..         MOV       R0,#?V0
   \   0007E1   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0007E4   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0007E6   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0007E8   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   0007EA   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   0007EC   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0007EF   12....       LCALL     ?DEALLOC_XSTACK8
   \   0007F2   E9           MOV       A,R1
   \   0007F3   600E         JZ        ??SampleApp_ProcessEvent_53
    536          			debug("WIFI RESET\r\n");
   \   0007F5                ; Setup parameters for call to function _UARTSend
   \   0007F5   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   0007F7   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   0007F9   7900         MOV       R1,#0x0
   \   0007FB   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    537          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0007FE                ; Setup parameters for call to function osal_set_event
   \   0007FE   12....       LCALL     ?Subroutine7 & 0xFFFF
    538          		} else {
   \                     ??CrossCallReturnLabel_62:
   \   000801   8010         SJMP      ??SampleApp_ProcessEvent_54
    539          			osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_53:
   \   000803                ; Setup parameters for call to function osal_start_timerEx
   \   000803   7CD0         MOV       R4,#-0x30
   \   000805   7D07         MOV       R5,#0x7
   \   000807   7A08         MOV       R2,#0x8
   \   000809   7B00         MOV       R3,#0x0
   \   00080B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00080E   E0           MOVX      A,@DPTR
   \   00080F   F9           MOV       R1,A
   \   000810   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    540          		}
    541          		return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??SampleApp_ProcessEvent_54:
   \   000813   EE           MOV       A,R6
   \   000814   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_11:
   \   000816   FA           MOV       R2,A
   \   000817   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_7:
   \   000818   FB           MOV       R3,A
   \   000819   8004         SJMP      ??SampleApp_ProcessEvent_55
    542          	}
    543            
    544            // Discard unknown events
    545            return 0;
   \                     ??SampleApp_ProcessEvent_39:
   \   00081B   7A00         MOV       R2,#0x0
   \   00081D   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_55:
   \   00081F   749F         MOV       A,#-0x61
   \   000821                REQUIRE ?Subroutine0
   \   000821                REQUIRE _A_P0
   \   000821                ; // Fall through to label ?Subroutine0
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   7B04         MOV       R3,#0x4
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7B04         MOV       R3,#0x4
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006                REQUIRE ??Subroutine26_0
   \   000006                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   75....       MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
   \   000003   75....       MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                REQUIRE ??Subroutine27_0
   \   000006                ; // Fall through to label ??Subroutine27_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012                ; Setup parameters for call to function wait_for
   \   000012   E4           CLR       A
   \   000013   F5..         MOV       ?V0,A
   \   000015   F5..         MOV       ?V1,A
   \   000017   78..         MOV       R0,#?V0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine28_0
   \   000002                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
   \   000003   85..82       MOV       DPL,?XSP + 0
   \   000006   85..83       MOV       DPH,?XSP + 1
   \   000009   EA           MOV       A,R2
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B   A3           INC       DPTR
   \   00000C   EB           MOV       A,R3
   \   00000D   F0           MOVX      @DPTR,A
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine32_0
   \   000006                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   F8           MOV       R0,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   F9           MOV       R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine34_0
   \   000004                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine35_0
   \   000004                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    547          
    548          /*********************************************************************
    549           * Event Generation Functions
    550           */
    551          /*********************************************************************
    552           * @fn      SampleApp_HandleKeys
    553           *
    554           * @brief   Handles all key events for this device.
    555           *
    556           * @param   shift - true if in shift/alt.
    557           * @param   keys - bit field for key events. Valid entries:
    558           *                 HAL_KEY_SW_2
    559           *                 HAL_KEY_SW_1
    560           *
    561           * @return  none
    562           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    563          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    565            (void)shift;  // Intentionally unreferenced parameter
    566            
    567            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5007         JNC       ??SampleApp_HandleKeys_0
    568            {
    569          	/* This key sends the Flash Command is sent to Group 1.
    570          	 * This device will not receive the Flash Command from this
    571          	 * device (even if it belongs to group 1).
    572          	 */
    573          	SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    574            }
    575          
    576            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5021         JNC       ??SampleApp_HandleKeys_1
    577            {
    578          	/* The Flashr Command is sent to Group 1.
    579          	 * This key toggles this device in and out of group 1.
    580          	 * If this device doesn't belong to group 1, this application
    581          	 * will not receive the Flash command sent to group 1.
    582          	 */
    583          	aps_Group_t *grp;
    584          	grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    585          	if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A03         MOV       R2,#0x3
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7914         MOV       R1,#0x14
   \   00001D   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   600B         JZ        ??SampleApp_HandleKeys_2
    586          	{
    587          	  // Remove from the group
    588          	  aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000024                ; Setup parameters for call to function aps_RemoveGroup
   \   000024   7A03         MOV       R2,#0x3
   \   000026   7B00         MOV       R3,#0x0
   \   000028   7914         MOV       R1,#0x14
   \   00002A   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00002D   8009         SJMP      ??SampleApp_HandleKeys_1
    589          	}
    590          	else
    591          	{
    592          	  // Add to the flash group
    593          	  aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   00002F                ; Setup parameters for call to function aps_AddGroup
   \   00002F   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000031   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000033   7914         MOV       R1,#0x14
   \   000035   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    594          	}
    595            }
    596          }
   \                     ??SampleApp_HandleKeys_1:
   \   000038   02....       LJMP      ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    597          
    598          /*********************************************************************
    599           * LOCAL FUNCTIONS
    600           */
    601          
    602          /*********************************************************************
    603           * @fn      SampleApp_MessageMSGCB
    604           *
    605           * @brief   Data message processor callback.  This function processes
    606           *          any incoming data - probably from other devices.  So, based
    607           *          on cluster ID, perform the intended action.
    608           *
    609           * @param   none
    610           *
    611           * @return  none
    612           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    613          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    614          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    615            //uint16 flashTime;
    616          
    617            switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    618            {
    619          	 case SAMPLEAPP_PERIODIC_CLUSTERID:
    620          	  HalUARTWrite(0,"I get data\n",11);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    621          	  HalUARTWrite(0, &(pkt->cmd.Data[0]),10); //´òÓ¡ÊÕµ½Êý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   2422         ADD       A,#0x22
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   12....       LCALL     ?Subroutine8 & 0xFFFF
    622          	  HalUARTWrite(0,"\n",1);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \                     ??CrossCallReturnLabel_5:
   \   000041                ; Setup parameters for call to function HalUARTWrite
   \   000041   7C01         MOV       R4,#0x1
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   000047   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000049   02....       LJMP      ??SampleApp_MessageMSGCB_3 & 0xFFFF
    623          	  break;
    624          
    625          	 case SAMPLEAPP_FLASH_CLUSTERID:
    626          	   if(pkt->cmd.Data[4]=='E' && pkt->cmd.Data[5] =='2')
   \                     ??SampleApp_MessageMSGCB_2:
   \   00004C   EA           MOV       A,R2
   \   00004D   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000050   F8           MOV       R0,A
   \   000051   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6445         XRL       A,#0x45
   \   000057   705A         JNZ       ??SampleApp_MessageMSGCB_4
   \   000059   EA           MOV       A,R2
   \   00005A   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   00005D   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6432         XRL       A,#0x32
   \   000064   704D         JNZ       ??SampleApp_MessageMSGCB_4
    627          	   {
    628          		 HalUARTWrite(0,"Temp is:",8);
   \   000066                ; Setup parameters for call to function HalUARTWrite
   \   000066   7C08         MOV       R4,#0x8
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A..         MOV       R2,#`?<Constant "Temp is:">` & 0xff
   \   00006C   7B..         MOV       R3,#(`?<Constant "Temp is:">` >> 8) & 0xff
   \   00006E   7900         MOV       R1,#0x0
   \   000070   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    629          		 HalUARTWrite(0,&pkt->cmd.Data[0],2);
   \   000073   EE           MOV       A,R6
   \   000074   2422         ADD       A,#0x22
   \   000076   F5..         MOV       ?V0,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   F5..         MOV       ?V1,A
   \   00007C                ; Setup parameters for call to function HalUARTWrite
   \   00007C   7C02         MOV       R4,#0x2
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   85..82       MOV       DPL,?V0
   \   000083   12....       LCALL     ?Subroutine8 & 0xFFFF
    630          		 HalUARTWrite(0,"\r\n",2);
   \                     ??CrossCallReturnLabel_6:
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   7C02         MOV       R4,#0x2
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00008E   7900         MOV       R1,#0x0
   \   000090   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    631          
    632          		 HalUARTWrite(0,"Humidity is:",12);
   \   000093                ; Setup parameters for call to function HalUARTWrite
   \   000093   7C0C         MOV       R4,#0xc
   \   000095   7D00         MOV       R5,#0x0
   \   000097   7A..         MOV       R2,#`?<Constant "Humidity is:">` & 0xff
   \   000099   7B..         MOV       R3,#(`?<Constant "Humidity is:">` >> 8) & 0xff
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    633          		 HalUARTWrite(0,&pkt->cmd.Data[2],2);
   \   0000A0                ; Setup parameters for call to function HalUARTWrite
   \   0000A0   7C02         MOV       R4,#0x2
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   85..82       MOV       DPL,?V0
   \   0000A7   85..83       MOV       DPH,?V1
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   2C           ADD       A,R4
   \   0000AC   FA           MOV       R2,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   3400         ADDC      A,#0x0
   \   0000B1   8018         SJMP      ??SampleApp_MessageMSGCB_5
    634          		 HalUARTWrite(0,"\r\n",2);
    635          	   }
    636          	   else
    637          	   {
    638          	  HalUARTWrite(0,"I get data:\n",12);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000B3                ; Setup parameters for call to function HalUARTWrite
   \   0000B3   7C0C         MOV       R4,#0xc
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   7A..         MOV       R2,#`?<Constant "I get data:\\n">` & 0xff
   \   0000B9   7B..         MOV       R3,#(`?<Constant "I get data:\\n">` >> 8) & 0xff
   \   0000BB   7900         MOV       R1,#0x0
   \   0000BD   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    639          	  HalUARTWrite(0, &pkt->cmd.Data[0],20); //´òÓ¡ÊÕµ½Êý¾Ý
   \   0000C0                ; Setup parameters for call to function HalUARTWrite
   \   0000C0   7C14         MOV       R4,#0x14
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   EE           MOV       A,R6
   \   0000C5   12....       LCALL     ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   0000C8   FA           MOV       R2,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000CB   FB           MOV       R3,A
   \   0000CC   7900         MOV       R1,#0x0
   \   0000CE   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    640          	  HalUARTWrite(0,"\r\n",2);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \   0000D1                ; Setup parameters for call to function HalUARTWrite
   \   0000D1   7C02         MOV       R4,#0x2
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000D7   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    641          	//  flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    642          	 // HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    643          	   }
    644          	  break;
    645            }
    646          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000DE   02....       LJMP      ??Subroutine31_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL     ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FB           MOV       R3,A
   \   000007   7900         MOV       R1,#0x0
   \   000009   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   00000C   22           RET
    647          
    648          /*********************************************************************
    649           * @fn      SampleApp_SendPeriodicMessage
    650           *
    651           * @brief   Send the periodic message.
    652           *
    653           * @param   none
    654           *
    655           * @return  none
    656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    657          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    659            uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};//×Ô¶¨ÒåÊý¾Ý
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    660            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    661          					   SAMPLEAPP_PERIODIC_CLUSTERID,
    662          					   10,//×Ö½ÚÊý
    663          					   data,//Ö¸ÕëÍ·
    664          					   &SampleApp_TransID,
    665          					   AF_DISCV_ROUTE,
    666          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000057   12....       LCALL     ?DEALLOC_XSTACK8
    667            {
    668            }
    669            else
    670            {
    671          	// Error occurred in request to send.
    672            }
    673          }
   \   00005A   740A         MOV       A,#0xa
   \   00005C   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000003   7409         MOV       A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0
    674          
    675          /*********************************************************************
    676           * @fn      SampleApp_SendFlashMessage
    677           *
    678           * @brief   Send the flash message to group 1.
    679           *
    680           * @param   flashTime - in milliseconds
    681           *
    682           * @return  none
    683           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    684          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    685          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    686            uint8 buffer[3];
    687            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    688            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    689            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    690          
    691            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    692          					   SAMPLEAPP_FLASH_CLUSTERID,
    693          					   3,
    694          					   buffer,
    695          					   &SampleApp_TransID,
    696          					   AF_DISCV_ROUTE,
    697          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000060   12....       LCALL     ?DEALLOC_XSTACK8
    698            {
    699            }
    700            else
    701            {
    702          	// Error occurred in request to send.
    703            }
    704          }
   \   000063   7403         MOV       A,#0x3
   \   000065   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   7920         MOV       R1,#0x20
   \   000002   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000008   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine30_0
   \   00000A                ; // Fall through to label ??Subroutine30_0
    705          
    706          /*********************************************************************
    707          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    708          void SampleApp_SendGroupMessage( void )
   \                     SampleApp_SendGroupMessage:
    709          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    710            uint8 data[20]="I am Coordinator\r\n\0";
   \   00000A   90....       MOV       DPTR,#`?<Constant "I am Coordinator\\r\\n\\000">`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    711            //uint8 data[20]="I am EndDevice1\r\n\0";
    712            //uint8 data[20]="I am EndDevice2\r\n\0";
    713            if ( AF_DataRequest( & SampleApp_Flash_DstAddr,
    714          					   &SampleApp_epDesc,
    715          					   SAMPLEAPP_FLASH_CLUSTERID,
    716          					   20,
    717          					   data,
    718          					   &SampleApp_TransID,
    719          					   AF_DISCV_ROUTE,
    720          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..14       MOV       ?V0,#0x14
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..02       MOV       ?V0,#0x2
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00004D   12....       LCALL     ?DEALLOC_XSTACK8
    721            {
    722            }
    723            else
    724            {
    725          	// Error occurred in request to send.
    726            }
    727          }
   \   000050   7414         MOV       A,#0x14
   \   000052   02....       LJMP      ?Subroutine1 & 0xFFFF
    728          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    729          void _zigbeeSend(uint8 *fmt, ...) {
   \                     _zigbeeSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    730          	va_list arg_ptr;
    731          	uint8 _buffer[UartDefaultTxLen], cnt;
    732          	uint16 length = 0;
    733          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    734          		_buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??_zigbeeSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??_zigbeeSend_0
    735          	va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine4 & 0xFFFF
    736          	length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_0:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    737          	va_end(arg_ptr);
    738          	if (AF_DataRequest(&SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    739          		SAMPLEAPP_FLASH_CLUSTERID, length, _buffer,
    740          		&SampleApp_TransID, AF_DISCV_ROUTE, AF_DEFAULT_RADIUS) == afStatus_SUCCESS) {
   \   000036                ; Setup parameters for call to function AF_DataRequest
   \   000036   75..1E       MOV       ?V2,#0x1e
   \   000039   78..         MOV       R0,#?V2
   \   00003B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003E   75....       MOV       ?V2,#SampleApp_TransID & 0xff
   \   000041   75....       MOV       ?V3,#(SampleApp_TransID >> 8) & 0xff
   \   000044   78..         MOV       R0,#?V2
   \   000046   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000049   7405         MOV       A,#0x5
   \   00004B   12....       LCALL     ?XSTACK_DISP100_8
   \   00004E   88..         MOV       ?V2,R0
   \   000050   89..         MOV       ?V3,R1
   \   000052   78..         MOV       R0,#?V2
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   78..         MOV       R0,#?V0
   \   000059   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005C   75..02       MOV       ?V0,#0x2
   \   00005F   75..00       MOV       ?V1,#0x0
   \   000062   78..         MOV       R0,#?V0
   \   000064   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000067   12....       LCALL     ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00006A                REQUIRE ?Subroutine2
   \   00006A                ; // Fall through to label ?Subroutine2
    741          		
    742          	}
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7442         MOV       A,#0x42
   \   000005   12....       LCALL     ?DEALLOC_XSTACK8
   \   000008   7F04         MOV       R7,#0x4
   \   00000A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    744          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    746          	va_list arg_ptr;
    747          	uint8 _buffer[UartDefaultTxLen], cnt;
    748          	uint16 length = 0;
    749          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    750          		_buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    751          	va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   12....       LCALL     ?Subroutine4 & 0xFFFF
    752          	length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_1:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   EA           MOV       A,R2
   \   000024   FC           MOV       R4,A
   \   000025   EB           MOV       A,R3
   \   000026   FD           MOV       R5,A
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
    753          	va_end(arg_ptr);
    754          	HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00003C                ; Setup parameters for call to function HalUARTWrite
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   EE           MOV       A,R6
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    755          }
   \   000046   7442         MOV       A,#0x42
   \   000048                REQUIRE ?Subroutine1
   \   000048                ; // Fall through to label ?Subroutine1
    756          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    757          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    758          	for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    759          		_buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   12....       LCALL     ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   00001A   EA           MOV       A,R2
   \   00001B   28           ADD       A,R0
   \   00001C   F582         MOV       DPL,A
   \   00001E   EB           MOV       A,R3
   \   00001F   39           ADDC      A,R1
   \   000020   F583         MOV       DPH,A
   \   000022   E4           CLR       A
   \   000023   F0           MOVX      @DPTR,A
   \   000024   8C82         MOV       DPL,R4
   \   000026   8D83         MOV       DPH,R5
   \   000028   E0           MOVX      A,@DPTR
   \   000029   2401         ADD       A,#0x1
   \   00002B   F0           MOVX      @DPTR,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   3400         ADDC      A,#0x0
   \   000030   F0           MOVX      @DPTR,A
   \   000031   8C82         MOV       DPL,R4
   \   000033   8D83         MOV       DPH,R5
   \   000035   C3           CLR       C
   \   000036   E0           MOVX      A,@DPTR
   \   000037   9440         SUBB      A,#0x40
   \   000039   A3           INC       DPTR
   \   00003A   E0           MOVX      A,@DPTR
   \   00003B   9400         SUBB      A,#0x0
   \   00003D   40D4         JC        ??_UARTRead_0
    760          	*length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   00003F                ; Setup parameters for call to function HalUARTRead
   \   00003F   7C40         MOV       R4,#0x40
   \   000041   7D00         MOV       R5,#0x0
   \   000043   A9..         MOV       R1,?V0
   \   000045   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   000048   8E82         MOV       DPL,R6
   \   00004A   8F83         MOV       DPH,R7
   \   00004C   EA           MOV       A,R2
   \   00004D   F0           MOVX      @DPTR,A
   \   00004E   A3           INC       DPTR
   \   00004F   EB           MOV       A,R3
   \   000050   F0           MOVX      @DPTR,A
    761          }
   \   000051                REQUIRE ?Subroutine3
   \   000051                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    762          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    763          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    764          	while (timeout --) {
    765          	   _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    766          	}
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    767          }
   \   000022   80..         SJMP      ?Subroutine3
    768          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    770          	uint8 cnt;
    771          	while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    772          		cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    773          		while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    774          			asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    775          		}
    776          	}    
    777          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    778          
    779          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    781          	uint16 wait_len, read_len, err_len;
    782          	int16 i, index;
    783          	uint8 buffer[UartDefaultRxLen], flag;
    784          	wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    785          	err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7452         MOV       A,#0x52
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    786          	while (1) {
    787          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     ?Subroutine15 & 0xFFFF
    788          		_delay_ms(1);
    789          		if (read_len > 2) { // at least 0x0D 0x0A
   \                     ??CrossCallReturnLabel_11:
   \   00003C   9403         SUBB      A,#0x3
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   9400         SUBB      A,#0x0
   \   000042   5003         JNC       $+5
   \   000044   02....       LJMP      ??wait_for_1 & 0xFFFF
    790          			index = 0;
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    791          			for (i = read_len - 1; i >= 0; i --) {
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   24FF         ADD       A,#-0x1
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   000059   E8           MOV       A,R0
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   18           DEC       R0
   \   00005D   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   F9           MOV       R1,A
   \   000061   C3           CLR       C
   \   000062   E9           MOV       A,R1
   \   000063   9400         SUBB      A,#0x0
   \   000065   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000067   65D0         XRL       A,PSW
   \   000069   33           RLC       A
   \   00006A   4032         JC        ??wait_for_4
    792          				if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E582         MOV       A,DPL
   \   000073   28           ADD       A,R0
   \   000074   F582         MOV       DPL,A
   \   000076   E583         MOV       A,DPH
   \   000078   39           ADDC      A,R1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   640A         XRL       A,#0xa
   \   00007E   70D9         JNZ       ??wait_for_3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   24FF         ADD       A,#-0x1
   \   000089   FC           MOV       R4,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   34FF         ADDC      A,#-0x1
   \   00008E   FD           MOV       R5,A
   \   00008F   EC           MOV       A,R4
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??wait_for_5
   \   000093   ED           MOV       A,R5
   \   000094   69           XRL       A,R1
   \                     ??wait_for_5:
   \   000095   60C2         JZ        ??wait_for_3
    793          					index = i + 1;
   \   000097   E8           MOV       A,R0
   \   000098   2401         ADD       A,#0x1
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
    794          					break;
    795          				}
    796          			}
    797          			
    798          			if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   00009E   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000A1   65..         XRL       A,?V2
   \   0000A3   7003         JNZ       ??wait_for_6
   \   0000A5   E9           MOV       A,R1
   \   0000A6   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000A8   703B         JNZ       ??wait_for_7
    799          				flag = 1;
    800          				for (i = 0; i < err_len; i ++) {
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   801F         SJMP      ??wait_for_8
    801          					if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000B0   EA           MOV       A,R2
   \   0000B1   28           ADD       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EB           MOV       A,R3
   \   0000B4   39           ADDC      A,R1
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine21 & 0xFFFF
    802          						flag = 0;
    803          						break;
    804          					}
    805          				}
   \                     ??CrossCallReturnLabel_35:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   28           ADD       A,R0
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6C           XRL       A,R4
   \   0000C8   701B         JNZ       ??wait_for_7
   \   0000CA   08           INC       R0
   \   0000CB   E8           MOV       A,R0
   \   0000CC   7001         JNZ       ??wait_for_8
   \   0000CE   09           INC       R1
   \                     ??wait_for_8:
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V2
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V3
   \   0000D6   40D8         JC        ??wait_for_9
    806          				if (flag == 1) {
    807          					debug(err);
   \   0000D8                ; Setup parameters for call to function _UARTSend
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    808          					return 1;
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   8060         SJMP      ??wait_for_10
    809          				}
    810          			}
    811          
    812          			if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000E5   12....       LCALL     ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000E8   65..         XRL       A,?V6
   \   0000EA   7003         JNZ       ??wait_for_11
   \   0000EC   E9           MOV       A,R1
   \   0000ED   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   0000EF   703D         JNZ       ??wait_for_1
    813          				flag = 1;
    814          				for (i = 0; i < wait_len; i ++) {
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   8021         SJMP      ??wait_for_12
    815          					if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   28           ADD       A,R0
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EB           MOV       A,R3
   \   0000FB   39           ADDC      A,R1
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine21 & 0xFFFF
    816          						flag = 0;
    817          						break;
    818          					}
    819          				}
   \                     ??CrossCallReturnLabel_36:
   \   000105   E5..         MOV       A,?V0
   \   000107   28           ADD       A,R0
   \   000108   F582         MOV       DPL,A
   \   00010A   E5..         MOV       A,?V1
   \   00010C   39           ADDC      A,R1
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6C           XRL       A,R4
   \   000111   701B         JNZ       ??wait_for_1
   \   000113   08           INC       R0
   \   000114   E8           MOV       A,R0
   \   000115   7001         JNZ       ??wait_for_12
   \   000117   09           INC       R1
   \                     ??wait_for_12:
   \   000118   C3           CLR       C
   \   000119   E8           MOV       A,R0
   \   00011A   95..         SUBB      A,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   95..         SUBB      A,?V7
   \   00011F   40D6         JC        ??wait_for_13
    820          				if (flag == 1) {
    821          					debug(str);
   \   000121                ; Setup parameters for call to function _UARTSend
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   7900         MOV       R1,#0x0
   \   000127   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    822          					return 0;
   \   00012A   7900         MOV       R1,#0x0
   \   00012C   8017         SJMP      ??wait_for_10
    823          				}
    824          			}
    825          		}
    826          		timeout --;
    827          		if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00012E   E5..         MOV       A,?V4
   \   000130   24FF         ADD       A,#-0x1
   \   000132   F5..         MOV       ?V4,A
   \   000134   E5..         MOV       A,?V5
   \   000136   34FF         ADDC      A,#-0x1
   \   000138   F5..         MOV       ?V5,A
   \   00013A   E5..         MOV       A,?V4
   \   00013C   45..         ORL       A,?V5
   \   00013E   6003         JZ        $+5
   \   000140   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000143   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000145   7442         MOV       A,#0x42
    828          	}
   \   000147   02....       LJMP      ?Subroutine0 & 0xFFFF
    829          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    830          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    831          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    832          	print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine14 & 0xFFFF
    833          	_delay_ms(10);
    834          	print("+++");
   \                     ??CrossCallReturnLabel_80:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine14 & 0xFFFF
    835          	_delay_ms(10);
    836          	print("\r\n");
   \                     ??CrossCallReturnLabel_81:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine33_0 & 0xFFFF
    837          	_delay_ms(10);
    838          }
   \                     ??CrossCallReturnLabel_82:
   \   000012   02....       LJMP      ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine33_0
   \   000004                ; // Fall through to label ??Subroutine33_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET
    839          
    840          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          uint8 WiFiSend(uint8 *fmt, ...) {
   \                     WiFiSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    842          	va_list arg_ptr;
    843          	uint8 buffer[UartDefaultTxLen], cnt;
    844          	uint16 length = 0;
    845          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    846          		buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??WiFiSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??WiFiSend_0
    847          	va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine4 & 0xFFFF
    848          	length = vsprintf((char *)buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_2:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    849          	va_end(arg_ptr);
    850          	debug_and_print("AT+CIPSEND=0,%d\r\n", length);
   \   000036                ; Setup parameters for call to function _UARTSend
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   00003F   7900         MOV       R1,#0x0
   \   000041   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function _UARTSend
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   000050   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    851          	_delay_ms(10);
   \   00005C                ; Setup parameters for call to function _delay_ms
   \   00005C   7A0A         MOV       R2,#0xa
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    852          	// if (wait_for(">", "ERROR\r\n", 0)) return 1;
    853          	HalUARTWrite(1, (uint8 *)buffer, length);
   \   000063                ; Setup parameters for call to function HalUARTWrite
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   7402         MOV       A,#0x2
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    854          	return wait_for("SEND OK\r\n", "SEND FAIL\r\n", 0);
   \   000071                ; Setup parameters for call to function wait_for
   \   000071   E4           CLR       A
   \   000072   F5..         MOV       ?V0,A
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7C..         MOV       R4,#`?<Constant "SEND FAIL\\r\\n">` & 0xff
   \   00007D   7D..         MOV       R5,#(`?<Constant "SEND FAIL\\r\\n">` >> 8) & 0xff
   \   00007F   7A..         MOV       R2,#`?<Constant "SEND OK\\r\\n">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "SEND OK\\r\\n">` >> 8) & 0xff
   \   000083   12....       LCALL     ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000086   02....       LJMP      ?Subroutine2 & 0xFFFF
    855          }
    856          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          uint16 WiFiRecv(uint8 *buff) {
   \                     WiFiRecv:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    858          	uint16 read_len, l_index;
    859          	uint8 buffer[UartDefaultRxLen];
    860          	while (1) {
    861          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??WiFiRecv_0:
   \   00000E                ; Setup parameters for call to function _UARTRead
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ?Subroutine15 & 0xFFFF
    862          		_delay_ms(1);
    863          		// at least 11 chars "+IPD,0,X:\r\n"
    864          		if (read_len > 10 
    865          			&& buffer[read_len - 2] == '\r' 
    866          			&& buffer[read_len - 1] == '\n'
    867          		) {
   \                     ??CrossCallReturnLabel_12:
   \   00001A   940B         SUBB      A,#0xb
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   9400         SUBB      A,#0x0
   \   000020   40EC         JC        ??WiFiRecv_0
   \   000022   85..82       MOV       DPL,?XSP + 0
   \   000025   85..83       MOV       DPH,?XSP + 1
   \   000028   7402         MOV       A,#0x2
   \   00002A   12....       LCALL     ?XSTACK_DISP100_8
   \   00002D   89..         MOV       ?V1,R1
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   28           ADD       A,R0
   \   000031   F8           MOV       R0,A
   \   000032   A3           INC       DPTR
   \   000033   E0           MOVX      A,@DPTR
   \   000034   35..         ADDC      A,?V1
   \   000036   F9           MOV       R1,A
   \   000037   E8           MOV       A,R0
   \   000038   24FE         ADD       A,#-0x2
   \   00003A   F582         MOV       DPL,A
   \   00003C   E9           MOV       A,R1
   \   00003D   34FF         ADDC      A,#-0x1
   \   00003F   F583         MOV       DPH,A
   \   000041   E0           MOVX      A,@DPTR
   \   000042   640D         XRL       A,#0xd
   \   000044   70C8         JNZ       ??WiFiRecv_0
   \   000046   E8           MOV       A,R0
   \   000047   24FF         ADD       A,#-0x1
   \   000049   F582         MOV       DPL,A
   \   00004B   E9           MOV       A,R1
   \   00004C   34FF         ADDC      A,#-0x1
   \   00004E   F583         MOV       DPH,A
   \   000050   E0           MOVX      A,@DPTR
   \   000051   640A         XRL       A,#0xa
   \   000053   70B9         JNZ       ??WiFiRecv_0
    868          			l_index = 0;
   \   000055   7E00         MOV       R6,#0x0
   \   000057   7F00         MOV       R7,#0x0
   \   000059   8019         SJMP      ??WiFiRecv_1
    869          			while (l_index < read_len && buffer[l_index] != ':') {
   \                     ??WiFiRecv_2:
   \   00005B   7402         MOV       A,#0x2
   \   00005D   12....       LCALL     ?XSTACK_DISP0_8
   \   000060   E582         MOV       A,DPL
   \   000062   2E           ADD       A,R6
   \   000063   F582         MOV       DPL,A
   \   000065   E583         MOV       A,DPH
   \   000067   3F           ADDC      A,R7
   \   000068   F583         MOV       DPH,A
   \   00006A   E0           MOVX      A,@DPTR
   \   00006B   643A         XRL       A,#0x3a
   \   00006D   601E         JZ        ??WiFiRecv_3
    870          				l_index ++;
   \   00006F   0E           INC       R6
   \   000070   EE           MOV       A,R6
   \   000071   7001         JNZ       ??WiFiRecv_1
   \   000073   0F           INC       R7
    871          			}
   \                     ??WiFiRecv_1:
   \   000074   12....       LCALL     ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000077   C3           CLR       C
   \   000078   EE           MOV       A,R6
   \   000079   98           SUBB      A,R0
   \   00007A   EF           MOV       A,R7
   \   00007B   99           SUBB      A,R1
   \   00007C   40DD         JC        ??WiFiRecv_2
    872          			if (l_index == read_len) continue;
   \   00007E   85..82       MOV       DPL,?XSP + 0
   \   000081   85..83       MOV       DPH,?XSP + 1
   \   000084   E0           MOVX      A,@DPTR
   \   000085   6E           XRL       A,R6
   \   000086   7003         JNZ       ??WiFiRecv_4
   \   000088   A3           INC       DPTR
   \   000089   E0           MOVX      A,@DPTR
   \   00008A   6F           XRL       A,R7
   \                     ??WiFiRecv_4:
   \   00008B   6081         JZ        ??WiFiRecv_0
    873          			l_index ++;
   \                     ??WiFiRecv_3:
   \   00008D   0E           INC       R6
   \   00008E   EE           MOV       A,R6
   \   00008F   7001         JNZ       ??WiFiRecv_5
   \   000091   0F           INC       R7
    874          			osal_memcpy(buff, buffer + l_index, read_len - l_index);
   \                     ??WiFiRecv_5:
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   7402         MOV       A,#0x2
   \   000094   12....       LCALL     ?XSTACK_DISP0_8
   \   000097   E582         MOV       A,DPL
   \   000099   2E           ADD       A,R6
   \   00009A   F5..         MOV       ?V0,A
   \   00009C   E583         MOV       A,DPH
   \   00009E   3F           ADDC      A,R7
   \   00009F   F5..         MOV       ?V1,A
   \   0000A1   75..00       MOV       ?V2,#0x0
   \   0000A4   78..         MOV       R0,#?V0
   \   0000A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0000A9   7403         MOV       A,#0x3
   \   0000AB   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   C3           CLR       C
   \   0000B0   9E           SUBB      A,R6
   \   0000B1   FC           MOV       R4,A
   \   0000B2   A3           INC       DPTR
   \   0000B3   E0           MOVX      A,@DPTR
   \   0000B4   9F           SUBB      A,R7
   \   0000B5   FD           MOV       R5,A
   \   0000B6   AA..         MOV       R2,?V4
   \   0000B8   AB..         MOV       R3,?V5
   \   0000BA   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BD   7403         MOV       A,#0x3
   \   0000BF   12....       LCALL     ?DEALLOC_XSTACK8
    875          			return (read_len - l_index);
   \   0000C2   85..82       MOV       DPL,?XSP + 0
   \   0000C5   85..83       MOV       DPH,?XSP + 1
   \   0000C8   E0           MOVX      A,@DPTR
   \   0000C9   C3           CLR       C
   \   0000CA   9E           SUBB      A,R6
   \   0000CB   FA           MOV       R2,A
   \   0000CC   A3           INC       DPTR
   \   0000CD   E0           MOVX      A,@DPTR
   \   0000CE   9F           SUBB      A,R7
   \   0000CF   FB           MOV       R3,A
   \   0000D0   7442         MOV       A,#0x42
   \   0000D2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000D5   7F06         MOV       R7,#0x6
   \   0000D7   02....       LJMP      ?BANKED_LEAVE_XDATA
    876          		}
    877          	}
    878          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendGroupMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendGroupMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_zigbeeSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _zigbeeSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiRecv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiRecv

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter AP Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter AP Mode\015\012"
   \            72204150
   \            204D6F64
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter STA Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter STA Mode\015\012"
   \            72205354
   \            41204D6F
   \            64650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RST\\r\\n">`:
   \   000000   41542B52     DB "AT+RST\015\012"
   \            53540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready\\r\\n">`:
   \   000000   72656164     DB "ready\015\012"
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=2\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=2\015\012"
   \            574D4F44
   \            453D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
   \   000000   41542B43     DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"
   \            57534150
   \            3D224553
   \            50383236
   \            36222C22
   \            31323334
   \            3536222C
   \            31312C30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=0\015\012"
   \            49504D4F
   \            44453D30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8266\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3236360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT\015\012"
   \            4E4E4543
   \            540D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT FAIL\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT FAIL\015\012"
   \            4E4E4543
   \            54204641
   \            494C0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CTS\\r\\n">`:
   \   000000   4354530D     DB "CTS\015\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IP">`:
   \   000000   495000       DB "IP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT IP\\r\\n">`:
   \   000000   474F5420     DB "GOT IP\015\012"
   \            49500D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PORT">`:
   \   000000   504F5254     DB "PORT"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PORT\\r\\n">`:
   \   000000   474F5420     DB "GOT PORT\015\012"
   \            504F5254
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SSID">`:
   \   000000   53534944     DB "SSID"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT SSID\\r\\n">`:
   \   000000   474F5420     DB "GOT SSID\015\012"
   \            53534944
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PSWD">`:
   \   000000   50535744     DB "PSWD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PSWD\\r\\n">`:
   \   000000   474F5420     DB "GOT PSWD\015\012"
   \            50535744
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OVER\\r\\n">`:
   \   000000   4F564552     DB "OVER\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read Flash Failed\\r\\n">`:
   \   000000   52656164     DB "Read Flash Failed\015\012"
   \            20466C61
   \            73682046
   \            61696C65
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"%s\",%s\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2225
   \            73222C25
   \            730D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "heartbeat\\r\\n">`:
   \   000000   68656172     DB "heartbeat\015\012"
   \            74626561
   \            740D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "environment\\r\\n">`:
   \   000000   656E7669     DB "environment\015\012"
   \            726F6E6D
   \            656E740D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "temperature">`:
   \   000000   74656D70     DB "temperature"
   \            65726174
   \            75726500

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "temperature\\r\\n\\000">`:
   \   000000   74656D70     DB 74H, 65H, 6DH, 70H, 65H, 72H, 61H, 74H
   \            65726174
   \   000008   7572650D     DB 75H, 72H, 65H, 0DH, 0AH, 0, 0
   \            0A0000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidity">`:
   \   000000   68756D69     DB "humidity"
   \            64697479
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidity\\r\\n">`:
   \   000000   68756D69     DB "humidity\015\012"
   \            64697479
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "light-on\\r\\n">`:
   \   000000   6C696768     DB "light-on\015\012"
   \            742D6F6E
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "humidify\\r\\n">`:
   \   000000   68756D69     DB "humidify\015\012"
   \            64696679
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "stop-humidify\\r\\n">`:
   \   000000   73746F70     DB "stop-humidify\015\012"
   \            2D68756D
   \            69646966
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "drain-water\\r\\n">`:
   \   000000   64726169     DB "drain-water\015\012"
   \            6E2D7761
   \            7465720D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "draw-water\\r\\n">`:
   \   000000   64726177     DB "draw-water\015\012"
   \            2D776174
   \            65720D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "change-water\\r\\n">`:
   \   000000   6368616E     DB "change-water\015\012"
   \            67652D77
   \            61746572
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temp is:">`:
   \   000000   54656D70     DB "Temp is:"
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Humidity is:">`:
   \   000000   48756D69     DB "Humidity is:"
   \            64697479
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data:\\n">`:
   \   000000   49206765     DB "I get data:\012"
   \            74206461
   \            74613A0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I am Coordinator\\r\\n\\000">`:
   \   000000   4920616D     DB 49H, 20H, 61H, 6DH, 20H, 43H, 6FH, 6FH
   \            20436F6F
   \   000008   7264696E     DB 72H, 64H, 69H, 6EH, 61H, 74H, 6FH, 72H
   \            61746F72
   \   000010   0D0A0000     DB 0DH, 0AH, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,%d\015\012"
   \            49505345
   \            4E443D30
   \            2C25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND OK\\r\\n">`:
   \   000000   53454E44     DB "SEND OK\015\012"
   \            204F4B0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND FAIL\\r\\n">`:
   \   000000   53454E44     DB "SEND FAIL\015\012"
   \            20464149
   \            4C0D0A00

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    185   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0    185   SampleApp_MessageMSGCB
        0     10   -> HalUARTWrite
      0    179   SampleApp_ProcessEvent
        0    175   -> HalUARTOpen
        0    175   -> HalUARTWrite
        0    175   -> SampleApp_HandleKeys
        0    175   -> SampleApp_MessageMSGCB
        0    175   -> WiFiRecv
        0    175   -> WiFiSend
        0    175   -> _UARTRead
        0    175   -> _UARTSend
        0    179   -> _UARTSend
        0    175   -> _delay_ms
        0    175   -> _zigbeeSend
        0    175   -> exit_send
        0    178   -> osal_memcmp
        0    175   -> osal_msg_deallocate
        0    175   -> osal_msg_receive
        0    177   -> osal_nv_item_init
        0    179   -> osal_nv_read
        0    179   -> osal_nv_write
        0    175   -> osal_set_event
        0    175   -> osal_start_timerEx
        0    177   -> wait_for
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     39   SampleApp_SendGroupMessage
        0     39   -> AF_DataRequest
      0     29   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0    258   WiFiRecv
        0     80   -> _UARTRead
        0     80   -> _delay_ms
        0     83   -> osal_memcpy
      1    255   WiFiSend
        0     78   -> HalUARTWrite
        0     80   -> _UARTSend
        0     78   -> _delay_ms
        0     80   -> vsprintf
        0     80   -> wait_for
      0    184   _UARTRead
        0      9   -> HalUARTRead
      1    257   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0    184   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      1    262   _zigbeeSend
        0     87   -> AF_DataRequest
        0     80   -> vsprintf
      0    184   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    259   wait_for
        0     82   -> _UARTRead
        0     82   -> _UARTSend
        0     82   -> _delay_ms
        0     82   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "+++">
      17  ?<Constant "0,CONNECT FAIL\r\n">
      12  ?<Constant "0,CONNECT\r\n">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=0\r\n">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      18  ?<Constant "AT+CIPSEND=0,%d\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8266\r\n">
      28  ?<Constant "AT+CIPSTART=\"TCP\",\"%s...">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      14  ?<Constant "AT+CWMODE=1\r\n">
      14  ?<Constant "AT+CWMODE=2\r\n">
      35  ?<Constant "AT+CWSAP=\"ESP8266\",\"1...">
       9  ?<Constant "AT+RST\r\n">
       9  ?<Constant "CLOSED\r\n">
       6  ?<Constant "CTS\r\n">
       8  ?<Constant "ERROR\r\n">
      16  ?<Constant "Enter AP Mode\r\n">
      17  ?<Constant "Enter STA Mode\r\n">
       7  ?<Constant "FAIL\r\n">
       9  ?<Constant "GOT IP\r\n">
      11  ?<Constant "GOT PORT\r\n">
      11  ?<Constant "GOT PSWD\r\n">
      11  ?<Constant "GOT SSID\r\n">
       8  ?<Constant "Group 1">
      13  ?<Constant "Humidity is:">
      20  ?<Constant "I am Coordinator\r\n\000">
      13  ?<Constant "I get data:\n">
      12  ?<Constant "I get data\n">
       3  ?<Constant "IP">
       5  ?<Constant "OK\r\n">
       7  ?<Constant "OVER\r\n">
       5  ?<Constant "PORT">
       5  ?<Constant "PSWD">
      20  ?<Constant "Read Flash Failed\r\n">
      12  ?<Constant "SEND FAIL\r\n">
      10  ?<Constant "SEND OK\r\n">
       5  ?<Constant "SSID">
       9  ?<Constant "Temp is:">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      15  ?<Constant "change-water\r\n">
      14  ?<Constant "drain-water\r\n">
      13  ?<Constant "draw-water\r\n">
      14  ?<Constant "environment\r\n">
      12  ?<Constant "heartbeat\r\n">
      11  ?<Constant "humidify\r\n">
       9  ?<Constant "humidity">
      11  ?<Constant "humidity\r\n">
      11  ?<Constant "light-on\r\n">
       8  ?<Constant "ready\r\n">
      11  ?<Constant "received\r\n">
      16  ?<Constant "stop-humidify\r\n">
      12  ?<Constant "temperature">
      15  ?<Constant "temperature\r\n\000">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       6  ??Subroutine25_0
       6  ??Subroutine26_0
      26  ??Subroutine27_0
      11  ??Subroutine28_0
       5  ??Subroutine29_0
       6  ??Subroutine30_0
       5  ??Subroutine31_0
       6  ??Subroutine32_0
      13  ??Subroutine33_0
       4  ??Subroutine34_0
       6  ??Subroutine35_0
       8  ?Subroutine0
       3  ?Subroutine1
      11  ?Subroutine10
      16  ?Subroutine11
       6  ?Subroutine12
       4  ?Subroutine13
       4  ?Subroutine14
      21  ?Subroutine15
      11  ?Subroutine16
       6  ?Subroutine17
      12  ?Subroutine18
       2  ?Subroutine19
      13  ?Subroutine2
       8  ?Subroutine20
      13  ?Subroutine21
       5  ?Subroutine22
      10  ?Subroutine23
       9  ?Subroutine24
       5  ?Subroutine3
      22  ?Subroutine4
      21  ?Subroutine5
       2  ?Subroutine6
       2  ?Subroutine7
      13  ?Subroutine8
       6  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      59  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     152  SampleApp_Init
       6  SampleApp_Init::?relay
     225  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
    2081  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     104  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      85  SampleApp_SendGroupMessage
       6  SampleApp_SendGroupMessage::?relay
      95  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     218  WiFiRecv
       6  WiFiRecv::?relay
     137  WiFiSend
       6  WiFiSend::?relay
       1  _A_P0
      81  _UARTRead
       6  _UARTRead::?relay
      72  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
     106  _zigbeeSend
       6  _zigbeeSend::?relay
      21  exit_send
       6  exit_send::?relay
     330  wait_for
       6  wait_for::?relay

 
 4 162 bytes in segment BANKED_CODE
    96 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   757 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    96 bytes of CODE     memory
   757 bytes of CONST    memory
     0 bytes of DATA     memory (+ 1 byte shared)
 4 162 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
