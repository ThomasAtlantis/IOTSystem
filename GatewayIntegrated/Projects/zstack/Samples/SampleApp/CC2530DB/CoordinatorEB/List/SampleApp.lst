###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               23/Jul/2019  11:21:08
# Copyright 2004-2018 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#    Command line       =  
#        -f C:\Users\MAC\AppData\Local\Temp\EW1CD.tmp
#        (F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
#        -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D
#        HAL_UART_DMA=1 -D HAL_UART_ISR=2 -D HAL_LCD=FALSE -lC
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFF00
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\Source\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ohz --no_code_motion)
#    Locale             =  Chinese (Simplified)_CHN.936
#    List file          =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\SampleApp.lst
#    Object file        =  
#        F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\SampleApp.r51
#
###############################################################################

F:\IAR\8051_work\IOTSystem\GatewayIntegrated\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50          	SW1:  Sends a flash command to all devices in Group 1.
     51          	SW2:  Adds/Removes (toggles) this device in and out
     52          		  of Group 1.  This will enable and disable the
     53          		  reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "OSAL_Nv.h"
     61          #include "ZGlobals.h"
     62          #include "AF.h"
     63          #include "aps_groups.h"
     64          #include "ZDApp.h"
     65          
     66          #include "SampleApp.h"
     67          #include "SampleAppHw.h"
     68          
     69          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     70          
     71          /* HAL */
     72          #include "hal_lcd.h"
     73          #include "hal_led.h"
     74          #include "hal_key.h"
     75          #include "hal_uart.h"
     76          #include "MT_UART.h"
     77          
     78          /* SYS */
     79          #include <string.h>
     80          #include <stdio.h>
     81          #include <stdarg.h>
     82          
     83          #define UartDefaultRxLen 64
     84          #define UartDefaultTxLen 64
     85          #define Key_S1 P0_0
     86          #define Key_S2 P0_1
     87          #define Key_Active 0
     88          #define LED_RED P1_0
     89          #define LED_YELLOW P1_1
     90          #define LED_ORANGE P1_4
     91          
     92          // ¿ÉÐÐ·¶Î§£º0x0401 ¡ª 0x0FFF
     93          #define ZD_NV_IP_ID 0x0440
     94          #define ZD_NV_PORT_ID 0x0430
     95          #define ZD_NV_SSID_ID 0x0420
     96          #define ZD_NV_PSWD_ID 0x0410
     97          
     98          // ³¤¶È¶¨Òå£¬ÐèÎª4µÄÕûÊý±¶
     99          // Êµ¼Ê³¤¶È <= LENGTH - 1
    100          #define SSID_MAX_LENGTH 20
    101          #define PSWD_MAX_LENGTH 20
    102          #define PORT_MAX_LENGTH 8
    103          #define IP_MAX_LENGTH   16
    104          
    105          #define isPressed(x) (x == Key_Active)
    106          #define print(x,...) _UARTSend(1,x,##__VA_ARGS__)
    107          #define debug(x,...) _UARTSend(0,x,##__VA_ARGS__)
    108          #define debug_and_print(x,...) do{\
    109          	_UARTSend(0,x,##__VA_ARGS__);\
    110          	_UARTSend(1,x,##__VA_ARGS__);\
    111          }while(0)
    112          
    113          void _UARTSend(uint8 port, uint8 *fmt, ...);
    114          void _UARTRead(uint8 port, uint8 *buf, uint16 *len);
    115          void _delay_us(uint16 n);
    116          void _delay_ms(uint16 n);
    117          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout);
    118          void exit_send(void);
    119          uint16 WiFiRecv(uint8 *buff);
    120          uint8 WiFiSend(uint8 *fmt, ...);
    121          
    122          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    123          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
    124          {
    125            SAMPLEAPP_PERIODIC_CLUSTERID,
    126            SAMPLEAPP_FLASH_CLUSTERID,
    127          };
    128          

   \                                 In  segment XDATA_ROM_C, align 1
    129          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    130          {
    131            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    132            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    133            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    134            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    135            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    136            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    137            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    138            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    139            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    140          };
    141          
    142          // This is the Endpoint/Interface description.  It is defined here, but
    143          // filled-in in SampleApp_Init().  Another way to go would be to fill
    144          // in the structure here and make it a "const" (in code space).  The
    145          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * EXTERNAL VARIABLES
    150           */
    151          
    152          /*********************************************************************
    153           * EXTERNAL FUNCTIONS
    154           */
    155          
    156          /*********************************************************************
    157           * LOCAL VARIABLES
    158           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160          						  // This variable will be received when
    161          						  // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          afAddrType_t SampleApp_Flash_DstAddr; //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          aps_Group_t SampleApp_Group; //×é
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    173          
    174          /*********************************************************************
    175           * LOCAL FUNCTIONS
    176           */
    177          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    178          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    179          void SampleApp_SendPeriodicMessage( void );
    180          void SampleApp_SendFlashMessage( uint16 flashTime );
    181          void SampleApp_SendGroupMessage(void); //Íø·ä×é²¥Í¨Ñ¶·¢ËÍº¯Êý¶¨Òå.
    182          
    183          /*********************************************************************
    184           * NETWORK LAYER CALLBACKS
    185           */
    186          
    187          /*********************************************************************
    188           * PUBLIC FUNCTIONS
    189           */
    190          
    191          /*********************************************************************
    192           * @fn      SampleApp_Init
    193           *
    194           * @brief   Initialization function for the Generic App Task.
    195           *          This is called during initialization and should contain
    196           *          any application specific initialization (ie. hardware
    197           *          initialization/setup, table initialization, power up
    198           *          notificaiton ... ).
    199           *
    200           * @param   task_id - the ID assigned by OSAL.  This ID should be
    201           *                    used to send messages and set timers.
    202           *
    203           * @return  none
    204           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    205          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    206          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV       A,R1
   \   000006   FE           MOV       R6,A
    207            SampleApp_TaskID = task_id;
   \   000007   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX      @DPTR,A
    208            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV       DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV       A,#0x1
   \   000010   F0           MOVX      @DPTR,A
    209            SampleApp_TransID = 0;
   \   000011   90....       MOV       DPTR,#SampleApp_TransID
   \   000014   E4           CLR       A
   \   000015   F0           MOVX      @DPTR,A
    210            
    211            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL     `??MT_UartInit::?relay`; Banked call to: MT_UartInit
    212            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV       A,R6
   \   00001A   F9           MOV       R1,A
   \   00001B   12....       LCALL     `??MT_UartRegisterTaskID::?relay`; Banked call to: MT_UartRegisterTaskID
    213            
    214            // Device hardware initialization can be added here or in main() (Zmain.c).
    215            // If the hardware is application specific - add it here.
    216            // If the hardware is other parts of the device add it in main().
    217          
    218           #if defined ( BUILD_ALL_DEVICES )
    219            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    220            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    221            // together - if they are - we will start up a coordinator. Otherwise,
    222            // the device will start as a router.
    223            if ( readCoordinatorJumper() )
    224          	zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    225            else
    226          	zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    227          #endif // BUILD_ALL_DEVICES
    228          
    229          #if defined ( HOLD_AUTO_START )
    230            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    231            //  from starting the device and wait for the application to
    232            //  start the device.
    233            ZDOInitDevice(0);
    234          #endif
    235          
    236            // Setup for the periodic message's destination address
    237            // Broadcast to everyone
    238            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001E   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000021   740F         MOV       A,#0xf
   \   000023   F0           MOVX      @DPTR,A
    239            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000024   A3           INC       DPTR
   \   000025   7414         MOV       A,#0x14
   \   000027   F0           MOVX      @DPTR,A
    240            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000028   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   00002B   74FF         MOV       A,#-0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   F0           MOVX      @DPTR,A
    241          
    242            // Setup for the flash command's destination address - Group 1
    243            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000030   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000033   7401         MOV       A,#0x1
   \   000035   F0           MOVX      @DPTR,A
    244            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000036   A3           INC       DPTR
   \   000037   7414         MOV       A,#0x14
   \   000039   F0           MOVX      @DPTR,A
    245            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003A   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003D   12....       LCALL     ?Subroutine4 & 0xFFFF
    246            
    247          
    248            // Fill out the endpoint description.
    249            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \                     ??CrossCallReturnLabel_59:
   \   000040   90....       MOV       DPTR,#SampleApp_epDesc
   \   000043   7414         MOV       A,#0x14
   \   000045   F0           MOVX      @DPTR,A
    250            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000046   A3           INC       DPTR
   \   000047   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000049   F0           MOVX      @DPTR,A
   \   00004A   A3           INC       DPTR
   \   00004B   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00004D   F0           MOVX      @DPTR,A
    251            SampleApp_epDesc.simpleDesc
    252          			= (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00004E   A3           INC       DPTR
   \   00004F   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000051   F0           MOVX      @DPTR,A
   \   000052   A3           INC       DPTR
   \   000053   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000055   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    253            SampleApp_epDesc.latencyReq = noLatencyReqs;
    254          
    255            // Register the endpoint description with the AF
    256            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_55:
   \   000058                ; Setup parameters for call to function afRegister
   \   000058   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   00005A   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00005C   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    257          
    258            // Register for all key events - This app will handle all key events
    259            RegisterForKeys( SampleApp_TaskID );
   \   00005F                ; Setup parameters for call to function RegisterForKeys
   \   00005F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000062   E0           MOVX      A,@DPTR
   \   000063   F9           MOV       R1,A
   \   000064   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    260          
    261            // By default, all devices start out in Group 1
    262            SampleApp_Group.ID = SAMPLEAPP_FLASH_GROUP;//0x0001;
   \   000067   90....       MOV       DPTR,#SampleApp_Group
   \   00006A   12....       LCALL     ?Subroutine4 & 0xFFFF
    263            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_60:
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000070   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000073   F5..         MOV       ?V2,A
   \   000075   78..         MOV       R0,#?V0
   \   000077   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007A   7C07         MOV       R4,#0x7
   \   00007C   7D00         MOV       R5,#0x0
   \   00007E   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000080   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000082   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000085   7403         MOV       A,#0x3
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    264            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00008A                ; Setup parameters for call to function aps_AddGroup
   \   00008A   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00008C   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00008E   7914         MOV       R1,#0x14
   \   000090   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    265            
    266          
    267          #if defined ( LCD_SUPPORTED )
    268            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    269          #endif
    270            osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_UART_EVT);
   \   000093                ; Setup parameters for call to function osal_set_event
   \   000093   7A02         MOV       R2,#0x2
   \   000095   12....       LCALL     ??Subroutine25_0 & 0xFFFF
    271          }
   \                     ??CrossCallReturnLabel_52:
   \   000098   7F03         MOV       R7,#0x3
   \   00009A   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   7B00         MOV       R3,#0x0
   \   000002   90....       MOV       DPTR,#SampleApp_TaskID
   \   000005   E0           MOVX      A,@DPTR
   \   000006   F9           MOV       R1,A
   \   000007   12....       LCALL     `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7402         MOV       A,#0x2
   \   000002                REQUIRE ??Subroutine26_0
   \   000002                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    272          
    273          /*********************************************************************
    274           * @fn      SampleApp_ProcessEvent
    275           *
    276           * @brief   Generic Application Task event processor.  This function
    277           *          is called to process all events for the task.  Events
    278           *          include timers, messages and any other user defined events.
    279           *
    280           * @param   task_id  - The OSAL assigned task ID.
    281           * @param   events - events to process.  This is a bit map and can
    282           *                   contain more than one event.
    283           *
    284           * @return  none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 159
   \   000005   7461         MOV       A,#0x61
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
   \   00000C   EB           MOV       A,R3
   \   00000D   FF           MOV       R7,A
    288            afIncomingMSGPacket_t *MSGpkt;
    289          	halUARTCfg_t uartConfig;
    290          	uint8 _buffer[UartDefaultRxLen];
    291          	uint8 InitNVStatus, readNVStatus, writeNVStatus;
    292          	uint8 SSID[SSID_MAX_LENGTH], PSWD[PSWD_MAX_LENGTH];
    293          	uint8 PORT[PORT_MAX_LENGTH], MYIP[IP_MAX_LENGTH];
    294          	uint16 length, nv_id, nv_len, prefix_len;
    295            (void)task_id;  // Intentionally unreferenced parameter
    296          
    297            if ( events & SYS_EVENT_MSG )
   \   00000E   5480         ANL       A,#0x80
   \   000010   6079         JZ        ??SampleApp_ProcessEvent_0
    298            {
    299          	MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   802B         SJMP      ??SampleApp_ProcessEvent_1
    300          	while ( MSGpkt )
    301          	{
    302          	  switch ( MSGpkt->hdr.event )
    303          	  {
    304          		// Received when a key is pressed
    305          		case KEY_CHANGE:
    306          		  SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    307          		  break;
    308          
    309          		// Received when a messages is received (OTA) for this endpoint
    310          		case AF_INCOMING_MSG_CMD:
    311          		  SampleApp_MessageMSGCB( MSGpkt );
    312          		  break;
    313          
    314          		// Received whenever the device changes state in the network
    315          		case ZDO_STATE_CHANGE:
    316          		  SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   90....       MOV       DPTR,#SampleApp_NwkState
   \   000019   F0           MOVX      @DPTR,A
    317          		  if ( (SampleApp_NwkState == DEV_ZB_COORD)||
    318          			   (SampleApp_NwkState == DEV_ROUTER)
    319          			  || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   00001A   6409         XRL       A,#0x9
   \   00001C   600A         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6407         XRL       A,#0x7
   \   000021   6005         JZ        ??SampleApp_ProcessEvent_3
   \   000023   E0           MOVX      A,@DPTR
   \   000024   6406         XRL       A,#0x6
   \   000026   7010         JNZ       ??SampleApp_ProcessEvent_4
    320          		  {
    321          			// Start sending the periodic message in a regular interval.
    322          			osal_start_timerEx( SampleApp_TaskID,
    323          							  SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    324          							  SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000028                ; Setup parameters for call to function osal_start_timerEx
   \   000028   7C88         MOV       R4,#-0x78
   \   00002A   7D13         MOV       R5,#0x13
   \   00002C   7A01         MOV       R2,#0x1
   \   00002E   7B00         MOV       R3,#0x0
   \   000030   90....       MOV       DPTR,#SampleApp_TaskID
   \   000033   E0           MOVX      A,@DPTR
   \   000034   F9           MOV       R1,A
   \   000035   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    325          		  }
    326          		  else
    327          		  {
    328          			// Device is no longer in the network
    329          		  }
    330          		  break;
    331          
    332          		default:
    333          		  break;
    334          	  }
    335          
    336          	  // Release the memory
    337          	  osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000038                ; Setup parameters for call to function osal_msg_deallocate
   \   000038   AA..         MOV       R2,?V0
   \   00003A   AB..         MOV       R3,?V1
   \   00003C   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    338          
    339          	  // Next - if one is available
    340          	  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003F                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003F   90....       MOV       DPTR,#SampleApp_TaskID
   \   000042   E0           MOVX      A,@DPTR
   \   000043   F9           MOV       R1,A
   \   000044   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000047   8A..         MOV       ?V0,R2
   \   000049   8B..         MOV       ?V1,R3
   \   00004B   E5..         MOV       A,?V0
   \   00004D   45..         ORL       A,?V1
   \   00004F   6032         JZ        ??SampleApp_ProcessEvent_5
   \   000051   85..82       MOV       DPL,?V0
   \   000054   85..83       MOV       DPH,?V1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   24E6         ADD       A,#-0x1a
   \   00005A   601E         JZ        ??SampleApp_ProcessEvent_6
   \   00005C   245A         ADD       A,#0x5a
   \   00005E   6006         JZ        ??SampleApp_ProcessEvent_7
   \   000060   24EF         ADD       A,#-0x11
   \   000062   60B0         JZ        ??SampleApp_ProcessEvent_2
   \   000064   80D2         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000066                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000066   A3           INC       DPTR
   \   000067   A3           INC       DPTR
   \   000068   A3           INC       DPTR
   \   000069   E0           MOVX      A,@DPTR
   \   00006A   FA           MOV       R2,A
   \   00006B   85..82       MOV       DPL,?V0
   \   00006E   85..83       MOV       DPH,?V1
   \   000071   A3           INC       DPTR
   \   000072   A3           INC       DPTR
   \   000073   E0           MOVX      A,@DPTR
   \   000074   F9           MOV       R1,A
   \   000075   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000078   80BE         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00007A                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   00007A   AA..         MOV       R2,?V0
   \   00007C   AB..         MOV       R3,?V1
   \   00007E   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   000081   80B5         SJMP      ??SampleApp_ProcessEvent_4
    341          	}
    342          
    343          	// return unprocessed events
    344          	return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000083   EE           MOV       A,R6
   \   000084   FA           MOV       R2,A
   \   000085   EF           MOV       A,R7
   \   000086   6480         XRL       A,#0x80
   \   000088   02....       LJMP      ??SampleApp_ProcessEvent_8 & 0xFFFF
    345            }
    346          
    347            // Send a message out - This event is generated by a timer
    348            //  (setup in SampleApp_Init()).
    349           //  if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
    350           //  {
    351          	// // Send the periodic message
    352            
    353          	// SampleApp_SendGroupMessage();//ÖÜÆÚÐÔ×é²¥
    354          	
    355          	// // Setup to send message again in normal period (+ a little jitter)
    356          	// osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    357          	// 	(SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
    358          
    359          	// // return unprocessed events
    360          	// return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
    361           //  }
    362          
    363            if (events & SAMPLEAPP_INITIALIZE_UART_EVT) {
   \                     ??SampleApp_ProcessEvent_0:
   \   00008B   EA           MOV       A,R2
   \   00008C   5402         ANL       A,#0x2
   \   00008E   7003         JNZ       $+5
   \   000090   02....       LJMP      ??SampleApp_ProcessEvent_9 & 0xFFFF
    364          
    365          		// initialize uart_1
    366          		uartConfig.configured           = TRUE;
   \   000093   740A         MOV       A,#0xa
   \   000095   12....       LCALL     ?XSTACK_DISP0_8
   \   000098   7401         MOV       A,#0x1
   \   00009A   F0           MOVX      @DPTR,A
    367          		uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   00009B   740B         MOV       A,#0xb
   \   00009D   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A0   7404         MOV       A,#0x4
   \   0000A2   F0           MOVX      @DPTR,A
    368          		uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   0000A3   740C         MOV       A,#0xc
   \   0000A5   12....       LCALL     ?XSTACK_DISP0_8
   \   0000A8   E4           CLR       A
   \   0000A9   F0           MOVX      @DPTR,A
    369          		uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   0000AA   740D         MOV       A,#0xd
   \   0000AC   12....       LCALL     ?XSTACK_DISP0_8
   \   0000AF   7440         MOV       A,#0x40
   \   0000B1   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    370          		uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \                     ??CrossCallReturnLabel_56:
   \   0000B4   7414         MOV       A,#0x14
   \   0000B6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000B9   7480         MOV       A,#-0x80
   \   0000BB   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    371          		uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \                     ??CrossCallReturnLabel_57:
   \   0000BE   741C         MOV       A,#0x1c
   \   0000C0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C3   7480         MOV       A,#-0x80
   \   0000C5   12....       LCALL     ??Subroutine26_0 & 0xFFFF
    372          		uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \                     ??CrossCallReturnLabel_58:
   \   0000C8   740F         MOV       A,#0xf
   \   0000CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CD   7406         MOV       A,#0x6
   \   0000CF   F0           MOVX      @DPTR,A
    373          		uartConfig.intEnable            = TRUE;
   \   0000D0   7420         MOV       A,#0x20
   \   0000D2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D5   7401         MOV       A,#0x1
   \   0000D7   F0           MOVX      @DPTR,A
    374          		uartConfig.callBackFunc         = NULL;
   \   0000D8   7425         MOV       A,#0x25
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   E4           CLR       A
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   F0           MOVX      @DPTR,A
    375          		HalUARTOpen(HAL_UART_PORT_1, &uartConfig);
   \   0000E1                ; Setup parameters for call to function HalUARTOpen
   \   0000E1   740A         MOV       A,#0xa
   \   0000E3   12....       LCALL     ?XSTACK_DISP101_8
   \   0000E6   7901         MOV       R1,#0x1
   \   0000E8   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    376          		debug("UART_1 INITIALIZED!\r\n");
   \   0000EB                ; Setup parameters for call to function _UARTSend
   \   0000EB   7A..         MOV       R2,#`?<Constant "UART_1 INITIALIZED!\\r\\n">` & 0xff
   \   0000ED   7B..         MOV       R3,#(`?<Constant "UART_1 INITIALIZED!\\r\\n">` >> 8) & 0xff
   \   0000EF   7900         MOV       R1,#0x0
   \   0000F1   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    377          
    378          		if (isPressed(Key_S1)) {
   \   0000F4   A280         MOV       C,0x80.0
   \   0000F6   400D         JC        ??SampleApp_ProcessEvent_10
    379          			debug("Enter AP Mode\r\n");
   \   0000F8                ; Setup parameters for call to function _UARTSend
   \   0000F8   7A..         MOV       R2,#`?<Constant "Enter AP Mode\\r\\n">` & 0xff
   \   0000FA   7B..         MOV       R3,#(`?<Constant "Enter AP Mode\\r\\n">` >> 8) & 0xff
   \   0000FC   7900         MOV       R1,#0x0
   \   0000FE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    380          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \   000101                ; Setup parameters for call to function osal_set_event
   \   000101   7A10         MOV       R2,#0x10
   \   000103   800B         SJMP      ??SampleApp_ProcessEvent_11
    381          		} else {
    382          			debug("Enter STA Mode\r\n");
   \                     ??SampleApp_ProcessEvent_10:
   \   000105                ; Setup parameters for call to function _UARTSend
   \   000105   7A..         MOV       R2,#`?<Constant "Enter STA Mode\\r\\n">` & 0xff
   \   000107   7B..         MOV       R3,#(`?<Constant "Enter STA Mode\\r\\n">` >> 8) & 0xff
   \   000109   7900         MOV       R1,#0x0
   \   00010B   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    383          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   00010E                ; Setup parameters for call to function osal_set_event
   \   00010E   7A04         MOV       R2,#0x4
    384          		}
   \                     ??SampleApp_ProcessEvent_11:
   \   000110   12....       LCALL     ??Subroutine25_0 & 0xFFFF
    385          		return (events ^ SAMPLEAPP_INITIALIZE_UART_EVT);
   \                     ??CrossCallReturnLabel_53:
   \   000113   EE           MOV       A,R6
   \   000114   6402         XRL       A,#0x2
   \   000116   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    386          	}
    387          
    388          	if (events & SAMPLEAPP_CONFIGURE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_9:
   \   000119   EA           MOV       A,R2
   \   00011A   5410         ANL       A,#0x10
   \   00011C   7003         JNZ       $+5
   \   00011E   02....       LJMP      ??SampleApp_ProcessEvent_13 & 0xFFFF
    389          		exit_send();
   \   000121                ; Setup parameters for call to function exit_send
   \   000121   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    390          		_UARTRead(HAL_UART_PORT_1, _buffer, &length);
   \   000124                ; Setup parameters for call to function _UARTRead
   \   000124   AC..         MOV       R4,?XSP + 0
   \   000126   AD..         MOV       R5,?XSP + 1
   \   000128   745F         MOV       A,#0x5f
   \   00012A   12....       LCALL     ?XSTACK_DISP101_8
   \   00012D   7901         MOV       R1,#0x1
   \   00012F   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
    391          		do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_14:
   \   000132   12....       LCALL     ?Subroutine9 & 0xFFFF
    392          		while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_37:
   \   000135   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000138   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00013A   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00013C   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   00013E   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   000140   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000143   12....       LCALL     ?DEALLOC_XSTACK8
   \   000146   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_14
    393          		do debug_and_print("AT+CWMODE=2\r\n");
   \                     ??SampleApp_ProcessEvent_15:
   \   000149   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=2\\r\\n">` & 0xff
   \   00014C   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=2\\r\\n">` >> 8) & 0xff
   \   00014F                ; Setup parameters for call to function _UARTSend
   \   00014F   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    394          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_39:
   \   000152   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000155   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000158   12....       LCALL     ?DEALLOC_XSTACK8
   \   00015B   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_15
    395          		do debug_and_print("AT+CWSAP=\"ESP8266\",\"123456\",11,0\r\n"); // TODO: ADD MACRO
   \                     ??SampleApp_ProcessEvent_16:
   \   00015E   75....       MOV       ?V0,#`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` & 0xff
   \   000161   75....       MOV       ?V1,#(`?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">` >> 8) & 0xff
   \   000164                ; Setup parameters for call to function _UARTSend
   \   000164   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    396          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_40:
   \   000167   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016A   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00016D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000170   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_16
    397          		do debug_and_print("AT+CIPMODE=0\r\n");
   \                     ??SampleApp_ProcessEvent_17:
   \   000173   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=0\\r\\n">` & 0xff
   \   000176   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=0\\r\\n">` >> 8) & 0xff
   \   000179                ; Setup parameters for call to function _UARTSend
   \   000179   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    398          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_41:
   \   00017C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00017F   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000182   12....       LCALL     ?DEALLOC_XSTACK8
   \   000185   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_17
    399          		do debug_and_print("AT+CIPMUX=1\r\n");
   \                     ??SampleApp_ProcessEvent_18:
   \   000188   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   00018B   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   00018E                ; Setup parameters for call to function _UARTSend
   \   00018E   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    400          		while (wait_for("OK\r\n", "ERROR\r\n", 0)); 
   \                     ??CrossCallReturnLabel_42:
   \   000191   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000194   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000197   12....       LCALL     ?DEALLOC_XSTACK8
   \   00019A   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_18
    401          		do debug_and_print("AT+CIPSERVER=1,8266\r\n");
   \                     ??SampleApp_ProcessEvent_19:
   \   00019D   75....       MOV       ?V0,#`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` & 0xff
   \   0001A0   75....       MOV       ?V1,#(`?<Constant "AT+CIPSERVER=1,8266\\r\\n">` >> 8) & 0xff
   \   0001A3                ; Setup parameters for call to function _UARTSend
   \   0001A3   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    402          		while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_43:
   \   0001A6   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A9   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0001AC   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001AF   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_19
    403          		do {
    404          			while (wait_for("0,CONNECT\r\n", "0,CONNECT FAIL\r\n", 0));
   \                     ??SampleApp_ProcessEvent_20:
   \   0001B2                ; Setup parameters for call to function wait_for
   \   0001B2   78..         MOV       R0,#?V0
   \   0001B4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001B7   7C..         MOV       R4,#`?<Constant "0,CONNECT FAIL\\r\\n">` & 0xff
   \   0001B9   7D..         MOV       R5,#(`?<Constant "0,CONNECT FAIL\\r\\n">` >> 8) & 0xff
   \   0001BB   7A..         MOV       R2,#`?<Constant "0,CONNECT\\r\\n">` & 0xff
   \   0001BD   7B..         MOV       R3,#(`?<Constant "0,CONNECT\\r\\n">` >> 8) & 0xff
   \   0001BF   12....       LCALL     ??Subroutine30_0 & 0xFFFF
    405          		} while (WiFiSend("CTS\r\n")); // ¸æËßAPPÁ¬½ÓÒÑ½¨Á¢£¬¶þ´ÎÎÕÊÖ
   \                     ??CrossCallReturnLabel_75:
   \   0001C2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0001C5   B900EA       CJNE      R1,#0x0,??SampleApp_ProcessEvent_20
   \   0001C8                ; Setup parameters for call to function WiFiSend
   \   0001C8   7A..         MOV       R2,#`?<Constant "CTS\\r\\n">` & 0xff
   \   0001CA   7B..         MOV       R3,#(`?<Constant "CTS\\r\\n">` >> 8) & 0xff
   \   0001CC   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
   \   0001CF   E9           MOV       A,R1
   \   0001D0   70E0         JNZ       ??SampleApp_ProcessEvent_20
    406          		while (1) {
    407          			length = WiFiRecv(_buffer);
   \                     ??SampleApp_ProcessEvent_21:
   \   0001D2                ; Setup parameters for call to function WiFiRecv
   \   0001D2   745F         MOV       A,#0x5f
   \   0001D4   12....       LCALL     ?XSTACK_DISP101_8
   \   0001D7   12....       LCALL     `??WiFiRecv::?relay`; Banked call to: WiFiRecv
   \   0001DA   85..82       MOV       DPL,?XSP + 0
   \   0001DD   85..83       MOV       DPH,?XSP + 1
   \   0001E0   EA           MOV       A,R2
   \   0001E1   F0           MOVX      @DPTR,A
   \   0001E2   A3           INC       DPTR
   \   0001E3   EB           MOV       A,R3
   \   0001E4   F0           MOVX      @DPTR,A
    408          			if (length > 6) { // min: SSIDx\r\n ÔÊÐí19Î»³¤¶È
   \   0001E5   85..82       MOV       DPL,?XSP + 0
   \   0001E8   85..83       MOV       DPH,?XSP + 1
   \   0001EB   C3           CLR       C
   \   0001EC   E0           MOVX      A,@DPTR
   \   0001ED   9407         SUBB      A,#0x7
   \   0001EF   A3           INC       DPTR
   \   0001F0   E0           MOVX      A,@DPTR
   \   0001F1   9400         SUBB      A,#0x0
   \   0001F3   5003         JNC       $+5
   \   0001F5   02....       LJMP      ??SampleApp_ProcessEvent_22 & 0xFFFF
    409          				if (osal_memcmp(_buffer, "IP", 2)) {
   \   0001F8                ; Setup parameters for call to function osal_memcmp
   \   0001F8   75....       MOV       ?V0,#`?<Constant "IP">` & 0xff
   \   0001FB   75....       MOV       ?V1,#(`?<Constant "IP">` >> 8) & 0xff
   \   0001FE   75..00       MOV       ?V2,#0x0
   \   000201   78..         MOV       R0,#?V0
   \   000203   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000206   7C02         MOV       R4,#0x2
   \   000208   7D00         MOV       R5,#0x0
   \   00020A   7462         MOV       A,#0x62
   \   00020C   12....       LCALL     ?XSTACK_DISP0_8
   \   00020F   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000212   12....       LCALL     ?DEALLOC_XSTACK8
   \   000215   E9           MOV       A,R1
   \   000216   6016         JZ        ??SampleApp_ProcessEvent_23
    410          					nv_id = ZD_NV_IP_ID;
   \   000218   75..40       MOV       ?V4,#0x40
   \   00021B   75..04       MOV       ?V5,#0x4
    411          					nv_len = IP_MAX_LENGTH;
   \   00021E   75..10       MOV       ?V0,#0x10
   \   000221   75..00       MOV       ?V1,#0x0
    412          					prefix_len = 2;
   \   000224   75..02       MOV       ?V6,#0x2
    413          					WiFiSend("GOT IP\r\n");
   \   000227                ; Setup parameters for call to function WiFiSend
   \   000227   7A..         MOV       R2,#`?<Constant "GOT IP\\r\\n">` & 0xff
   \   000229   7B..         MOV       R3,#(`?<Constant "GOT IP\\r\\n">` >> 8) & 0xff
   \   00022B   02....       LJMP      ??SampleApp_ProcessEvent_24 & 0xFFFF
    414          				} else 
    415          				if (osal_memcmp(_buffer, "PORT", 4)) {
   \                     ??SampleApp_ProcessEvent_23:
   \   00022E                ; Setup parameters for call to function osal_memcmp
   \   00022E   75....       MOV       ?V0,#`?<Constant "PORT">` & 0xff
   \   000231   75....       MOV       ?V1,#(`?<Constant "PORT">` >> 8) & 0xff
   \   000234   78..         MOV       R0,#?V0
   \   000236   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000239   7C04         MOV       R4,#0x4
   \   00023B   7D00         MOV       R5,#0x0
   \   00023D   7462         MOV       A,#0x62
   \   00023F   12....       LCALL     ?XSTACK_DISP0_8
   \   000242   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000245   12....       LCALL     ?DEALLOC_XSTACK8
   \   000248   E9           MOV       A,R1
   \   000249   6015         JZ        ??SampleApp_ProcessEvent_25
    416          					nv_id = ZD_NV_PORT_ID;
   \   00024B   75..30       MOV       ?V4,#0x30
   \   00024E   75..04       MOV       ?V5,#0x4
    417          					nv_len = PORT_MAX_LENGTH;
   \   000251   75..08       MOV       ?V0,#0x8
   \   000254   75..00       MOV       ?V1,#0x0
    418          					prefix_len = 4;
   \   000257   75..04       MOV       ?V6,#0x4
    419          					WiFiSend("GOT PORT\r\n");
   \   00025A                ; Setup parameters for call to function WiFiSend
   \   00025A   7A..         MOV       R2,#`?<Constant "GOT PORT\\r\\n">` & 0xff
   \   00025C   7B..         MOV       R3,#(`?<Constant "GOT PORT\\r\\n">` >> 8) & 0xff
   \   00025E   8065         SJMP      ??SampleApp_ProcessEvent_24
    420          				} else 
    421          				if (osal_memcmp(_buffer, "SSID", 4)) {
   \                     ??SampleApp_ProcessEvent_25:
   \   000260                ; Setup parameters for call to function osal_memcmp
   \   000260   75....       MOV       ?V0,#`?<Constant "SSID">` & 0xff
   \   000263   75....       MOV       ?V1,#(`?<Constant "SSID">` >> 8) & 0xff
   \   000266   78..         MOV       R0,#?V0
   \   000268   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00026B   7C04         MOV       R4,#0x4
   \   00026D   7D00         MOV       R5,#0x0
   \   00026F   7462         MOV       A,#0x62
   \   000271   12....       LCALL     ?XSTACK_DISP0_8
   \   000274   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000277   12....       LCALL     ?DEALLOC_XSTACK8
   \   00027A   E9           MOV       A,R1
   \   00027B   6015         JZ        ??SampleApp_ProcessEvent_26
    422          					nv_id = ZD_NV_SSID_ID;
   \   00027D   75..20       MOV       ?V4,#0x20
   \   000280   75..04       MOV       ?V5,#0x4
    423          					nv_len = SSID_MAX_LENGTH;
   \   000283   75..14       MOV       ?V0,#0x14
   \   000286   75..00       MOV       ?V1,#0x0
    424          					prefix_len = 4;
   \   000289   75..04       MOV       ?V6,#0x4
    425          					WiFiSend("GOT SSID\r\n");
   \   00028C                ; Setup parameters for call to function WiFiSend
   \   00028C   7A..         MOV       R2,#`?<Constant "GOT SSID\\r\\n">` & 0xff
   \   00028E   7B..         MOV       R3,#(`?<Constant "GOT SSID\\r\\n">` >> 8) & 0xff
   \   000290   8033         SJMP      ??SampleApp_ProcessEvent_24
    426          				} else 
    427          				if (osal_memcmp(_buffer, "PSWD", 4)) {
   \                     ??SampleApp_ProcessEvent_26:
   \   000292                ; Setup parameters for call to function osal_memcmp
   \   000292   75....       MOV       ?V0,#`?<Constant "PSWD">` & 0xff
   \   000295   75....       MOV       ?V1,#(`?<Constant "PSWD">` >> 8) & 0xff
   \   000298   78..         MOV       R0,#?V0
   \   00029A   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00029D   7C04         MOV       R4,#0x4
   \   00029F   7D00         MOV       R5,#0x0
   \   0002A1   7462         MOV       A,#0x62
   \   0002A3   12....       LCALL     ?XSTACK_DISP0_8
   \   0002A6   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002A9   12....       LCALL     ?DEALLOC_XSTACK8
   \   0002AC   E9           MOV       A,R1
   \   0002AD   7003         JNZ       $+5
   \   0002AF   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    428          					nv_id = ZD_NV_PSWD_ID;
   \   0002B2   75..10       MOV       ?V4,#0x10
   \   0002B5   75..04       MOV       ?V5,#0x4
    429          					nv_len = PSWD_MAX_LENGTH;
   \   0002B8   75..14       MOV       ?V0,#0x14
   \   0002BB   75..00       MOV       ?V1,#0x0
    430          					prefix_len = 4;
   \   0002BE   75..04       MOV       ?V6,#0x4
    431          					WiFiSend("GOT PSWD\r\n");
   \   0002C1                ; Setup parameters for call to function WiFiSend
   \   0002C1   7A..         MOV       R2,#`?<Constant "GOT PSWD\\r\\n">` & 0xff
   \   0002C3   7B..         MOV       R3,#(`?<Constant "GOT PSWD\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_24:
   \   0002C5   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    432          				} else continue;
    433          				length -= 2; // \r\n
   \   0002C8   85..82       MOV       DPL,?XSP + 0
   \   0002CB   85..83       MOV       DPH,?XSP + 1
   \   0002CE   E0           MOVX      A,@DPTR
   \   0002CF   24FE         ADD       A,#-0x2
   \   0002D1   F0           MOVX      @DPTR,A
   \   0002D2   A3           INC       DPTR
   \   0002D3   E0           MOVX      A,@DPTR
   \   0002D4   34FF         ADDC      A,#-0x1
   \   0002D6   F0           MOVX      @DPTR,A
    434          				while (length < nv_len + prefix_len + 2) _buffer[length ++] = '\0';
   \   0002D7   E5..         MOV       A,?V0
   \   0002D9   25..         ADD       A,?V6
   \   0002DB   F8           MOV       R0,A
   \   0002DC   E4           CLR       A
   \   0002DD   3400         ADDC      A,#0x0
   \   0002DF   F9           MOV       R1,A
   \   0002E0   E8           MOV       A,R0
   \   0002E1   2402         ADD       A,#0x2
   \   0002E3   FA           MOV       R2,A
   \   0002E4   E4           CLR       A
   \   0002E5   39           ADDC      A,R1
   \   0002E6   FB           MOV       R3,A
   \   0002E7   85..82       MOV       DPL,?XSP + 0
   \   0002EA   85..83       MOV       DPH,?XSP + 1
   \   0002ED   E0           MOVX      A,@DPTR
   \   0002EE   F8           MOV       R0,A
   \   0002EF   A3           INC       DPTR
   \   0002F0   E0           MOVX      A,@DPTR
   \   0002F1   F9           MOV       R1,A
   \   0002F2   EA           MOV       A,R2
   \   0002F3   98           SUBB      A,R0
   \   0002F4   F8           MOV       R0,A
   \   0002F5   EB           MOV       A,R3
   \   0002F6   99           SUBB      A,R1
   \   0002F7   F9           MOV       R1,A
   \   0002F8   85..82       MOV       DPL,?XSP + 0
   \   0002FB   85..83       MOV       DPH,?XSP + 1
   \   0002FE   C3           CLR       C
   \   0002FF   E0           MOVX      A,@DPTR
   \   000300   9A           SUBB      A,R2
   \   000301   A3           INC       DPTR
   \   000302   E0           MOVX      A,@DPTR
   \   000303   9B           SUBB      A,R3
   \   000304   5033         JNC       ??SampleApp_ProcessEvent_27
   \   000306   85..82       MOV       DPL,?XSP + 0
   \   000309   85..83       MOV       DPH,?XSP + 1
   \   00030C   745F         MOV       A,#0x5f
   \   00030E   12....       LCALL     ?XSTACK_DISP101_8
   \   000311   8B..         MOV       ?V3,R3
   \   000313   E0           MOVX      A,@DPTR
   \   000314   2A           ADD       A,R2
   \   000315   FA           MOV       R2,A
   \   000316   A3           INC       DPTR
   \   000317   E0           MOVX      A,@DPTR
   \   000318   35..         ADDC      A,?V3
   \   00031A   8A82         MOV       DPL,R2
   \   00031C   F583         MOV       DPH,A
   \                     ??SampleApp_ProcessEvent_28:
   \   00031E   E4           CLR       A
   \   00031F   F0           MOVX      @DPTR,A
   \   000320   A3           INC       DPTR
   \   000321   E8           MOV       A,R0
   \   000322   24FF         ADD       A,#-0x1
   \   000324   18           DEC       R0
   \   000325   E9           MOV       A,R1
   \   000326   34FF         ADDC      A,#-0x1
   \   000328   F9           MOV       R1,A
   \   000329   48           ORL       A,R0
   \   00032A   70F2         JNZ       ??SampleApp_ProcessEvent_28
   \   00032C   85..82       MOV       DPL,?XSP + 0
   \   00032F   85..83       MOV       DPH,?XSP + 1
   \   000332   E0           MOVX      A,@DPTR
   \   000333   28           ADD       A,R0
   \   000334   F0           MOVX      @DPTR,A
   \   000335   A3           INC       DPTR
   \   000336   E0           MOVX      A,@DPTR
   \   000337   39           ADDC      A,R1
   \   000338   F0           MOVX      @DPTR,A
    435          				InitNVStatus = osal_nv_item_init(nv_id, nv_len, NULL);
   \                     ??SampleApp_ProcessEvent_27:
   \   000339                ; Setup parameters for call to function osal_nv_item_init
   \   000339   E4           CLR       A
   \   00033A   F5..         MOV       ?V3,A
   \   00033C   78..         MOV       R0,#?V2
   \   00033E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000341   AC..         MOV       R4,?V0
   \   000343   AD..         MOV       R5,?V1
   \   000345   AA..         MOV       R2,?V4
   \   000347   AB..         MOV       R3,?V5
   \   000349   12....       LCALL     ??Subroutine22_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00034C   12....       LCALL     ?DEALLOC_XSTACK8
    436          				writeNVStatus = osal_nv_write(nv_id, 0, nv_len, _buffer + prefix_len);
   \   00034F   745F         MOV       A,#0x5f
   \   000351   12....       LCALL     ?XSTACK_DISP0_8
   \   000354   E582         MOV       A,DPL
   \   000356   25..         ADD       A,?V6
   \   000358   F5..         MOV       ?V2,A
   \   00035A   E4           CLR       A
   \   00035B   3583         ADDC      A,DPH
   \   00035D   F5..         MOV       ?V3,A
   \   00035F                ; Setup parameters for call to function osal_nv_write
   \   00035F   78..         MOV       R0,#?V2
   \   000361   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000364   78..         MOV       R0,#?V0
   \   000366   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000369   7C00         MOV       R4,#0x0
   \   00036B   7D00         MOV       R5,#0x0
   \   00036D   AA..         MOV       R2,?V4
   \   00036F   AB..         MOV       R3,?V5
   \   000371   12....       LCALL     `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000374   7404         MOV       A,#0x4
   \   000376   12....       LCALL     ?DEALLOC_XSTACK8
    437          				HalUARTWrite(1, _buffer + prefix_len, nv_len);
   \   000379                ; Setup parameters for call to function HalUARTWrite
   \   000379   AC..         MOV       R4,?V0
   \   00037B   AD..         MOV       R5,?V1
   \   00037D   AA..         MOV       R2,?V2
   \   00037F   AB..         MOV       R3,?V3
   \   000381   7901         MOV       R1,#0x1
   \   000383   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    438          				(void) writeNVStatus;
   \   000386   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    439          			} else if (length == 4 && osal_memcmp(_buffer, (uint8 *)"OK\r\n", 4)) {
   \                     ??SampleApp_ProcessEvent_22:
   \   000389   85..82       MOV       DPL,?XSP + 0
   \   00038C   85..83       MOV       DPH,?XSP + 1
   \   00038F   E0           MOVX      A,@DPTR
   \   000390   6404         XRL       A,#0x4
   \   000392   7002         JNZ       ??SampleApp_ProcessEvent_29
   \   000394   A3           INC       DPTR
   \   000395   E0           MOVX      A,@DPTR
   \                     ??SampleApp_ProcessEvent_29:
   \   000396   6003         JZ        $+5
   \   000398   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
   \   00039B                ; Setup parameters for call to function osal_memcmp
   \   00039B   75....       MOV       ?V0,#`?<Constant "OK\\r\\n">` & 0xff
   \   00039E   75....       MOV       ?V1,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   0003A1   75..00       MOV       ?V2,#0x0
   \   0003A4   78..         MOV       R0,#?V0
   \   0003A6   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   0003A9   7C04         MOV       R4,#0x4
   \   0003AB   7D00         MOV       R5,#0x0
   \   0003AD   7462         MOV       A,#0x62
   \   0003AF   12....       LCALL     ?XSTACK_DISP0_8
   \   0003B2   12....       LCALL     ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0003B5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003B8   E9           MOV       A,R1
   \   0003B9   7003         JNZ       $+5
   \   0003BB   02....       LJMP      ??SampleApp_ProcessEvent_21 & 0xFFFF
    440          				WiFiSend("OVER\r\n");
   \   0003BE                ; Setup parameters for call to function WiFiSend
   \   0003BE   7A..         MOV       R2,#`?<Constant "OVER\\r\\n">` & 0xff
   \   0003C0   7B..         MOV       R3,#(`?<Constant "OVER\\r\\n">` >> 8) & 0xff
   \   0003C2   12....       LCALL     `??WiFiSend::?relay`; Banked call to: WiFiSend
    441          				_delay_ms(10);
   \   0003C5                ; Setup parameters for call to function _delay_ms
   \   0003C5   7A0A         MOV       R2,#0xa
   \   0003C7   7B00         MOV       R3,#0x0
   \   0003C9   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    442          				do debug_and_print("AT+RST\r\n");
   \                     ??SampleApp_ProcessEvent_30:
   \   0003CC   12....       LCALL     ?Subroutine9 & 0xFFFF
    443          				while (wait_for("ready\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_38:
   \   0003CF   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0003D2   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   0003D4   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   0003D6   7A..         MOV       R2,#`?<Constant "ready\\r\\n">` & 0xff
   \   0003D8   7B..         MOV       R3,#(`?<Constant "ready\\r\\n">` >> 8) & 0xff
   \   0003DA   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0003DD   12....       LCALL     ?DEALLOC_XSTACK8
   \   0003E0   B900E9       CJNE      R1,#0x0,??SampleApp_ProcessEvent_30
    444          				break;
    445          			}
    446          		}
    447          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0003E3                ; Setup parameters for call to function osal_set_event
   \   0003E3   12....       LCALL     ?Subroutine5 & 0xFFFF
    448          		return (events ^ SAMPLEAPP_CONFIGURE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_50:
   \   0003E6   EE           MOV       A,R6
   \   0003E7   6410         XRL       A,#0x10
   \   0003E9   02....       LJMP      ??SampleApp_ProcessEvent_12 & 0xFFFF
    449          	}
    450          
    451          	if (events & SAMPLEAPP_INITIALIZE_WIFI_EVT) {
   \                     ??SampleApp_ProcessEvent_13:
   \   0003EC   EA           MOV       A,R2
   \   0003ED   5404         ANL       A,#0x4
   \   0003EF   7003         JNZ       $+5
   \   0003F1   02....       LJMP      ??SampleApp_ProcessEvent_31 & 0xFFFF
    452          		// initialize esp8266
    453          		do {
    454          			exit_send();
   \                     ??SampleApp_ProcessEvent_32:
   \   0003F4                ; Setup parameters for call to function exit_send
   \   0003F4   12....       LCALL     `??exit_send::?relay`; Banked call to: exit_send
    455          			InitNVStatus = osal_nv_item_init(ZD_NV_SSID_ID, SSID_MAX_LENGTH, NULL);
   \   0003F7                ; Setup parameters for call to function osal_nv_item_init
   \   0003F7   E4           CLR       A
   \   0003F8   F5..         MOV       ?V0,A
   \   0003FA   F5..         MOV       ?V1,A
   \   0003FC   78..         MOV       R0,#?V0
   \   0003FE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000401   7C14         MOV       R4,#0x14
   \   000403   7D00         MOV       R5,#0x0
   \   000405   7A20         MOV       R2,#0x20
   \   000407   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   00040A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00040D   E9           MOV       A,R1
   \   00040E   F5..         MOV       ?V0,A
    456          			readNVStatus = osal_nv_read(ZD_NV_SSID_ID, 0, SSID_MAX_LENGTH, SSID);
    457          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   000410                ; Setup parameters for call to function osal_nv_read
   \   000410   744B         MOV       A,#0x4b
   \   000412   12....       LCALL     ?XSTACK_DISP100_8
   \   000415   88..         MOV       ?V2,R0
   \   000417   89..         MOV       ?V3,R1
   \   000419   78..         MOV       R0,#?V2
   \   00041B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00041E   75..14       MOV       ?V2,#0x14
   \   000421   75..00       MOV       ?V3,#0x0
   \   000424   78..         MOV       R0,#?V2
   \   000426   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000429   7C00         MOV       R4,#0x0
   \   00042B   7D00         MOV       R5,#0x0
   \   00042D   7A20         MOV       R2,#0x20
   \   00042F   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000432   12....       LCALL     ?DEALLOC_XSTACK8
   \   000435   E9           MOV       A,R1
   \   000436   6003         JZ        $+5
   \   000438   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
   \   00043B   E5..         MOV       A,?V0
   \   00043D   6003         JZ        $+5
   \   00043F   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
    458          				debug("Read Flash Failed\r\n");
    459          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    460          			}
    461          			debug(SSID);
   \   000442                ; Setup parameters for call to function _UARTSend
   \   000442   744B         MOV       A,#0x4b
   \   000444   12....       LCALL     ?XSTACK_DISP101_8
   \   000447   12....       LCALL     ?Subroutine13 & 0xFFFF
    462          			InitNVStatus = osal_nv_item_init(ZD_NV_PSWD_ID, PSWD_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_10:
   \   00044A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00044D   7C14         MOV       R4,#0x14
   \   00044F   7D00         MOV       R5,#0x0
   \   000451   7A10         MOV       R2,#0x10
   \   000453   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000456   12....       LCALL     ?DEALLOC_XSTACK8
   \   000459   E9           MOV       A,R1
   \   00045A   F5..         MOV       ?V0,A
    463          			readNVStatus = osal_nv_read(ZD_NV_PSWD_ID, 0, PSWD_MAX_LENGTH, PSWD);
    464          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   00045C                ; Setup parameters for call to function osal_nv_read
   \   00045C   7437         MOV       A,#0x37
   \   00045E   12....       LCALL     ?XSTACK_DISP100_8
   \   000461   88..         MOV       ?V2,R0
   \   000463   89..         MOV       ?V3,R1
   \   000465   78..         MOV       R0,#?V2
   \   000467   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00046A   75..14       MOV       ?V2,#0x14
   \   00046D   75..00       MOV       ?V3,#0x0
   \   000470   78..         MOV       R0,#?V2
   \   000472   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000475   7C00         MOV       R4,#0x0
   \   000477   7D00         MOV       R5,#0x0
   \   000479   7A10         MOV       R2,#0x10
   \   00047B   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00047E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000481   E9           MOV       A,R1
   \   000482   6003         JZ        $+5
   \   000484   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
   \   000487   E5..         MOV       A,?V0
   \   000489   6003         JZ        $+5
   \   00048B   02....       LJMP      ??SampleApp_ProcessEvent_33 & 0xFFFF
    465          				debug("Read Flash Failed\r\n");
    466          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    467          			}
    468          			debug(PSWD);
   \   00048E                ; Setup parameters for call to function _UARTSend
   \   00048E   7437         MOV       A,#0x37
   \   000490   12....       LCALL     ?XSTACK_DISP101_8
   \   000493   12....       LCALL     ?Subroutine13 & 0xFFFF
    469          			InitNVStatus = osal_nv_item_init(ZD_NV_IP_ID, IP_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_11:
   \   000496   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000499   7C10         MOV       R4,#0x10
   \   00049B   7D00         MOV       R5,#0x0
   \   00049D   7A40         MOV       R2,#0x40
   \   00049F   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0004A2   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004A5   E9           MOV       A,R1
   \   0004A6   F5..         MOV       ?V0,A
    470          			readNVStatus = osal_nv_read(ZD_NV_IP_ID, 0, IP_MAX_LENGTH, MYIP);
    471          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0004A8                ; Setup parameters for call to function osal_nv_read
   \   0004A8   7427         MOV       A,#0x27
   \   0004AA   12....       LCALL     ?XSTACK_DISP100_8
   \   0004AD   88..         MOV       ?V2,R0
   \   0004AF   89..         MOV       ?V3,R1
   \   0004B1   78..         MOV       R0,#?V2
   \   0004B3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004B6   75..10       MOV       ?V2,#0x10
   \   0004B9   75..00       MOV       ?V3,#0x0
   \   0004BC   78..         MOV       R0,#?V2
   \   0004BE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004C1   7C00         MOV       R4,#0x0
   \   0004C3   7D00         MOV       R5,#0x0
   \   0004C5   7A40         MOV       R2,#0x40
   \   0004C7   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0004CA   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004CD   E9           MOV       A,R1
   \   0004CE   704A         JNZ       ??SampleApp_ProcessEvent_33
   \   0004D0   E5..         MOV       A,?V0
   \   0004D2   7046         JNZ       ??SampleApp_ProcessEvent_33
    472          				debug("Read Flash Failed\r\n");
    473          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
    474          			}
    475          			debug(MYIP);
   \   0004D4                ; Setup parameters for call to function _UARTSend
   \   0004D4   7427         MOV       A,#0x27
   \   0004D6   12....       LCALL     ?XSTACK_DISP101_8
   \   0004D9   12....       LCALL     ?Subroutine13 & 0xFFFF
    476          			InitNVStatus = osal_nv_item_init(ZD_NV_PORT_ID, PORT_MAX_LENGTH, NULL);
   \                     ??CrossCallReturnLabel_12:
   \   0004DC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004DF   7C08         MOV       R4,#0x8
   \   0004E1   7D00         MOV       R5,#0x0
   \   0004E3   7A30         MOV       R2,#0x30
   \   0004E5   12....       LCALL     ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0004E8   12....       LCALL     ?DEALLOC_XSTACK8
   \   0004EB   E9           MOV       A,R1
   \   0004EC   F5..         MOV       ?V0,A
    477          			readNVStatus = osal_nv_read(ZD_NV_PORT_ID, 0, PORT_MAX_LENGTH, PORT);
    478          			if (readNVStatus != SUCCESS || InitNVStatus != SUCCESS) {
   \   0004EE                ; Setup parameters for call to function osal_nv_read
   \   0004EE   7402         MOV       A,#0x2
   \   0004F0   12....       LCALL     ?XSTACK_DISP100_8
   \   0004F3   88..         MOV       ?V2,R0
   \   0004F5   89..         MOV       ?V3,R1
   \   0004F7   78..         MOV       R0,#?V2
   \   0004F9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0004FC   75..08       MOV       ?V2,#0x8
   \   0004FF   75..00       MOV       ?V3,#0x0
   \   000502   78..         MOV       R0,#?V2
   \   000504   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000507   7C00         MOV       R4,#0x0
   \   000509   7D00         MOV       R5,#0x0
   \   00050B   7A30         MOV       R2,#0x30
   \   00050D   12....       LCALL     ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000510   12....       LCALL     ?DEALLOC_XSTACK8
   \   000513   E9           MOV       A,R1
   \   000514   7004         JNZ       ??SampleApp_ProcessEvent_33
   \   000516   E5..         MOV       A,?V0
   \   000518   600C         JZ        ??SampleApp_ProcessEvent_34
    479          				debug("Read Flash Failed\r\n");
   \                     ??SampleApp_ProcessEvent_33:
   \   00051A                ; Setup parameters for call to function _UARTSend
   \   00051A   7A..         MOV       R2,#`?<Constant "Read Flash Failed\\r\\n">` & 0xff
   \   00051C   7B..         MOV       R3,#(`?<Constant "Read Flash Failed\\r\\n">` >> 8) & 0xff
   \   00051E   7900         MOV       R1,#0x0
   \   000520   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    480          				return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   000523   02....       LJMP      ??CrossCallReturnLabel_54 & 0xFFFF
    481          			}
    482          			debug(PORT);
   \                     ??SampleApp_ProcessEvent_34:
   \   000526                ; Setup parameters for call to function _UARTSend
   \   000526   7402         MOV       A,#0x2
   \   000528   12....       LCALL     ?XSTACK_DISP101_8
   \   00052B   7900         MOV       R1,#0x0
   \   00052D   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    483          
    484          			do debug_and_print("AT+CWMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_35:
   \   000530   75....       MOV       ?V0,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   000533   75....       MOV       ?V1,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   000536                ; Setup parameters for call to function _UARTSend
   \   000536   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    485          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_44:
   \   000539   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00053C   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00053F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000542   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_35
    486          			do debug_and_print("AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PSWD);
   \                     ??SampleApp_ProcessEvent_36:
   \   000545   75....       MOV       ?V0,#`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` & 0xff
   \   000548   75....       MOV       ?V1,#(`?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">` >> 8) & 0xff
   \   00054B                ; Setup parameters for call to function _UARTSend
   \   00054B   7437         MOV       A,#0x37
   \   00054D   12....       LCALL     ?XSTACK_DISP100_8
   \   000550   88..         MOV       ?V2,R0
   \   000552   89..         MOV       ?V3,R1
   \   000554   78..         MOV       R0,#?V2
   \   000556   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000559   744D         MOV       A,#0x4d
   \   00055B   12....       LCALL     ?XSTACK_DISP100_8
   \   00055E   88..         MOV       ?V2,R0
   \   000560   89..         MOV       ?V3,R1
   \   000562   78..         MOV       R0,#?V2
   \   000564   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000567   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   00056A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00056D                ; Setup parameters for call to function _UARTSend
   \   00056D   7437         MOV       A,#0x37
   \   00056F   12....       LCALL     ?XSTACK_DISP100_8
   \   000572   88..         MOV       ?V2,R0
   \   000574   89..         MOV       ?V3,R1
   \   000576   78..         MOV       R0,#?V2
   \   000578   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00057B   744D         MOV       A,#0x4d
   \   00057D   12....       LCALL     ?XSTACK_DISP100_8
   \   000580   88..         MOV       ?V2,R0
   \   000582   89..         MOV       ?V3,R1
   \   000584   78..         MOV       R0,#?V2
   \   000586   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000589   AA..         MOV       R2,?V0
   \   00058B   AB..         MOV       R3,?V1
   \   00058D   7901         MOV       R1,#0x1
   \   00058F   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000592   12....       LCALL     ?DEALLOC_XSTACK8
    487          			while (wait_for("OK\r\n", "FAIL\r\n", 0));
   \   000595                ; Setup parameters for call to function wait_for
   \   000595   E4           CLR       A
   \   000596   F5..         MOV       ?V0,A
   \   000598   F5..         MOV       ?V1,A
   \   00059A   78..         MOV       R0,#?V0
   \   00059C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00059F   7C..         MOV       R4,#`?<Constant "FAIL\\r\\n">` & 0xff
   \   0005A1   7D..         MOV       R5,#(`?<Constant "FAIL\\r\\n">` >> 8) & 0xff
   \   0005A3   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0005A6   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005A9   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_36
    488          			do debug_and_print("AT+CIPMUX=0\r\n");
   \                     ??SampleApp_ProcessEvent_37:
   \   0005AC   75....       MOV       ?V0,#`?<Constant "AT+CIPMUX=0\\r\\n">` & 0xff
   \   0005AF   75....       MOV       ?V1,#(`?<Constant "AT+CIPMUX=0\\r\\n">` >> 8) & 0xff
   \   0005B2                ; Setup parameters for call to function _UARTSend
   \   0005B2   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    489          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_45:
   \   0005B5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005B8   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   0005BB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005BE   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_37
    490          			do debug_and_print("AT+CIPMODE=1\r\n");
   \                     ??SampleApp_ProcessEvent_38:
   \   0005C1   75....       MOV       ?V0,#`?<Constant "AT+CIPMODE=1\\r\\n">` & 0xff
   \   0005C4   75....       MOV       ?V1,#(`?<Constant "AT+CIPMODE=1\\r\\n">` >> 8) & 0xff
   \   0005C7                ; Setup parameters for call to function _UARTSend
   \   0005C7   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    491          			while (wait_for("OK\r\n", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_46:
   \   0005CA   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005CD   12....       LCALL     ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0005D0   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005D3   B900EB       CJNE      R1,#0x0,??SampleApp_ProcessEvent_38
    492          			do debug_and_print("AT+CIPSTART=\"TCP\",\"%s\",%s\r\n", MYIP, PORT);
   \                     ??SampleApp_ProcessEvent_39:
   \   0005D6   75....       MOV       ?V0,#`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` & 0xff
   \   0005D9   75....       MOV       ?V1,#(`?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">` >> 8) & 0xff
   \   0005DC                ; Setup parameters for call to function _UARTSend
   \   0005DC   7402         MOV       A,#0x2
   \   0005DE   12....       LCALL     ?XSTACK_DISP100_8
   \   0005E1   88..         MOV       ?V2,R0
   \   0005E3   89..         MOV       ?V3,R1
   \   0005E5   78..         MOV       R0,#?V2
   \   0005E7   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005EA   7429         MOV       A,#0x29
   \   0005EC   12....       LCALL     ?XSTACK_DISP100_8
   \   0005EF   88..         MOV       ?V2,R0
   \   0005F1   89..         MOV       ?V3,R1
   \   0005F3   78..         MOV       R0,#?V2
   \   0005F5   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0005F8   12....       LCALL     ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0005FB   12....       LCALL     ?DEALLOC_XSTACK8
   \   0005FE                ; Setup parameters for call to function _UARTSend
   \   0005FE   7402         MOV       A,#0x2
   \   000600   12....       LCALL     ?XSTACK_DISP100_8
   \   000603   88..         MOV       ?V2,R0
   \   000605   89..         MOV       ?V3,R1
   \   000607   78..         MOV       R0,#?V2
   \   000609   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00060C   7429         MOV       A,#0x29
   \   00060E   12....       LCALL     ?XSTACK_DISP100_8
   \   000611   88..         MOV       ?V2,R0
   \   000613   89..         MOV       ?V3,R1
   \   000615   78..         MOV       R0,#?V2
   \   000617   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00061A   AA..         MOV       R2,?V0
   \   00061C   AB..         MOV       R3,?V1
   \   00061E   7901         MOV       R1,#0x1
   \   000620   12....       LCALL     ??Subroutine23_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000623   12....       LCALL     ?DEALLOC_XSTACK8
    493          			while (wait_for("OK\r\n", "CLOSED\r\n", 0));
   \   000626                ; Setup parameters for call to function wait_for
   \   000626   E4           CLR       A
   \   000627   F5..         MOV       ?V0,A
   \   000629   F5..         MOV       ?V1,A
   \   00062B   78..         MOV       R0,#?V0
   \   00062D   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000630   7C..         MOV       R4,#`?<Constant "CLOSED\\r\\n">` & 0xff
   \   000632   7D..         MOV       R5,#(`?<Constant "CLOSED\\r\\n">` >> 8) & 0xff
   \   000634   12....       LCALL     ??Subroutine29_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000637   12....       LCALL     ?DEALLOC_XSTACK8
   \   00063A   B90099       CJNE      R1,#0x0,??SampleApp_ProcessEvent_39
    494          			debug_and_print("AT+CIPSEND\r\n");
   \   00063D   75....       MOV       ?V0,#`?<Constant "AT+CIPSEND\\r\\n">` & 0xff
   \   000640   75....       MOV       ?V1,#(`?<Constant "AT+CIPSEND\\r\\n">` >> 8) & 0xff
   \   000643                ; Setup parameters for call to function _UARTSend
   \   000643   12....       LCALL     ??Subroutine24_0 & 0xFFFF
    495          		} while (wait_for(">", "ERROR\r\n", 0));
   \                     ??CrossCallReturnLabel_47:
   \   000646   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000649   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00064B   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00064D   7A..         MOV       R2,#`?<Constant ">">` & 0xff
   \   00064F   7B..         MOV       R3,#(`?<Constant ">">` >> 8) & 0xff
   \   000651   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000654   12....       LCALL     ?DEALLOC_XSTACK8
   \   000657   E9           MOV       A,R1
   \   000658   6003         JZ        $+5
   \   00065A   02....       LJMP      ??SampleApp_ProcessEvent_32 & 0xFFFF
    496          		
    497          		// drive initial events
    498          		_delay_ms(50);
   \   00065D                ; Setup parameters for call to function _delay_ms
   \   00065D   7A32         MOV       R2,#0x32
   \   00065F   7B00         MOV       R3,#0x0
   \   000661   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    499          		osal_set_event(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \   000664                ; Setup parameters for call to function osal_set_event
   \   000664   7A08         MOV       R2,#0x8
   \   000666   12....       LCALL     ??Subroutine25_0 & 0xFFFF
    500          		return (events ^ SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \                     ??CrossCallReturnLabel_54:
   \   000669   EE           MOV       A,R6
   \   00066A   6404         XRL       A,#0x4
   \   00066C   804E         SJMP      ??SampleApp_ProcessEvent_12
    501          	}
    502          
    503          	if (events & SAMPLEAPP_SEND_HEART_BEAT_EVT) {
   \                     ??SampleApp_ProcessEvent_31:
   \   00066E   EA           MOV       A,R2
   \   00066F   5408         ANL       A,#0x8
   \   000671   604E         JZ        ??SampleApp_ProcessEvent_40
    504          		debug_and_print("heart beat\r\n");
   \   000673   75....       MOV       ?V0,#`?<Constant "heart beat\\r\\n">` & 0xff
   \   000676   75....       MOV       ?V1,#(`?<Constant "heart beat\\r\\n">` >> 8) & 0xff
   \   000679                ; Setup parameters for call to function _UARTSend
   \   000679   12....       LCALL     ?Subroutine20 & 0xFFFF
    505          		SampleApp_SendGroupMessage();
   \                     ??CrossCallReturnLabel_48:
   \   00067C                ; Setup parameters for call to function SampleApp_SendGroupMessage
   \   00067C   12....       LCALL     `??SampleApp_SendGroupMessage::?relay`; Banked call to: SampleApp_SendGroupMessage
    506          		if (wait_for("received\r\n", "ERROR\r\n", 200)) {
   \   00067F                ; Setup parameters for call to function wait_for
   \   00067F   75..C8       MOV       ?V0,#-0x38
   \   000682   75..00       MOV       ?V1,#0x0
   \   000685   78..         MOV       R0,#?V0
   \   000687   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00068A   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   00068C   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   00068E   7A..         MOV       R2,#`?<Constant "received\\r\\n">` & 0xff
   \   000690   7B..         MOV       R3,#(`?<Constant "received\\r\\n">` >> 8) & 0xff
   \   000692   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000695   12....       LCALL     ?DEALLOC_XSTACK8
   \   000698   E9           MOV       A,R1
   \   000699   600E         JZ        ??SampleApp_ProcessEvent_41
    507          			debug("WIFI RESET\r\n");
   \   00069B                ; Setup parameters for call to function _UARTSend
   \   00069B   7A..         MOV       R2,#`?<Constant "WIFI RESET\\r\\n">` & 0xff
   \   00069D   7B..         MOV       R3,#(`?<Constant "WIFI RESET\\r\\n">` >> 8) & 0xff
   \   00069F   7900         MOV       R1,#0x0
   \   0006A1   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    508          			osal_set_event(SampleApp_TaskID, SAMPLEAPP_INITIALIZE_WIFI_EVT);
   \   0006A4                ; Setup parameters for call to function osal_set_event
   \   0006A4   12....       LCALL     ?Subroutine5 & 0xFFFF
    509          		} else {
   \                     ??CrossCallReturnLabel_51:
   \   0006A7   8010         SJMP      ??SampleApp_ProcessEvent_42
    510          			osal_start_timerEx(SampleApp_TaskID, SAMPLEAPP_SEND_HEART_BEAT_EVT, 2000);
   \                     ??SampleApp_ProcessEvent_41:
   \   0006A9                ; Setup parameters for call to function osal_start_timerEx
   \   0006A9   7CD0         MOV       R4,#-0x30
   \   0006AB   7D07         MOV       R5,#0x7
   \   0006AD   7A08         MOV       R2,#0x8
   \   0006AF   7B00         MOV       R3,#0x0
   \   0006B1   90....       MOV       DPTR,#SampleApp_TaskID
   \   0006B4   E0           MOVX      A,@DPTR
   \   0006B5   F9           MOV       R1,A
   \   0006B6   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    511          		}
    512          		return (events ^ SAMPLEAPP_SEND_HEART_BEAT_EVT);
   \                     ??SampleApp_ProcessEvent_42:
   \   0006B9   EE           MOV       A,R6
   \   0006BA   6408         XRL       A,#0x8
   \                     ??SampleApp_ProcessEvent_12:
   \   0006BC   FA           MOV       R2,A
   \   0006BD   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0006BE   FB           MOV       R3,A
   \   0006BF   8004         SJMP      ??SampleApp_ProcessEvent_43
    513          	}
    514            
    515            // Discard unknown events
    516            return 0;
   \                     ??SampleApp_ProcessEvent_40:
   \   0006C1   7A00         MOV       R2,#0x0
   \   0006C3   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_43:
   \   0006C5   749F         MOV       A,#-0x61
   \   0006C7                REQUIRE ?Subroutine0
   \   0006C7                REQUIRE _A_P0
   \   0006C7                ; // Fall through to label ?Subroutine0
    517          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F08         MOV       R7,#0x8
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   7B04         MOV       R3,#0x4
   \   000002   12....       LCALL     `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000005   7404         MOV       A,#0x4
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   7B04         MOV       R3,#0x4
   \   000002                REQUIRE ??Subroutine22_0
   \   000002                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   12....       LCALL     `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006                REQUIRE ??Subroutine23_0
   \   000006                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000003   7404         MOV       A,#0x4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   A982         MOV       R1,DPL
   \   000002   AA83         MOV       R2,DPH
   \   000004   7B00         MOV       R3,#0x0
   \   000006   12....       LCALL     `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000009   7403         MOV       A,#0x3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   7900         MOV       R1,#0x0
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR       A
   \   000006   F5..         MOV       ?V0,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   75....       MOV       ?V0,#`?<Constant "AT+RST\\r\\n">` & 0xff
   \   000003   75....       MOV       ?V1,#(`?<Constant "AT+RST\\r\\n">` >> 8) & 0xff
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                ; Setup parameters for call to function _UARTSend
   \   000006                REQUIRE ??Subroutine24_0
   \   000006                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL     ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003                ; Setup parameters for call to function wait_for
   \   000003   E4           CLR       A
   \   000004   F5..         MOV       ?V0,A
   \   000006   F5..         MOV       ?V1,A
   \   000008   78..         MOV       R0,#?V0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA..         MOV       R2,?V0
   \   000002   AB..         MOV       R3,?V1
   \   000004   7900         MOV       R1,#0x0
   \   000006   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009                ; Setup parameters for call to function _UARTSend
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D   7901         MOV       R1,#0x1
   \   00000F   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A04         MOV       R2,#0x4
   \   000002                REQUIRE ??Subroutine25_0
   \   000002                ; // Fall through to label ??Subroutine25_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7C..         MOV       R4,#`?<Constant "ERROR\\r\\n">` & 0xff
   \   000002   7D..         MOV       R5,#(`?<Constant "ERROR\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine29_0
   \   000004                ; // Fall through to label ??Subroutine29_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine29_0:
   \   000000   7A..         MOV       R2,#`?<Constant "OK\\r\\n">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "OK\\r\\n">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine30_0
   \   000004                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   12....       LCALL     `??wait_for::?relay`; Banked call to: wait_for
   \   000003   7402         MOV       A,#0x2
   \   000005   22           RET
    518          
    519          /*********************************************************************
    520           * Event Generation Functions
    521           */
    522          /*********************************************************************
    523           * @fn      SampleApp_HandleKeys
    524           *
    525           * @brief   Handles all key events for this device.
    526           *
    527           * @param   shift - true if in shift/alt.
    528           * @param   keys - bit field for key events. Valid entries:
    529           *                 HAL_KEY_SW_2
    530           *                 HAL_KEY_SW_1
    531           *
    532           * @return  none
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    535          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    536            (void)shift;  // Intentionally unreferenced parameter
    537            
    538            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   5007         JNC       ??SampleApp_HandleKeys_0
    539            {
    540          	/* This key sends the Flash Command is sent to Group 1.
    541          	 * This device will not receive the Flash Command from this
    542          	 * device (even if it belongs to group 1).
    543          	 */
    544          	SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??SampleApp_SendFlashMessage::?relay`; Banked call to: SampleApp_SendFlashMessage
    545            }
    546          
    547            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV       A,R6
   \   000013   A2E1         MOV       C,0xE0 /* A   */.1
   \   000015   5021         JNC       ??SampleApp_HandleKeys_1
    548            {
    549          	/* The Flashr Command is sent to Group 1.
    550          	 * This key toggles this device in and out of group 1.
    551          	 * If this device doesn't belong to group 1, this application
    552          	 * will not receive the Flash command sent to group 1.
    553          	 */
    554          	aps_Group_t *grp;
    555          	grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    556          	if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A02         MOV       R2,#0x2
   \   000019   7B00         MOV       R3,#0x0
   \   00001B   7914         MOV       R1,#0x14
   \   00001D   12....       LCALL     `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   \   000020   EA           MOV       A,R2
   \   000021   4B           ORL       A,R3
   \   000022   600B         JZ        ??SampleApp_HandleKeys_2
    557          	{
    558          	  // Remove from the group
    559          	  aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000024                ; Setup parameters for call to function aps_RemoveGroup
   \   000024   7A02         MOV       R2,#0x2
   \   000026   7B00         MOV       R3,#0x0
   \   000028   7914         MOV       R1,#0x14
   \   00002A   12....       LCALL     `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   00002D   8009         SJMP      ??SampleApp_HandleKeys_1
    560          	}
    561          	else
    562          	{
    563          	  // Add to the flash group
    564          	  aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   00002F                ; Setup parameters for call to function aps_AddGroup
   \   00002F   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   000031   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   000033   7914         MOV       R1,#0x14
   \   000035   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    565          	}
    566            }
    567          }
   \                     ??SampleApp_HandleKeys_1:
   \   000038   02....       LJMP      ??Subroutine27_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    568          
    569          /*********************************************************************
    570           * LOCAL FUNCTIONS
    571           */
    572          
    573          /*********************************************************************
    574           * @fn      SampleApp_MessageMSGCB
    575           *
    576           * @brief   Data message processor callback.  This function processes
    577           *          any incoming data - probably from other devices.  So, based
    578           *          on cluster ID, perform the intended action.
    579           *
    580           * @param   none
    581           *
    582           * @return  none
    583           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    584          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    585          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    586            //uint16 flashTime;
    587          
    588            switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   F5..         MOV       ?V0,A
   \   000014   A3           INC       DPTR
   \   000015   E0           MOVX      A,@DPTR
   \   000016   F5..         MOV       ?V1,A
   \   000018   78..         MOV       R0,#?V0
   \   00001A   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    589            {
    590          	 case SAMPLEAPP_PERIODIC_CLUSTERID:
    591          	  HalUARTWrite(0,"I get data\n",11);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV       R4,#0xb
   \   000028   7D00         MOV       R5,#0x0
   \   00002A   7A..         MOV       R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV       R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV       R1,#0x0
   \   000030   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    592          	  HalUARTWrite(0, &(pkt->cmd.Data[0]),10); //´òÓ¡ÊÕµ½Êý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV       R4,#0xa
   \   000035   7D00         MOV       R5,#0x0
   \   000037   EE           MOV       A,R6
   \   000038   2422         ADD       A,#0x22
   \   00003A   F582         MOV       DPL,A
   \   00003C   E4           CLR       A
   \   00003D   3F           ADDC      A,R7
   \   00003E   12....       LCALL     ?Subroutine6 & 0xFFFF
    593          	  HalUARTWrite(0,"\n",1);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \                     ??CrossCallReturnLabel_2:
   \   000041                ; Setup parameters for call to function HalUARTWrite
   \   000041   7C01         MOV       R4,#0x1
   \   000043   7D00         MOV       R5,#0x0
   \   000045   7A..         MOV       R2,#`?<Constant "\\n">` & 0xff
   \   000047   7B..         MOV       R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000049   02....       LJMP      ??SampleApp_MessageMSGCB_3 & 0xFFFF
    594          	  break;
    595          
    596          	 case SAMPLEAPP_FLASH_CLUSTERID:
    597          	   if(pkt->cmd.Data[4]=='E' && pkt->cmd.Data[5] =='2')
   \                     ??SampleApp_MessageMSGCB_2:
   \   00004C   EA           MOV       A,R2
   \   00004D   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000050   F8           MOV       R0,A
   \   000051   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000054   E0           MOVX      A,@DPTR
   \   000055   6445         XRL       A,#0x45
   \   000057   705A         JNZ       ??SampleApp_MessageMSGCB_4
   \   000059   EA           MOV       A,R2
   \   00005A   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00005D   12....       LCALL     ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   6432         XRL       A,#0x32
   \   000064   704D         JNZ       ??SampleApp_MessageMSGCB_4
    598          	   {
    599          		 HalUARTWrite(0,"Temp is:",8);
   \   000066                ; Setup parameters for call to function HalUARTWrite
   \   000066   7C08         MOV       R4,#0x8
   \   000068   7D00         MOV       R5,#0x0
   \   00006A   7A..         MOV       R2,#`?<Constant "Temp is:">` & 0xff
   \   00006C   7B..         MOV       R3,#(`?<Constant "Temp is:">` >> 8) & 0xff
   \   00006E   7900         MOV       R1,#0x0
   \   000070   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    600          		 HalUARTWrite(0,&pkt->cmd.Data[0],2);
   \   000073   EE           MOV       A,R6
   \   000074   2422         ADD       A,#0x22
   \   000076   F5..         MOV       ?V0,A
   \   000078   E4           CLR       A
   \   000079   3F           ADDC      A,R7
   \   00007A   F5..         MOV       ?V1,A
   \   00007C                ; Setup parameters for call to function HalUARTWrite
   \   00007C   7C02         MOV       R4,#0x2
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   85..82       MOV       DPL,?V0
   \   000083   12....       LCALL     ?Subroutine6 & 0xFFFF
    601          		 HalUARTWrite(0,"\r\n",2);
   \                     ??CrossCallReturnLabel_3:
   \   000086                ; Setup parameters for call to function HalUARTWrite
   \   000086   7C02         MOV       R4,#0x2
   \   000088   7D00         MOV       R5,#0x0
   \   00008A   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00008C   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00008E   7900         MOV       R1,#0x0
   \   000090   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    602          
    603          		 HalUARTWrite(0,"Humidity is:",12);
   \   000093                ; Setup parameters for call to function HalUARTWrite
   \   000093   7C0C         MOV       R4,#0xc
   \   000095   7D00         MOV       R5,#0x0
   \   000097   7A..         MOV       R2,#`?<Constant "Humidity is:">` & 0xff
   \   000099   7B..         MOV       R3,#(`?<Constant "Humidity is:">` >> 8) & 0xff
   \   00009B   7900         MOV       R1,#0x0
   \   00009D   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    604          		 HalUARTWrite(0,&pkt->cmd.Data[2],2);
   \   0000A0                ; Setup parameters for call to function HalUARTWrite
   \   0000A0   7C02         MOV       R4,#0x2
   \   0000A2   7D00         MOV       R5,#0x0
   \   0000A4   85..82       MOV       DPL,?V0
   \   0000A7   85..83       MOV       DPH,?V1
   \   0000AA   E0           MOVX      A,@DPTR
   \   0000AB   2C           ADD       A,R4
   \   0000AC   FA           MOV       R2,A
   \   0000AD   A3           INC       DPTR
   \   0000AE   E0           MOVX      A,@DPTR
   \   0000AF   3400         ADDC      A,#0x0
   \   0000B1   8018         SJMP      ??SampleApp_MessageMSGCB_5
    605          		 HalUARTWrite(0,"\r\n",2);
    606          	   }
    607          	   else
    608          	   {
    609          	  HalUARTWrite(0,"I get data:\n",12);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_4:
   \   0000B3                ; Setup parameters for call to function HalUARTWrite
   \   0000B3   7C0C         MOV       R4,#0xc
   \   0000B5   7D00         MOV       R5,#0x0
   \   0000B7   7A..         MOV       R2,#`?<Constant "I get data:\\n">` & 0xff
   \   0000B9   7B..         MOV       R3,#(`?<Constant "I get data:\\n">` >> 8) & 0xff
   \   0000BB   7900         MOV       R1,#0x0
   \   0000BD   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    610          	  HalUARTWrite(0, &pkt->cmd.Data[0],20); //´òÓ¡ÊÕµ½Êý¾Ý
   \   0000C0                ; Setup parameters for call to function HalUARTWrite
   \   0000C0   7C14         MOV       R4,#0x14
   \   0000C2   7D00         MOV       R5,#0x0
   \   0000C4   EE           MOV       A,R6
   \   0000C5   12....       LCALL     ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000C8   FA           MOV       R2,A
   \   0000C9   A3           INC       DPTR
   \   0000CA   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_5:
   \   0000CB   FB           MOV       R3,A
   \   0000CC   7900         MOV       R1,#0x0
   \   0000CE   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    611          	  HalUARTWrite(0,"\r\n",2);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \   0000D1                ; Setup parameters for call to function HalUARTWrite
   \   0000D1   7C02         MOV       R4,#0x2
   \   0000D3   7D00         MOV       R5,#0x0
   \   0000D5   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   0000D7   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_3:
   \   0000D9   7900         MOV       R1,#0x0
   \   0000DB   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    612          	//  flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    613          	 // HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
    614          	   }
    615          	  break;
    616            }
    617          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000DE   02....       LJMP      ??Subroutine27_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL     ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   E0           MOVX      A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   2422         ADD       A,#0x22
   \   000002   F582         MOV       DPL,A
   \   000004   E4           CLR       A
   \   000005   3F           ADDC      A,R7
   \   000006   F583         MOV       DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC       DPTR
   \   000001   E0           MOVX      A,@DPTR
   \   000002   F583         MOV       DPH,A
   \   000004   8882         MOV       DPL,R0
   \   000006   A3           INC       DPTR
   \   000007   A3           INC       DPTR
   \   000008   A3           INC       DPTR
   \   000009   A3           INC       DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F583         MOV       DPH,A
   \   000002   E0           MOVX      A,@DPTR
   \   000003   FA           MOV       R2,A
   \   000004   A3           INC       DPTR
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FB           MOV       R3,A
   \   000007   7900         MOV       R1,#0x0
   \   000009   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
   \   00000C   22           RET
    618          
    619          /*********************************************************************
    620           * @fn      SampleApp_SendPeriodicMessage
    621           *
    622           * @brief   Send the periodic message.
    623           *
    624           * @param   none
    625           *
    626           * @return  none
    627           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    628          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    629          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV       A,#-0xa
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    630            uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};//×Ô¶¨ÒåÊý¾Ý
   \   00000A   90....       MOV       DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   740A         MOV       A,#0xa
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    631            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    632          					   SAMPLEAPP_PERIODIC_CLUSTERID,
    633          					   10,//×Ö½ÚÊý
    634          					   data,//Ö¸ÕëÍ·
    635          					   &SampleApp_TransID,
    636          					   AF_DISCV_ROUTE,
    637          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV       ?V0,#0xa
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV       ?V0,#0x1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    638            {
    639            }
    640            else
    641            {
    642          	// Error occurred in request to send.
    643            }
    644          }
   \   00005C   740A         MOV       A,#0xa
   \   00005E   02....       LJMP      ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine27_0
   \   000003                ; // Fall through to label ??Subroutine27_0
    645          
    646          /*********************************************************************
    647           * @fn      SampleApp_SendFlashMessage
    648           *
    649           * @brief   Send the flash message to group 1.
    650           *
    651           * @param   flashTime - in milliseconds
    652           *
    653           * @return  none
    654           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    656          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    657            uint8 buffer[3];
    658            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    659            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    660            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    661          
    662            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    663          					   SAMPLEAPP_FLASH_CLUSTERID,
    664          					   3,
    665          					   buffer,
    666          					   &SampleApp_TransID,
    667          					   AF_DISCV_ROUTE,
    668          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    669            {
    670            }
    671            else
    672            {
    673          	// Error occurred in request to send.
    674            }
    675          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   02....       LJMP      ?Subroutine1 & 0xFFFF
    676          
    677          /*********************************************************************
    678          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    679          void SampleApp_SendGroupMessage( void )
   \                     SampleApp_SendGroupMessage:
    680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV       A,#-0x14
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    681            uint8 data[20]="I am Coordinator\r\n\0";
   \   00000A   90....       MOV       DPTR,#`?<Constant "I am Coordinator\\r\\n\\000">`
   \   00000D   AC..         MOV       R4,?XSP + 0
   \   00000F   AD..         MOV       R5,?XSP + 1
   \   000011   7414         MOV       A,#0x14
   \   000013   12....       LCALL     ?MOVE_LONG8_XDATA_XDATA
    682            //uint8 data[20]="I am EndDevice1\r\n\0";
    683            //uint8 data[20]="I am EndDevice2\r\n\0";
    684            if ( AF_DataRequest( & SampleApp_Flash_DstAddr,
    685          					   &SampleApp_epDesc,
    686          					   SAMPLEAPP_FLASH_CLUSTERID,
    687          					   20,
    688          					   data,
    689          					   &SampleApp_TransID,
    690          					   AF_DISCV_ROUTE,
    691          					   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV       ?V0,#0x1e
   \   000019   78..         MOV       R0,#?V0
   \   00001B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV       R0,#?V0
   \   000026   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV       A,#0x3
   \   00002B   12....       LCALL     ?XSTACK_DISP100_8
   \   00002E   88..         MOV       ?V0,R0
   \   000030   89..         MOV       ?V1,R1
   \   000032   78..         MOV       R0,#?V0
   \   000034   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000037   75..14       MOV       ?V0,#0x14
   \   00003A   75..00       MOV       ?V1,#0x0
   \   00003D   78..         MOV       R0,#?V0
   \   00003F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000042   75..02       MOV       ?V0,#0x2
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV       R1,#0x20
   \   00004C   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000052   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000057   7409         MOV       A,#0x9
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    692            {
    693            }
    694            else
    695            {
    696          	// Error occurred in request to send.
    697            }
    698          }
   \   00005C   7414         MOV       A,#0x14
   \   00005E   80..         SJMP      ?Subroutine1
    699          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    700          void _UARTSend(uint8 port, uint8 *fmt, ...) {
   \                     _UARTSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    701          	va_list arg_ptr;
    702          	uint8 _buffer[UartDefaultTxLen], cnt;
    703          	uint16 length = 0;
    704          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    705          		_buffer[cnt] = 0x00;
   \   00000C   7402         MOV       A,#0x2
   \   00000E   12....       LCALL     ?XSTACK_DISP0_8
   \   000011   E4           CLR       A
   \   000012   7840         MOV       R0,#0x40
   \                     ??_UARTSend_0:
   \   000014   F0           MOVX      @DPTR,A
   \   000015   A3           INC       DPTR
   \   000016   D8FC         DJNZ      R0,??_UARTSend_0
    706          	va_start(arg_ptr, fmt);
   \   000018   744C         MOV       A,#0x4c
   \   00001A   12....       LCALL     ?XSTACK_DISP100_8
   \   00001D   12....       LCALL     ?Subroutine3 & 0xFFFF
    707          	length = vsprintf((char *)_buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_0:
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   EA           MOV       A,R2
   \   000024   FC           MOV       R4,A
   \   000025   EB           MOV       A,R3
   \   000026   FD           MOV       R5,A
   \   000027   7404         MOV       A,#0x4
   \   000029   12....       LCALL     ?XSTACK_DISP101_8
   \   00002C   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002F   7402         MOV       A,#0x2
   \   000031   12....       LCALL     ?DEALLOC_XSTACK8
   \   000034   8A..         MOV       ?V0,R2
   \   000036   8B..         MOV       ?V1,R3
   \   000038   AC..         MOV       R4,?V0
   \   00003A   AD..         MOV       R5,?V1
    708          	va_end(arg_ptr);
    709          	HalUARTWrite(port, (uint8 *)_buffer, length);
   \   00003C                ; Setup parameters for call to function HalUARTWrite
   \   00003C   7402         MOV       A,#0x2
   \   00003E   12....       LCALL     ?XSTACK_DISP101_8
   \   000041   EE           MOV       A,R6
   \   000042   F9           MOV       R1,A
   \   000043   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    710          }
   \   000046   7442         MOV       A,#0x42
   \   000048                REQUIRE ?Subroutine1
   \   000048                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E8           MOV       A,R0
   \   000007   F0           MOVX      @DPTR,A
   \   000008   A3           INC       DPTR
   \   000009   E9           MOV       A,R1
   \   00000A   F0           MOVX      @DPTR,A
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B                ; Setup parameters for call to function vsprintf
   \   00000B   A8..         MOV       R0,?XSP + 0
   \   00000D   A9..         MOV       R1,?XSP + 1
   \   00000F   88..         MOV       ?V0,R0
   \   000011   89..         MOV       ?V1,R1
   \   000013   78..         MOV       R0,#?V0
   \   000015   22           RET
    711          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          void _UARTRead(uint8 port, uint8 *_buffer, uint16 *length) {
   \                     _UARTRead:
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV       ?V0,R1
   \   000007   EC           MOV       A,R4
   \   000008   FE           MOV       R6,A
   \   000009   ED           MOV       A,R5
   \   00000A   FF           MOV       R7,A
    713          	for(*length = 0 ; *length < UartDefaultRxLen; (*length)++)
   \   00000B   8C82         MOV       DPL,R4
   \   00000D   F583         MOV       DPH,A
   \   00000F   E4           CLR       A
   \   000010   F0           MOVX      @DPTR,A
   \   000011   A3           INC       DPTR
   \   000012   F0           MOVX      @DPTR,A
    714          		_buffer[*length] = 0x00;
   \                     ??_UARTRead_0:
   \   000013   8C82         MOV       DPL,R4
   \   000015   8D83         MOV       DPH,R5
   \   000017   E0           MOVX      A,@DPTR
   \   000018   F8           MOV       R0,A
   \   000019   A3           INC       DPTR
   \   00001A   E0           MOVX      A,@DPTR
   \   00001B   F9           MOV       R1,A
   \   00001C   EA           MOV       A,R2
   \   00001D   28           ADD       A,R0
   \   00001E   F582         MOV       DPL,A
   \   000020   EB           MOV       A,R3
   \   000021   39           ADDC      A,R1
   \   000022   F583         MOV       DPH,A
   \   000024   E4           CLR       A
   \   000025   F0           MOVX      @DPTR,A
   \   000026   8C82         MOV       DPL,R4
   \   000028   8D83         MOV       DPH,R5
   \   00002A   E0           MOVX      A,@DPTR
   \   00002B   2401         ADD       A,#0x1
   \   00002D   F0           MOVX      @DPTR,A
   \   00002E   A3           INC       DPTR
   \   00002F   E0           MOVX      A,@DPTR
   \   000030   3400         ADDC      A,#0x0
   \   000032   F0           MOVX      @DPTR,A
   \   000033   8C82         MOV       DPL,R4
   \   000035   8D83         MOV       DPH,R5
   \   000037   C3           CLR       C
   \   000038   E0           MOVX      A,@DPTR
   \   000039   9440         SUBB      A,#0x40
   \   00003B   A3           INC       DPTR
   \   00003C   E0           MOVX      A,@DPTR
   \   00003D   9400         SUBB      A,#0x0
   \   00003F   40D2         JC        ??_UARTRead_0
    715          	*length = HalUARTRead(port, _buffer, UartDefaultRxLen);
   \   000041                ; Setup parameters for call to function HalUARTRead
   \   000041   7C40         MOV       R4,#0x40
   \   000043   7D00         MOV       R5,#0x0
   \   000045   A9..         MOV       R1,?V0
   \   000047   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00004A   8E82         MOV       DPL,R6
   \   00004C   8F83         MOV       DPH,R7
   \   00004E   EA           MOV       A,R2
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   EB           MOV       A,R3
   \   000052   F0           MOVX      @DPTR,A
    716          }
   \   000053                REQUIRE ?Subroutine2
   \   000053                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV       R7,#0x1
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    717          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    718          void _delay_ms(uint16 timeout) {
   \                     _delay_ms:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
   \   000009   8007         SJMP      ??_delay_ms_0
    719          	while (timeout --) {
    720          	   _delay_us(1000);
   \                     ??_delay_ms_1:
   \   00000B                ; Setup parameters for call to function _delay_us
   \   00000B   7AE8         MOV       R2,#-0x18
   \   00000D   7B03         MOV       R3,#0x3
   \   00000F   12....       LCALL     `??_delay_us::?relay`; Banked call to: _delay_us
    721          	}
   \                     ??_delay_ms_0:
   \   000012   EE           MOV       A,R6
   \   000013   F8           MOV       R0,A
   \   000014   EF           MOV       A,R7
   \   000015   F9           MOV       R1,A
   \   000016   E8           MOV       A,R0
   \   000017   24FF         ADD       A,#-0x1
   \   000019   1E           DEC       R6
   \   00001A   E9           MOV       A,R1
   \   00001B   34FF         ADDC      A,#-0x1
   \   00001D   FF           MOV       R7,A
   \   00001E   E8           MOV       A,R0
   \   00001F   49           ORL       A,R1
   \   000020   70E9         JNZ       ??_delay_ms_1
    722          }
   \   000022   80..         SJMP      ?Subroutine2
    723          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void _delay_us(uint16 timeout) {
   \                     _delay_us:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    725          	uint8 cnt;
    726          	while (timeout --) {
   \                     ??_delay_us_0:
   \   000000   EA           MOV       A,R2
   \   000001   F8           MOV       R0,A
   \   000002   EB           MOV       A,R3
   \   000003   F9           MOV       R1,A
   \   000004   E8           MOV       A,R0
   \   000005   24FF         ADD       A,#-0x1
   \   000007   1A           DEC       R2
   \   000008   E9           MOV       A,R1
   \   000009   34FF         ADDC      A,#-0x1
   \   00000B   FB           MOV       R3,A
   \   00000C   E8           MOV       A,R0
   \   00000D   49           ORL       A,R1
   \   00000E   600E         JZ        ??_delay_us_1
    727          		cnt = 32;
   \   000010   7820         MOV       R0,#0x20
    728          		while (cnt --) {
   \                     ??_delay_us_2:
   \   000012   E8           MOV       A,R0
   \   000013   F9           MOV       R1,A
   \   000014   74FF         MOV       A,#-0x1
   \   000016   29           ADD       A,R1
   \   000017   F8           MOV       R0,A
   \   000018   04           INC       A
   \   000019   60E5         JZ        ??_delay_us_0
    729          			asm("NOP");
   \   00001B   00           NOP
   \   00001C   80F4         SJMP      ??_delay_us_2
    730          		}
    731          	}    
    732          }
   \                     ??_delay_us_1:
   \   00001E   02....       LJMP      ?BRET
    733          
    734          // 2 for timeout; 1 for error; 0 for clear; timeout = 0 stands for INF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          uint8 wait_for(uint8 *str, uint8 *err, uint16 timeout) {
   \                     wait_for:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V0,R2
   \   00000C   8B..         MOV       ?V1,R3
   \   00000E   EC           MOV       A,R4
   \   00000F   FE           MOV       R6,A
   \   000010   ED           MOV       A,R5
   \   000011   FF           MOV       R7,A
    736          	uint16 wait_len, read_len, err_len;
    737          	int16 i, index;
    738          	uint8 buffer[UartDefaultRxLen], flag;
    739          	wait_len = strlen((char *)str);
   \   000012                ; Setup parameters for call to function strlen
   \   000012   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000015   8A..         MOV       ?V6,R2
   \   000017   8B..         MOV       ?V7,R3
    740          	err_len = strlen((char *)err);
   \   000019                ; Setup parameters for call to function strlen
   \   000019   EE           MOV       A,R6
   \   00001A   FA           MOV       R2,A
   \   00001B   EF           MOV       A,R7
   \   00001C   FB           MOV       R3,A
   \   00001D   12....       LCALL     `??strlen::?relay`; Banked call to: strlen
   \   000020   8A..         MOV       ?V2,R2
   \   000022   8B..         MOV       ?V3,R3
   \   000024   7452         MOV       A,#0x52
   \   000026   12....       LCALL     ?XSTACK_DISP0_8
   \   000029   E0           MOVX      A,@DPTR
   \   00002A   F5..         MOV       ?V4,A
   \   00002C   A3           INC       DPTR
   \   00002D   E0           MOVX      A,@DPTR
   \   00002E   F5..         MOV       ?V5,A
    741          	while (1) {
    742          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??wait_for_0:
   \   000030                ; Setup parameters for call to function _UARTRead
   \   000030   AC..         MOV       R4,?XSP + 0
   \   000032   AD..         MOV       R5,?XSP + 1
   \   000034   7402         MOV       A,#0x2
   \   000036   12....       LCALL     ?XSTACK_DISP101_8
   \   000039   12....       LCALL     ?Subroutine12 & 0xFFFF
    743          		_delay_ms(1);
    744          		if (read_len > 2) { // at least 0x0D 0x0A
   \                     ??CrossCallReturnLabel_8:
   \   00003C   9403         SUBB      A,#0x3
   \   00003E   A3           INC       DPTR
   \   00003F   E0           MOVX      A,@DPTR
   \   000040   9400         SUBB      A,#0x0
   \   000042   5003         JNC       $+5
   \   000044   02....       LJMP      ??wait_for_1 & 0xFFFF
    745          			index = 0;
   \   000047   7A00         MOV       R2,#0x0
   \   000049   7B00         MOV       R3,#0x0
    746          			for (i = read_len - 1; i >= 0; i --) {
   \   00004B   85..82       MOV       DPL,?XSP + 0
   \   00004E   85..83       MOV       DPH,?XSP + 1
   \   000051   E0           MOVX      A,@DPTR
   \   000052   24FF         ADD       A,#-0x1
   \   000054   F8           MOV       R0,A
   \   000055   A3           INC       DPTR
   \   000056   E0           MOVX      A,@DPTR
   \   000057   8005         SJMP      ??wait_for_2
   \                     ??wait_for_3:
   \   000059   E8           MOV       A,R0
   \   00005A   24FF         ADD       A,#-0x1
   \   00005C   18           DEC       R0
   \   00005D   E9           MOV       A,R1
   \                     ??wait_for_2:
   \   00005E   34FF         ADDC      A,#-0x1
   \   000060   F9           MOV       R1,A
   \   000061   C3           CLR       C
   \   000062   E9           MOV       A,R1
   \   000063   9400         SUBB      A,#0x0
   \   000065   A2D2         MOV       C,0xD0 /* PSW */.2
   \   000067   65D0         XRL       A,PSW
   \   000069   33           RLC       A
   \   00006A   4032         JC        ??wait_for_4
    747          				if (buffer[i] == 0x0A && i != read_len - 1) {
   \   00006C   7402         MOV       A,#0x2
   \   00006E   12....       LCALL     ?XSTACK_DISP0_8
   \   000071   E582         MOV       A,DPL
   \   000073   28           ADD       A,R0
   \   000074   F582         MOV       DPL,A
   \   000076   E583         MOV       A,DPH
   \   000078   39           ADDC      A,R1
   \   000079   F583         MOV       DPH,A
   \   00007B   E0           MOVX      A,@DPTR
   \   00007C   640A         XRL       A,#0xa
   \   00007E   70D9         JNZ       ??wait_for_3
   \   000080   85..82       MOV       DPL,?XSP + 0
   \   000083   85..83       MOV       DPH,?XSP + 1
   \   000086   E0           MOVX      A,@DPTR
   \   000087   24FF         ADD       A,#-0x1
   \   000089   FC           MOV       R4,A
   \   00008A   A3           INC       DPTR
   \   00008B   E0           MOVX      A,@DPTR
   \   00008C   34FF         ADDC      A,#-0x1
   \   00008E   FD           MOV       R5,A
   \   00008F   EC           MOV       A,R4
   \   000090   68           XRL       A,R0
   \   000091   7002         JNZ       ??wait_for_5
   \   000093   ED           MOV       A,R5
   \   000094   69           XRL       A,R1
   \                     ??wait_for_5:
   \   000095   60C2         JZ        ??wait_for_3
    748          					index = i + 1;
   \   000097   E8           MOV       A,R0
   \   000098   2401         ADD       A,#0x1
   \   00009A   FA           MOV       R2,A
   \   00009B   E4           CLR       A
   \   00009C   39           ADDC      A,R1
   \   00009D   FB           MOV       R3,A
    749          					break;
    750          				}
    751          			}
    752          			
    753          			if (err_len == (read_len - index)) {
   \                     ??wait_for_4:
   \   00009E   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000A1   65..         XRL       A,?V2
   \   0000A3   7003         JNZ       ??wait_for_6
   \   0000A5   E9           MOV       A,R1
   \   0000A6   65..         XRL       A,?V3
   \                     ??wait_for_6:
   \   0000A8   703B         JNZ       ??wait_for_7
    754          				flag = 1;
    755          				for (i = 0; i < err_len; i ++) {
   \   0000AA   7800         MOV       R0,#0x0
   \   0000AC   7900         MOV       R1,#0x0
   \   0000AE   801F         SJMP      ??wait_for_8
    756          					if (buffer[index + i] != err[i]) {
   \                     ??wait_for_9:
   \   0000B0   EA           MOV       A,R2
   \   0000B1   28           ADD       A,R0
   \   0000B2   FC           MOV       R4,A
   \   0000B3   EB           MOV       A,R3
   \   0000B4   39           ADDC      A,R1
   \   0000B5   FD           MOV       R5,A
   \   0000B6   7402         MOV       A,#0x2
   \   0000B8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000BB   12....       LCALL     ?Subroutine17 & 0xFFFF
    757          						flag = 0;
    758          						break;
    759          					}
    760          				}
   \                     ??CrossCallReturnLabel_18:
   \   0000BE   EE           MOV       A,R6
   \   0000BF   28           ADD       A,R0
   \   0000C0   F582         MOV       DPL,A
   \   0000C2   EF           MOV       A,R7
   \   0000C3   39           ADDC      A,R1
   \   0000C4   F583         MOV       DPH,A
   \   0000C6   E0           MOVX      A,@DPTR
   \   0000C7   6C           XRL       A,R4
   \   0000C8   701B         JNZ       ??wait_for_7
   \   0000CA   08           INC       R0
   \   0000CB   E8           MOV       A,R0
   \   0000CC   7001         JNZ       ??wait_for_8
   \   0000CE   09           INC       R1
   \                     ??wait_for_8:
   \   0000CF   C3           CLR       C
   \   0000D0   E8           MOV       A,R0
   \   0000D1   95..         SUBB      A,?V2
   \   0000D3   E9           MOV       A,R1
   \   0000D4   95..         SUBB      A,?V3
   \   0000D6   40D8         JC        ??wait_for_9
    761          				if (flag == 1) {
    762          					debug(err);
   \   0000D8                ; Setup parameters for call to function _UARTSend
   \   0000D8   EE           MOV       A,R6
   \   0000D9   FA           MOV       R2,A
   \   0000DA   EF           MOV       A,R7
   \   0000DB   FB           MOV       R3,A
   \   0000DC   7900         MOV       R1,#0x0
   \   0000DE   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    763          					return 1;
   \   0000E1   7901         MOV       R1,#0x1
   \   0000E3   8060         SJMP      ??wait_for_10
    764          				}
    765          			}
    766          
    767          			if (wait_len == (read_len - index)) {
   \                     ??wait_for_7:
   \   0000E5   12....       LCALL     ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000E8   65..         XRL       A,?V6
   \   0000EA   7003         JNZ       ??wait_for_11
   \   0000EC   E9           MOV       A,R1
   \   0000ED   65..         XRL       A,?V7
   \                     ??wait_for_11:
   \   0000EF   703D         JNZ       ??wait_for_1
    768          				flag = 1;
    769          				for (i = 0; i < wait_len; i ++) {
   \   0000F1   7800         MOV       R0,#0x0
   \   0000F3   7900         MOV       R1,#0x0
   \   0000F5   8021         SJMP      ??wait_for_12
    770          					if (buffer[index + i] != str[i]) {
   \                     ??wait_for_13:
   \   0000F7   EA           MOV       A,R2
   \   0000F8   28           ADD       A,R0
   \   0000F9   FC           MOV       R4,A
   \   0000FA   EB           MOV       A,R3
   \   0000FB   39           ADDC      A,R1
   \   0000FC   FD           MOV       R5,A
   \   0000FD   7402         MOV       A,#0x2
   \   0000FF   12....       LCALL     ?XSTACK_DISP0_8
   \   000102   12....       LCALL     ?Subroutine17 & 0xFFFF
    771          						flag = 0;
    772          						break;
    773          					}
    774          				}
   \                     ??CrossCallReturnLabel_19:
   \   000105   E5..         MOV       A,?V0
   \   000107   28           ADD       A,R0
   \   000108   F582         MOV       DPL,A
   \   00010A   E5..         MOV       A,?V1
   \   00010C   39           ADDC      A,R1
   \   00010D   F583         MOV       DPH,A
   \   00010F   E0           MOVX      A,@DPTR
   \   000110   6C           XRL       A,R4
   \   000111   701B         JNZ       ??wait_for_1
   \   000113   08           INC       R0
   \   000114   E8           MOV       A,R0
   \   000115   7001         JNZ       ??wait_for_12
   \   000117   09           INC       R1
   \                     ??wait_for_12:
   \   000118   C3           CLR       C
   \   000119   E8           MOV       A,R0
   \   00011A   95..         SUBB      A,?V6
   \   00011C   E9           MOV       A,R1
   \   00011D   95..         SUBB      A,?V7
   \   00011F   40D6         JC        ??wait_for_13
    775          				if (flag == 1) {
    776          					debug(str);
   \   000121                ; Setup parameters for call to function _UARTSend
   \   000121   AA..         MOV       R2,?V0
   \   000123   AB..         MOV       R3,?V1
   \   000125   7900         MOV       R1,#0x0
   \   000127   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
    777          					return 0;
   \   00012A   7900         MOV       R1,#0x0
   \   00012C   8017         SJMP      ??wait_for_10
    778          				}
    779          			}
    780          		}
    781          		timeout --;
    782          		if (!timeout) return 2;
   \                     ??wait_for_1:
   \   00012E   E5..         MOV       A,?V4
   \   000130   24FF         ADD       A,#-0x1
   \   000132   F5..         MOV       ?V4,A
   \   000134   E5..         MOV       A,?V5
   \   000136   34FF         ADDC      A,#-0x1
   \   000138   F5..         MOV       ?V5,A
   \   00013A   E5..         MOV       A,?V4
   \   00013C   45..         ORL       A,?V5
   \   00013E   6003         JZ        $+5
   \   000140   02....       LJMP      ??wait_for_0 & 0xFFFF
   \   000143   7902         MOV       R1,#0x2
   \                     ??wait_for_10:
   \   000145   7442         MOV       A,#0x42
    783          	}
   \   000147   02....       LJMP      ?Subroutine0 & 0xFFFF
    784          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E582         MOV       A,DPL
   \   000002   2C           ADD       A,R4
   \   000003   F582         MOV       DPL,A
   \   000005   E583         MOV       A,DPH
   \   000007   3D           ADDC      A,R5
   \   000008   F583         MOV       DPH,A
   \   00000A   E0           MOVX      A,@DPTR
   \   00000B   FC           MOV       R4,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   85..82       MOV       DPL,?XSP + 0
   \   000003   85..83       MOV       DPH,?XSP + 1
   \   000006   E0           MOVX      A,@DPTR
   \   000007   C3           CLR       C
   \   000008   9A           SUBB      A,R2
   \   000009   F8           MOV       R0,A
   \   00000A   A3           INC       DPTR
   \   00000B   E0           MOVX      A,@DPTR
   \   00000C   9B           SUBB      A,R3
   \   00000D   F9           MOV       R1,A
   \   00000E   E8           MOV       A,R0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTRead::?relay`; Banked call to: _UARTRead
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A01         MOV       R2,#0x1
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   85..82       MOV       DPL,?XSP + 0
   \   00000F   85..83       MOV       DPH,?XSP + 1
   \   000012   C3           CLR       C
   \   000013   E0           MOVX      A,@DPTR
   \   000014   22           RET
    785          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    786          void exit_send() {
   \                     exit_send:
   \   000000   74F7         MOV       A,#-0x9
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    787          	print("+++");
   \   000005                ; Setup parameters for call to function _UARTSend
   \   000005   12....       LCALL     ?Subroutine11 & 0xFFFF
    788          	_delay_ms(10);
    789          	print("+++");
   \                     ??CrossCallReturnLabel_61:
   \   000008                ; Setup parameters for call to function _UARTSend
   \   000008   12....       LCALL     ?Subroutine11 & 0xFFFF
    790          	_delay_ms(10);
    791          	print("\r\n");
   \                     ??CrossCallReturnLabel_62:
   \   00000B                ; Setup parameters for call to function _UARTSend
   \   00000B   7A..         MOV       R2,#`?<Constant "\\r\\n">` & 0xff
   \   00000D   7B..         MOV       R3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   00000F   12....       LCALL     ??Subroutine28_0 & 0xFFFF
    792          	_delay_ms(10);
    793          }
   \                     ??CrossCallReturnLabel_63:
   \   000012   02....       LJMP      ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7A..         MOV       R2,#`?<Constant "+++">` & 0xff
   \   000002   7B..         MOV       R3,#(`?<Constant "+++">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine28_0
   \   000004                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   7901         MOV       R1,#0x1
   \   000002   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005                ; Setup parameters for call to function _delay_ms
   \   000005   7A0A         MOV       R2,#0xa
   \   000007   7B00         MOV       R3,#0x0
   \   000009   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
   \   00000C   22           RET
    794          
    795          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 WiFiSend(uint8 *fmt, ...) {
   \                     WiFiSend:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    797          	va_list arg_ptr;
    798          	uint8 buffer[UartDefaultTxLen], cnt;
    799          	uint16 length = 0;
    800          	for(cnt = 0 ; cnt < UartDefaultTxLen ; cnt++)
    801          		buffer[cnt] = 0x00;
   \   00000A   7402         MOV       A,#0x2
   \   00000C   12....       LCALL     ?XSTACK_DISP0_8
   \   00000F   E4           CLR       A
   \   000010   7840         MOV       R0,#0x40
   \                     ??WiFiSend_0:
   \   000012   F0           MOVX      @DPTR,A
   \   000013   A3           INC       DPTR
   \   000014   D8FC         DJNZ      R0,??WiFiSend_0
    802          	va_start(arg_ptr, fmt);
   \   000016   744E         MOV       A,#0x4e
   \   000018   12....       LCALL     ?XSTACK_DISP100_8
   \   00001B   12....       LCALL     ?Subroutine3 & 0xFFFF
    803          	length = vsprintf((char *)buffer, (const char *)fmt, arg_ptr);
   \                     ??CrossCallReturnLabel_1:
   \   00001E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000021   EA           MOV       A,R2
   \   000022   FC           MOV       R4,A
   \   000023   EB           MOV       A,R3
   \   000024   FD           MOV       R5,A
   \   000025   7404         MOV       A,#0x4
   \   000027   12....       LCALL     ?XSTACK_DISP101_8
   \   00002A   12....       LCALL     `??vsprintf::?relay`; Banked call to: vsprintf
   \   00002D   7402         MOV       A,#0x2
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
   \   000032   8A..         MOV       ?V0,R2
   \   000034   8B..         MOV       ?V1,R3
    804          	va_end(arg_ptr);
    805          	debug_and_print("AT+CIPSEND=0,%d\r\n", length);
   \   000036                ; Setup parameters for call to function _UARTSend
   \   000036   78..         MOV       R0,#?V0
   \   000038   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003B   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   00003D   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   00003F   7900         MOV       R1,#0x0
   \   000041   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000044   7402         MOV       A,#0x2
   \   000046   12....       LCALL     ?DEALLOC_XSTACK8
   \   000049                ; Setup parameters for call to function _UARTSend
   \   000049   78..         MOV       R0,#?V0
   \   00004B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004E   7A..         MOV       R2,#`?<Constant "AT+CIPSEND=0,%d\\r\\n">` & 0xff
   \   000050   7B..         MOV       R3,#(`?<Constant "AT+CIPSEND=0,%d\\r\\n">` >> 8) & 0xff
   \   000052   7901         MOV       R1,#0x1
   \   000054   12....       LCALL     `??_UARTSend::?relay`; Banked call to: _UARTSend
   \   000057   7402         MOV       A,#0x2
   \   000059   12....       LCALL     ?DEALLOC_XSTACK8
    806          	_delay_ms(10);
   \   00005C                ; Setup parameters for call to function _delay_ms
   \   00005C   7A0A         MOV       R2,#0xa
   \   00005E   7B00         MOV       R3,#0x0
   \   000060   12....       LCALL     `??_delay_ms::?relay`; Banked call to: _delay_ms
    807          	// if (wait_for(">", "ERROR\r\n", 0)) return 1;
    808          	HalUARTWrite(1, (uint8 *)buffer, length);
   \   000063                ; Setup parameters for call to function HalUARTWrite
   \   000063   AC..         MOV       R4,?V0
   \   000065   AD..         MOV       R5,?V1
   \   000067   7402         MOV       A,#0x2
   \   000069   12....       LCALL     ?XSTACK_DISP101_8
   \   00006C   7901         MOV       R1,#0x1
   \   00006E   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    809          	return wait_for("SEND OK\r\n", "SEND FAIL\r\n", 0);
   \   000071                ; Setup parameters for call to function wait_for
   \   000071   E4           CLR       A
   \   000072   F5..         MOV       ?V0,A
   \   000074   F5..         MOV       ?V1,A
   \   000076   78..         MOV       R0,#?V0
   \   000078   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00007B   7C..         MOV       R4,#`?<Constant "SEND FAIL\\r\\n">` & 0xff
   \   00007D   7D..         MOV       R5,#(`?<Constant "SEND FAIL\\r\\n">` >> 8) & 0xff
   \   00007F   7A..         MOV       R2,#`?<Constant "SEND OK\\r\\n">` & 0xff
   \   000081   7B..         MOV       R3,#(`?<Constant "SEND OK\\r\\n">` >> 8) & 0xff
   \   000083   12....       LCALL     ??Subroutine30_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000086   12....       LCALL     ?DEALLOC_XSTACK8
   \   000089   7442         MOV       A,#0x42
   \   00008B   12....       LCALL     ?DEALLOC_XSTACK8
   \   00008E   7F04         MOV       R7,#0x4
   \   000090   02....       LJMP      ?BANKED_LEAVE_XDATA
    810          }
    811          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    812          uint16 WiFiRecv(uint8 *buff) {
   \                     WiFiRecv:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV       A,#-0xe
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV       A,#-0x42
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A..         MOV       ?V4,R2
   \   00000C   8B..         MOV       ?V5,R3
    813          	uint16 read_len, l_index;
    814          	uint8 buffer[UartDefaultRxLen];
    815          	while (1) {
    816          		_UARTRead(HAL_UART_PORT_1, buffer, &read_len);
   \                     ??WiFiRecv_0:
   \   00000E                ; Setup parameters for call to function _UARTRead
   \   00000E   AC..         MOV       R4,?XSP + 0
   \   000010   AD..         MOV       R5,?XSP + 1
   \   000012   7402         MOV       A,#0x2
   \   000014   12....       LCALL     ?XSTACK_DISP101_8
   \   000017   12....       LCALL     ?Subroutine12 & 0xFFFF
    817          		_delay_ms(1);
    818          		if (read_len > 10) { // at least 11 chars "+IPD,0,X:\r\n"
   \                     ??CrossCallReturnLabel_9:
   \   00001A   940B         SUBB      A,#0xb
   \   00001C   A3           INC       DPTR
   \   00001D   E0           MOVX      A,@DPTR
   \   00001E   9400         SUBB      A,#0x0
   \   000020   40EC         JC        ??WiFiRecv_0
    819          			l_index = 0;
   \   000022   7E00         MOV       R6,#0x0
   \   000024   7F00         MOV       R7,#0x0
   \                     ??WiFiRecv_1:
   \   000026   7402         MOV       A,#0x2
   \   000028   12....       LCALL     ?XSTACK_DISP0_8
   \   00002B   E582         MOV       A,DPL
   \   00002D   2E           ADD       A,R6
   \   00002E   F582         MOV       DPL,A
   \   000030   E583         MOV       A,DPH
   \   000032   3F           ADDC      A,R7
   \   000033   F583         MOV       DPH,A
   \   000035   E0           MOVX      A,@DPTR
   \   000036   643A         XRL       A,#0x3a
   \   000038   6017         JZ        ??WiFiRecv_2
    820          			while (l_index < read_len && buffer[l_index] != ':') {
    821          				l_index ++;
   \   00003A   0E           INC       R6
   \   00003B   EE           MOV       A,R6
   \   00003C   7001         JNZ       ??WiFiRecv_3
   \   00003E   0F           INC       R7
    822          			}
   \                     ??WiFiRecv_3:
   \   00003F   85..82       MOV       DPL,?XSP + 0
   \   000042   85..83       MOV       DPH,?XSP + 1
   \   000045   E0           MOVX      A,@DPTR
   \   000046   F8           MOV       R0,A
   \   000047   A3           INC       DPTR
   \   000048   E0           MOVX      A,@DPTR
   \   000049   F9           MOV       R1,A
   \   00004A   C3           CLR       C
   \   00004B   EE           MOV       A,R6
   \   00004C   98           SUBB      A,R0
   \   00004D   EF           MOV       A,R7
   \   00004E   99           SUBB      A,R1
   \   00004F   40D5         JC        ??WiFiRecv_1
    823          			if (l_index == read_len) continue;
   \                     ??WiFiRecv_2:
   \   000051   85..82       MOV       DPL,?XSP + 0
   \   000054   85..83       MOV       DPH,?XSP + 1
   \   000057   E0           MOVX      A,@DPTR
   \   000058   6E           XRL       A,R6
   \   000059   7003         JNZ       ??WiFiRecv_4
   \   00005B   A3           INC       DPTR
   \   00005C   E0           MOVX      A,@DPTR
   \   00005D   6F           XRL       A,R7
   \                     ??WiFiRecv_4:
   \   00005E   60AE         JZ        ??WiFiRecv_0
    824          			l_index ++;
   \   000060   0E           INC       R6
   \   000061   EE           MOV       A,R6
   \   000062   7001         JNZ       ??WiFiRecv_5
   \   000064   0F           INC       R7
    825          			osal_memcpy(buff, buffer + l_index, read_len - l_index);
   \                     ??WiFiRecv_5:
   \   000065                ; Setup parameters for call to function osal_memcpy
   \   000065   7402         MOV       A,#0x2
   \   000067   12....       LCALL     ?XSTACK_DISP0_8
   \   00006A   E582         MOV       A,DPL
   \   00006C   2E           ADD       A,R6
   \   00006D   F5..         MOV       ?V0,A
   \   00006F   E583         MOV       A,DPH
   \   000071   3F           ADDC      A,R7
   \   000072   F5..         MOV       ?V1,A
   \   000074   75..00       MOV       ?V2,#0x0
   \   000077   78..         MOV       R0,#?V0
   \   000079   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00007C   7403         MOV       A,#0x3
   \   00007E   12....       LCALL     ?XSTACK_DISP0_8
   \   000081   E0           MOVX      A,@DPTR
   \   000082   C3           CLR       C
   \   000083   9E           SUBB      A,R6
   \   000084   FC           MOV       R4,A
   \   000085   A3           INC       DPTR
   \   000086   E0           MOVX      A,@DPTR
   \   000087   9F           SUBB      A,R7
   \   000088   FD           MOV       R5,A
   \   000089   AA..         MOV       R2,?V4
   \   00008B   AB..         MOV       R3,?V5
   \   00008D   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000090   7403         MOV       A,#0x3
   \   000092   12....       LCALL     ?DEALLOC_XSTACK8
    826          			return (read_len - l_index);
   \   000095   85..82       MOV       DPL,?XSP + 0
   \   000098   85..83       MOV       DPH,?XSP + 1
   \   00009B   E0           MOVX      A,@DPTR
   \   00009C   C3           CLR       C
   \   00009D   9E           SUBB      A,R6
   \   00009E   FA           MOV       R2,A
   \   00009F   A3           INC       DPTR
   \   0000A0   E0           MOVX      A,@DPTR
   \   0000A1   9F           SUBB      A,R7
   \   0000A2   FB           MOV       R3,A
   \   0000A3   7442         MOV       A,#0x42
   \   0000A5   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000A8   7F06         MOV       R7,#0x6
   \   0000AA   02....       LJMP      ?BANKED_LEAVE_XDATA
    827          		}
    828          	}
    829          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendGroupMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendGroupMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_UARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _UARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_ms::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_delay_us::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _delay_us

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??wait_for::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    wait_for

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??exit_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    exit_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??WiFiRecv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    WiFiRecv

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UART_1 INITIALIZED!\\r\\n">`:
   \   000000   55415254     DB "UART_1 INITIALIZED!\015\012"
   \            5F312049
   \            4E495449
   \            414C495A
   \            4544210D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter AP Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter AP Mode\015\012"
   \            72204150
   \            204D6F64
   \            650D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Enter STA Mode\\r\\n">`:
   \   000000   456E7465     DB "Enter STA Mode\015\012"
   \            72205354
   \            41204D6F
   \            64650D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+RST\\r\\n">`:
   \   000000   41542B52     DB "AT+RST\015\012"
   \            53540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ready\\r\\n">`:
   \   000000   72656164     DB "ready\015\012"
   \            790D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ERROR\\r\\n">`:
   \   000000   4552524F     DB "ERROR\015\012"
   \            520D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=2\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=2\015\012"
   \            574D4F44
   \            453D320D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK\\r\\n">`:
   \   000000   4F4B0D0A     DB "OK\015\012"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWSAP=\\"ESP8266\\",\\"1...">`:
   \   000000   41542B43     DB "AT+CWSAP=\"ESP8266\",\"123456\",11,0\015\012"
   \            57534150
   \            3D224553
   \            50383236
   \            36222C22
   \            31323334
   \            3536222C
   \            31312C30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=0\015\012"
   \            49504D4F
   \            44453D30
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8266\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8266\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3236360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT\015\012"
   \            4E4E4543
   \            540D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0,CONNECT FAIL\\r\\n">`:
   \   000000   302C434F     DB "0,CONNECT FAIL\015\012"
   \            4E4E4543
   \            54204641
   \            494C0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CTS\\r\\n">`:
   \   000000   4354530D     DB "CTS\015\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IP">`:
   \   000000   495000       DB "IP"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT IP\\r\\n">`:
   \   000000   474F5420     DB "GOT IP\015\012"
   \            49500D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PORT">`:
   \   000000   504F5254     DB "PORT"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PORT\\r\\n">`:
   \   000000   474F5420     DB "GOT PORT\015\012"
   \            504F5254
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SSID">`:
   \   000000   53534944     DB "SSID"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT SSID\\r\\n">`:
   \   000000   474F5420     DB "GOT SSID\015\012"
   \            53534944
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PSWD">`:
   \   000000   50535744     DB "PSWD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GOT PSWD\\r\\n">`:
   \   000000   474F5420     DB "GOT PSWD\015\012"
   \            50535744
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OVER\\r\\n">`:
   \   000000   4F564552     DB "OVER\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Read Flash Failed\\r\\n">`:
   \   000000   52656164     DB "Read Flash Failed\015\012"
   \            20466C61
   \            73682046
   \            61696C65
   \            640D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"%s\\",\\"%s\\"\\r\\n">`:
   \   000000   41542B43     DB "AT+CWJAP=\"%s\",\"%s\"\015\012"
   \            574A4150
   \            3D222573
   \            222C2225
   \            73220D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "FAIL\\r\\n">`:
   \   000000   4641494C     DB "FAIL\015\012"
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=0\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=0\015\012"
   \            49504D55
   \            583D300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMODE=1\015\012"
   \            49504D4F
   \            44453D31
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=\\"TCP\\",\\"%s...">`:
   \   000000   41542B43     DB "AT+CIPSTART=\"TCP\",\"%s\",%s\015\012"
   \            49505354
   \            4152543D
   \            22544350
   \            222C2225
   \            73222C25
   \            730D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CLOSED\\r\\n">`:
   \   000000   434C4F53     DB "CLOSED\015\012"
   \            45440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND\015\012"
   \            49505345
   \            4E440D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ">">`:
   \   000000   3E00         DB ">"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "heart beat\\r\\n">`:
   \   000000   68656172     DB "heart beat\015\012"
   \            74206265
   \            61740D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "received\\r\\n">`:
   \   000000   72656365     DB "received\015\012"
   \            69766564
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "WIFI RESET\\r\\n">`:
   \   000000   57494649     DB "WIFI RESET\015\012"
   \            20524553
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temp is:">`:
   \   000000   54656D70     DB "Temp is:"
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Humidity is:">`:
   \   000000   48756D69     DB "Humidity is:"
   \            64697479
   \            2069733A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data:\\n">`:
   \   000000   49206765     DB "I get data:\012"
   \            74206461
   \            74613A0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I am Coordinator\\r\\n\\000">`:
   \   000000   4920616D     DB 49H, 20H, 61H, 6DH, 20H, 43H, 6FH, 6FH
   \            20436F6F
   \   000008   7264696E     DB 72H, 64H, 69H, 6EH, 61H, 74H, 6FH, 72H
   \            61746F72
   \   000010   0D0A0000     DB 0DH, 0AH, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "+++">`:
   \   000000   2B2B2B00     DB "+++"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,%d\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,%d\015\012"
   \            49505345
   \            4E443D30
   \            2C25640D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND OK\\r\\n">`:
   \   000000   53454E44     DB "SEND OK\015\012"
   \            204F4B0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SEND FAIL\\r\\n">`:
   \   000000   53454E44     DB "SEND FAIL\015\012"
   \            20464149
   \            4C0D0A00

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0    185   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_set_event
      0    185   SampleApp_MessageMSGCB
        0     10   -> HalUARTWrite
      0    179   SampleApp_ProcessEvent
        0    175   -> HalUARTOpen
        0    175   -> HalUARTWrite
        0    175   -> SampleApp_HandleKeys
        0    175   -> SampleApp_MessageMSGCB
        0    175   -> SampleApp_SendGroupMessage
        0    175   -> WiFiRecv
        0    175   -> WiFiSend
        0    175   -> _UARTRead
        0    175   -> _UARTSend
        0    179   -> _UARTSend
        0    175   -> _delay_ms
        0    175   -> exit_send
        0    178   -> osal_memcmp
        0    175   -> osal_msg_deallocate
        0    175   -> osal_msg_receive
        0    177   -> osal_nv_item_init
        0    179   -> osal_nv_read
        0    179   -> osal_nv_write
        0    175   -> osal_set_event
        0    175   -> osal_start_timerEx
        0    177   -> wait_for
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0    214   SampleApp_SendGroupMessage
        0     39   -> AF_DataRequest
      0     29   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest
      0    258   WiFiRecv
        0     80   -> _UARTRead
        0     80   -> _delay_ms
        0     83   -> osal_memcpy
      1    255   WiFiSend
        0     78   -> HalUARTWrite
        0     80   -> _UARTSend
        0     78   -> _delay_ms
        0     80   -> vsprintf
        0     80   -> wait_for
      0    184   _UARTRead
        0      9   -> HalUARTRead
      1    257   _UARTSend
        0     76   -> HalUARTWrite
        0     78   -> vsprintf
      0    184   _delay_ms
        0      9   -> _delay_us
      0      9   _delay_us
      0    184   exit_send
        0      9   -> _UARTSend
        0      9   -> _delay_ms
      0    259   wait_for
        0     82   -> _UARTRead
        0     82   -> _UARTSend
        0     82   -> _delay_ms
        0     82   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "+++">
      17  ?<Constant "0,CONNECT FAIL\r\n">
      12  ?<Constant "0,CONNECT\r\n">
       2  ?<Constant ">">
      15  ?<Constant "AT+CIPMODE=0\r\n">
      15  ?<Constant "AT+CIPMODE=1\r\n">
      14  ?<Constant "AT+CIPMUX=0\r\n">
      14  ?<Constant "AT+CIPMUX=1\r\n">
      18  ?<Constant "AT+CIPSEND=0,%d\r\n">
      13  ?<Constant "AT+CIPSEND\r\n">
      22  ?<Constant "AT+CIPSERVER=1,8266\r\n">
      28  ?<Constant "AT+CIPSTART=\"TCP\",\"%s...">
      21  ?<Constant "AT+CWJAP=\"%s\",\"%s\"\r\n">
      14  ?<Constant "AT+CWMODE=1\r\n">
      14  ?<Constant "AT+CWMODE=2\r\n">
      35  ?<Constant "AT+CWSAP=\"ESP8266\",\"1...">
       9  ?<Constant "AT+RST\r\n">
       9  ?<Constant "CLOSED\r\n">
       6  ?<Constant "CTS\r\n">
       8  ?<Constant "ERROR\r\n">
      16  ?<Constant "Enter AP Mode\r\n">
      17  ?<Constant "Enter STA Mode\r\n">
       7  ?<Constant "FAIL\r\n">
       9  ?<Constant "GOT IP\r\n">
      11  ?<Constant "GOT PORT\r\n">
      11  ?<Constant "GOT PSWD\r\n">
      11  ?<Constant "GOT SSID\r\n">
       8  ?<Constant "Group 1">
      13  ?<Constant "Humidity is:">
      20  ?<Constant "I am Coordinator\r\n\000">
      13  ?<Constant "I get data:\n">
      12  ?<Constant "I get data\n">
       3  ?<Constant "IP">
       5  ?<Constant "OK\r\n">
       7  ?<Constant "OVER\r\n">
       5  ?<Constant "PORT">
       5  ?<Constant "PSWD">
      20  ?<Constant "Read Flash Failed\r\n">
      12  ?<Constant "SEND FAIL\r\n">
      10  ?<Constant "SEND OK\r\n">
       5  ?<Constant "SSID">
       9  ?<Constant "Temp is:">
      22  ?<Constant "UART_1 INITIALIZED!\r\n">
      13  ?<Constant "WIFI RESET\r\n">
       2  ?<Constant "\n">
       3  ?<Constant "\r\n">
      13  ?<Constant "heart beat\r\n">
       8  ?<Constant "ready\r\n">
      11  ?<Constant "received\r\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       6  ??Subroutine22_0
       6  ??Subroutine23_0
      11  ??Subroutine24_0
      11  ??Subroutine25_0
       5  ??Subroutine26_0
       5  ??Subroutine27_0
      13  ??Subroutine28_0
       4  ??Subroutine29_0
       6  ??Subroutine30_0
       8  ?Subroutine0
       3  ?Subroutine1
       4  ?Subroutine10
       4  ?Subroutine11
      21  ?Subroutine12
      11  ?Subroutine13
      12  ?Subroutine14
       6  ?Subroutine15
       2  ?Subroutine16
      13  ?Subroutine17
       8  ?Subroutine18
       5  ?Subroutine19
       5  ?Subroutine2
      19  ?Subroutine20
       9  ?Subroutine21
      22  ?Subroutine3
       2  ?Subroutine4
       2  ?Subroutine5
      13  ?Subroutine6
      11  ?Subroutine7
      16  ?Subroutine8
       6  ?Subroutine9
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      59  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     157  SampleApp_Init
       6  SampleApp_Init::?relay
     225  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
    1735  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
     116  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      96  SampleApp_SendGroupMessage
       6  SampleApp_SendGroupMessage::?relay
      97  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
     173  WiFiRecv
       6  WiFiRecv::?relay
     147  WiFiSend
       6  WiFiSend::?relay
       1  _A_P0
      83  _UARTRead
       6  _UARTRead::?relay
      72  _UARTSend
       6  _UARTSend::?relay
      36  _delay_ms
       6  _delay_ms::?relay
      33  _delay_us
       6  _delay_us::?relay
      21  exit_send
       6  exit_send::?relay
     330  wait_for
       6  wait_for::?relay

 
 3 649 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
   617 bytes in segment XDATA_ROM_C
    53 bytes in segment XDATA_Z
 
    90 bytes of CODE     memory
   617 bytes of CONST    memory
     0 bytes of DATA     memory (+ 1 byte shared)
 3 649 bytes of HUGECODE memory
    53 bytes of XDATA    memory

Errors: none
Warnings: none
